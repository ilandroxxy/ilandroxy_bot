# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип коллекций - список list()
# - Список вмещает в себя неограниченное кол-во элементов разных типов данных
# - У каждого элемента списка есть порядковый номер - индекс
# - Индексы могут считаться слева-направо начиная с 0 или справа-налево начиная с -1
# - Элементы списка можно изменять через индексы

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]}')

# i  01234
s = 'abcde'

print(f'Первый элемент строки: {s[0]} \n'
      f'Последний элемент строки: {s[-1]}')

# Изменяем элемент списка:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

M[3] = 'D'
print(M)    # ['a', 'b', 'c', 'D', 'e']

for i in range(len(M)):
    if M[i] in 'euoa':
        M[i] = M[i].upper()
    else:
        M[i] = M[i].lower()
print(M)  # ['A', 'b', 'c', 'd', 'E']
'''

# Изменить элемент в строке
'''
s = 'abcde'
s = s[:3] + 'D' + s[-1]
print(s)  # abcDe
'''

# Срезы списков/строк:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

print(M[1:4])  # ['b', 'c', 'd']
print(M[:3])  # ['a', 'b', 'c']
print(M[3:])  # ['d', 'e']
print(M[::])  # ['a', 'b', 'c', 'd', 'e']
print(M[::2])  # ['a', 'c', 'e']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a']
'''

# Функции списков
'''
M = [2, 4, 6, 3, 4, 7]

print(len(M))  # len() - возвращает длину последовательности (кол-во элементов)
print(sum(M))
print(max(M))
print(min(M))

print(set(M))  # {2, 3, 4, 6, 7} - set() удаляет копии элементов
print(len(set(M)))  # 5 - Сколько различных цифр содержит эта запись?

print(sorted(M))  # [2, 3, 4, 4, 6, 7]
print(sorted(M, reverse=True))  # [7, 6, 4, 4, 3, 2]

s = '2345643245'
print(sorted(s))  # ['2', '2', '3', '3', '4', '4', '4', '5', '5', '6']
'''

# Методы списков (Методы - это частный случай функций направленных на определенный объект/тип данных)
'''
M = [4, 6, 7, 3, 4, 6]

print(M.count(4))  # 2 - кол-во вхождений элемента в список
print(M.index(4))  # 0 - возвращает индекс первого найденного элемента

M.append(8)
M.append(9)  # добавил элементы в конец списка
print(M)  # [4, 6, 7, 3, 4, 6, 8, 9]

M.sort()
print(M)  # [3, 4, 4, 6, 6, 7, 8, 9]

M.reverse()
print(M)  # [9, 8, 7, 6, 6, 4, 4, 3]
'''

# Методы строк
'''
s = '562344324'

print(s.count('2'))  # 2
print(s.index('2'))  # 2
print(s.rindex('2'))  # 7 - индекс крайнего правого элемента

s = s.replace('2', '*')
print(s)  # 56*3443*4

s = s.replace('*', '2', 1)
print(s)  # 5623443*4

s = '1231ui3h213ui4h123'
for x in s:
    if x.isdigit():
        print(x, end=' ')
print()

id = '123.43.254.4'
print(id.split('.'))  # ['123', '43', '254', '4']

ID = [int(x) for x in id.split('.')]
print(ID)  # [123, 43, 254, 4]


old_id = id.split('.')
new_id = '*'.join(old_id)
print(new_id)  # 123*43*254*4
'''


# Генераторы списков
'''
M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x**2 for x in range(10)]
print(M)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]

# Сумма цифр строки?
'''
print(sum([int(x) for x in input('Введите строку: ') if x.isdigit()]))
'''
# Рандомная генерация списка длины 10

import random
M = [random.randint(0, 100) for _ in range(10)]
print(M)
'''

# endregion Урок: ******************************************************************


# Екатерина = [2.1, 6.1]
# КЕГЭ  = []
# на следующем уроке:
