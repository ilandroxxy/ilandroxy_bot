
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# - это однострочный комментарий (то есть программа эту строку не видит)

'''
"""
- это многострочный комментарий (используется для скрытия бока кода)
"""
'''



X = 5  # переменная - это способ обращаться к данным через их имя
# print(type(X))  # <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения

b = 5.0  # float (число с плавающей точкой) - вещественные числа/дроби
print(7 / 2)  # 3.5

c = '5'  # str (string) - строчный тип данных хранит в себе символы, букв, слова, текста
print(a * 4, c * 4)  # 20 5555 - при умножении строки на целое число - строка дублируется

d1 = True  # bool (Boolean) - Булева Алгебра/Математическая логика
d2 = False
print(4 < 10)  # 4 меньше 10?  True
'''


# Коллекция в Python - это аналоги массива, то есть позволяют хранить несколько значений одновременно

# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# Хранит неограниченное кол-во элементов, разных типов данных.
# У каждого элемента есть свой порядковый номер (индекс) начинающийся с нуля.
# Через индексы можно получать и менять элементы списка
print(A[0])  # 1

B = (1, 2, 3)  # tuple (кортеж)
# Полностью идентичная спискам, кроме момента: менять элементы кортежа - нельзя!
# Работает быстрее чем списки.

C = {1, 2, 3}  # set (множество)
# Не может содержать копий одного и того же значения - то есть удаляет копии
print({1, 2, 3, 1, 2, 3})  # {1, 2, 3}

D = {1: 'один', 2: 'два', 3: 'три'}  # dict (словарь)
print(D[2])  # два
# Элементы словаря состоят из двух частей: ключи и значение
# Ключи повторяться не могут, доступ к значению осуществляется через ключ
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)  # ValueError: invalid literal for int() with base 10: '5.0'
# при переводе из str в int или float - не должно быть лишних символов или букв
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3]
print(A, type(A))  # [1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>


M = [1, 2.0, '2', True, 1+3, 7/2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: 'один', 2: 'два', 3: 'три'} ]
for elem in M:
    print(elem, type(elem))
'''


# Ввод данных с клавиатуры
'''
x = input('Введите символ: ')  # функция input() - принимает только строку с клавиатуры
print(x, type(x))  # <class 'str'>

x = int(input('Введите целое число: '))
print(x, type(x))  # <class 'int'>
'''


# Работа со строкой в функции print() через f-строки
# Задача: Написать текст: "Сегодня прекрасная погода, хотя на улице облачно, но температура 22 градуса!"
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print("Сегодня прекрасная погода, хотя на улице ", weather, ", но температура ", temperature, " градуса!")
print("Сегодня прекрасная погода, хотя на улице " + weather + ", но температура " + str(temperature) + " градуса!")
print("Сегодня прекрасная погода, хотя на улице {}, но температура {} градуса!".format(weather, temperature))
print(f"Сегодня прекрасная погода, хотя на улице {weather}, но температура {temperature} градуса!")
'''


# Базовая арифметика в Python
'''
# a = 7
# b = 2
a, b = 7, 2
print(f'{a} + {b} = {a+b}\n'  # символ '\n' - делает перевод на новую строчку консоли
      f'{a} - {b} = {a-b}\n'
      f'{a} * {b} = {a*b}')

print()  # в любом print() есть один переход на новую строку через символ '\n'

print(f'{a} / {b} = {a/b} - обычное вещественное деление (дроби)\n'  
      f'{a} // {b} = {a//b} - деление нацело, отбрасывая остаток\n'
      f'{a} % {b} = {a%b} - остаток от деления (в обыкновенном виде)')

print()


print(f'Возведем число {a} в степень {b}: {a} ** {b} = {a**b}\n'
      f'Взять квадратный корень от числа 16: 16 ** (1/2) = {16 ** (1/2)}\n'
      f'Взять кубический корень от числа 27: 27 ** (1/3) = {27 ** (1/3)}')

import math
print(math.sqrt(16))

a = 5
a = a + 5
print(a)

a += 5  # две аналогичные записи
print(a)

a -= 5
print(a)

a //= 5  # a = a // 5
print(a)

a **= 2  # a = a ** 2
print(a)
'''

# endregion Урок: ******************************************************************


# todo: Екатерина = []
# todo: КЕГЭ  = []
# на прошлом уроке: Провели первый урок, полностью разобрали теорию типов данных переменных и базовую арифметику языка Python.
# на следующем уроке:
