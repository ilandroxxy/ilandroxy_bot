# region Домашка: ******************************************************************

# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************

# Функция для поиска делителей числа:
"""
import time
start = time.time()
'''
def divisors(x):
    div = []
    for j in range(1, x+1):
        if x % j == 0:
            div.append(j)
    return div
'''


def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


# print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
# print(divisors(16))  # [1, 2, 4, 4, 8, 16]
print(divisors(100_000_000))


end = time.time()
print(end - start)  # old: 2.832597017288208, new: 0.0003490447998046875
"""


# Тип 25 №27851
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [210235; 210300],
# числа, имеющие ровно четыре различных натуральных делителя, не считая единицы и самого числа.
# Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # не считая единицы и самого числа
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


for x in range(210235, 210300+1):
    d = divisors(x)
    if len(d) == 4:
        print(*d)
'''
# 2 4 52561 105122
# 2 4 52567 105134
# 2 4 52571 105142


# Тип 25 №39254
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 500000000, для которых 0<M(N)<N.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


k = 0
for x in range(500000000+1, 50000000000000):
    d = divisors(x)
    if len(d) >= 5:
        M = d[0] * d[1] * d[2] * d[3] * d[4]
        if 0 < M < x:
            print(M)
            k += 1
            if k == 5:
                break
'''
# 1008
# 1797092
# 48408867
# 1800
# 1156923


# Тип 25 №33770
# Найдите все натуральные числа, принадлежащие отрезку [106000000; 107000000],
# у которых ровно три различных чётных делителя.
# В ответе перечислите найденные числа в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set([x for x in div if x % 2 == 0]))


for x in range(106000000, 107000000+1):
    d = divisors(x)
    if len(d) == 3:
        print(x)
 '''
# 106084178
# 106492418
# 106784498
# 106842962


# Тип 25 №33104
# Назовём нетривиальным делителем натурального числа его делитель,
# не равный единице и самому числу. Например, у числа 6 есть два нетривиальных делителя: 2 и 3.
# Найдите все натуральные числа, принадлежащие отрезку [289123456; 389123456]
# и имеющие ровно три нетривиальных делителя. Для каждого найденного числа
# запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.
'''
def divisors(x):
    div = []
    if x ** 0.5 == int(x ** 0.5):
        for j in range(2, int(x**0.5)+1):
            if x % j == 0:
                div.append(j)
                div.append(x // j)
    return sorted(set(div))


for x in range(289123456, 389123456+1):
    d = divisors(x)
    if len(d) == 3:
        print(x, max(d))
'''
# Ответ:
# 294499921 2248091
# 352275361 2571353
# 373301041 2685619


# Тип 25 №33495
# Рассмотрим произвольное натуральное число, представим его всеми возможными способами
# в виде произведения двух натуральных чисел и найдём для каждого такого произведения разность сомножителей.
# Например, для числа 16 получим: 16=16*1=8*2=4*4, множество разностей содержит числа 15, 6 и 0.
# Найдите все натуральные числа, принадлежащие отрезку [2000000; 3000000], у которых составленное описанным
# способом множество разностей будет содержать не меньше трёх элементов, не превышающих 115.
# В ответе перечислите найденные числа в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            if (x // j) - j < 115:
                div.append((x // j) - j)
    return sorted(set(div))


for x in range(2000000, 3000000+1):
    d = divisors(x)
    if len(d) >= 3:
        print(x)
'''
# 2053440
# 2098080
# 2328480
# 2638944


# Тип 25 №52196
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.
#
# Найдите все натуральные числа, не превышающие 10**9, которые соответствуют
# маске 12*93?1? и при этом без остатка делятся на 3127.
#
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(3127, 10**9, 3127):
    if fnmatch(str(x), '12*93?1?'):
        print(x)
'''
# 120993011
# 122093715
# 126193212
# 127293916


# Тип 25 №59818
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
# Найдите все натуральные числа, не превосходящие 10**9, для которых выполнены все условия:
#
# — соответствуют маске *31*65?;
# — делятся на 31 и 2031 без остатка;
# — количество делителей числа является результатом любой степени двойки.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# справа от каждого числа их частное от деления на 2031.
'''
from fnmatch import *

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


A = [2**i for i in range(1, 10000)]
for x in range(2031, 10**9, 2031):
    if x % 31 == 0:
        if fnmatch(str(x), '*31*65?'):
            if len(divisors(x)) in A:
                print(x, x // 2031)
'''
# 53831655 26505
# 333126651 164021
# 512313657 252247
# 647931651 319021
# 831966654 409634


# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 107, найдите все простые числа, соответствующие маске 3?1111*.
# В ответе запишите все найденные числа в порядке возрастания.

'''
from fnmatch import *
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


for x in range(0, 10**7):
    if fnmatch(str(x), '3?1111*'):
        d = divisors(x)
        if len(d) == 2:
            print(x)
'''
# 311111
# 361111
# 3011117
# 3011119
# 3311117
# 3611119
# 3811117
# 3911111


# endregion Урок: ******************************************************************


# Екатерина = [2.1, 5.1, 6.1, 12.1, 14.1, 15.1, 16.1, 23.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
