
# region Домашка: ******************************************************************

'''Тип 25 № 28124
def fun(n):
    c = 0
    for i in range(1, n+1):
        if n % i == 0:
            c += 1
    return c
sps = []
c = 0
for i in range(568023, 569231):
    d = fun(i)
    if d > c:
        c = d
        print(c, i)
ответ 144 568260
'''


# Тип 25 № 33197
# Рассмотрим произвольное натуральное число, представим его всеми возможными способами
# в виде произведения двух натуральных чисел и найдём для каждого такого произведения разность сомножителей.
# Например, для числа 16 получим: 16=16*1=8*2=4*4,
# множество разностей содержит числа 15, 6 и 0. Найдите все натуральные числа,
# принадлежащие отрезку [1000000; 2000000],
# у которых составленное описанным способом множество разностей
# будет содержать не меньше трёх элементов, не превышающих 100.
# В ответе перечислите найденные числа в порядке возрастания.
'''
def fun(n):
    sps = set()
    for j in range(1, int(n**0.5)):
        if n % j == 0 and (n // j) - j <= 100:
            sps.add((n // j) - j)
    return sorted(sps)

for i in range(1000000, 2000000+1):
    d = fun(i)
    if len(d) >= 3:
        print(i)
'''
# 1113840
# 1179360
# 1208844
# 1499400


# Тип 25 № 27856
'''
def fun(n):
    sps = []
    for i in range(1, n+1, 2):
        if n % i == 0:
            sps.append(i)
    return sps
for j in range(95632, 95651):
    d = fun(j)
    if len(d) == 6:
        print(d)
'''
# [1, 3, 9, 10627, 31881, 95643]
# [1, 7, 49, 61, 427, 2989]
# [1, 5, 25, 1913, 9565, 47825]



'''Тип 25 № 28123
def fun(n):
    sps = []
    for i in range(2, n+1, 2):
        if n % i == 0:
            sps.append(i)
    return sps
for j in range(125256, 125331):
    d = fun(j)
    if len(d) == 6:
        print(d)

[2, 6, 18, 13918, 41754, 125262]
[2, 4, 8, 31322, 62644, 125288]
[2, 6, 18, 13922, 41766, 125298]
'''


# Тип 25 № 33770 Добавить в вариант
# Найдите все натуральные числа, принадлежащие отрезку [106000000; 107000000],
# у которых ровно три различных чётных делителя. В ответе перечислите найденные числа в порядке возрастания.
'''
def fun(n):
    sps = set()
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            if i % 2 == 0:
                sps.add(i)
            if (n // i) % 2 == 0:
                sps.add(n // i)
    return sorted(sps)

for j in range(106000000, 107000000+1):
    d = fun(j)
    if len(d) == 3:
        print(j)
'''
# 106084178
# 106492418
# 106784498
# 106842962


'''Тип 25 № 28122
def fun(n):
    sps = []
    for i in range(1, n+1):
        if n % i == 0:
            sps.append(i)
    return sps
for i in range(489421, 489441):
    d = fun(i)
    if len(d) == 4:
        print(d)

[1, 19, 25759, 489421]
[1, 2, 244711, 489422]
[1, 13, 37649, 489437]
'''

# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************


# Тип 25 № 47022
# Пусть M(N) — пятый по величине делитель натурального числа N без учёта самого числа и единицы.
#
# Если у числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M(N) = 0.
# Найдите 5 наименьших натуральных чисел, превышающих 300_000_000, для которых M(N)>0.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def fun(n):
    sps = set()
    for i in range(2, int(n**0.5)+1):  # без учёта самого числа и единицы
        if n % i == 0:
            sps.add(i)
            sps.add(n // i)
    return sorted(sps)

count = 0
for n in range(300_000_000+1, 300_000_000_000):
    d = fun(n)
    if len(d) >= 5:
        M = d[-5]
        print(M)
        count += 1
        if count == 5:
            break
'''
# 17
# 1119403
# 151
# 16666667
# 27272728




# Тип 25 № 36880
# Найдите все натуральные числа N, принадлежащие отрезку [400_000_000; 600_000_000],
# которые можно представить в виде N=2**m*3**n, где m — чётное число, n — нечётное число.
# В ответе запишите все найденные числа в порядке возрастания.

# print(600_000_000)
# print(2**28)
# print(3**17)
'''
R = []
for m in range(0, 50, 2):
    for n in range(1, 50, 2):
        N = 2 ** m * 3 ** n
        if 400_000_000 <= N <= 600_000_000:
            R.append(N)
for x in sorted(R):
    print(x)
'''
# Ответ:
# 408146688
# 452984832
# 516560652
# 573308928


# № 2407 (Уровень: Гроб)
# (PRO100 ЕГЭ) Найдите все натуральные числа, принадлежащие отрезку [1 000 000 000 ; 2 000 000 000],
# у которых больше 100 различных нечётных делителей, количество чётных делителей может быть любым.
# И при этом число должно делиться на каждое из чисел: 7, 13, 17, 23, 29, но не делиться ни на 3, ни на 5.
# В ответе запишите количество подходящих чисел.
'''
def fun(n):
    sps = set()
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            if i % 2 != 0:
                sps.add(i)
            if (n // i) % 2 != 0:
                sps.add(n // i)
    return sorted(sps)

count = 1
for n in range(1_000_000_000, 2_000_000_000+1):
    if n % 7 == 0 and n % 13 == 0 and n % 17 == 0 and n % 23 == 0 and n % 29 == 0:
        if n % 3 != 0 and n % 5 != 0:
            d = fun(n)
            if len(d) > 100:
                print(count, n)
                count += 1

'''
# Показать ответ: 73



# Тип 25 № 45259
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;  # десятичная система счисления
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа,
# соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.
'''
R = []
for x in range(0, 9+1):
    for y in range(0, 9 + 1):
        A = int(f'12345{x}7{y}8')
        if A % 23 == 0:
            R.append([A, A // 23])

for x in sorted(R):
    print(*x)
'''
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816


# Тип 25 № 47229 i
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4,
# делящиеся на 2023 без остатка. В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.

# print(10**10)
# print('1?2139***4')
'''
import itertools
M = []
for len_star in range(0, 3+1):
    for s in itertools.product('0123456789', repeat=len_star):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    for y in range(0, 9+1):
        A = int(f'1{y}2139{x}4')
        if A % 2023 == 0:
            R.append([A, A // 2023])

for x in sorted(R):
    print(*x)
  '''
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048


# № 6758 Апробация 10.03.23 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
# Среди натуральных чисел, не превышающих 10*8, найдите все числа,
# соответствующие маске 2*5443?1, делящиеся на 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

# print(10**8)
# print('2*5443?1')
'''
import itertools
M = []
for len_star in range(0, 1+1):
    for s in itertools.product('0123456789', repeat=len_star):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    for y in range(0, 9+1):
        A = int(f'2{x}5443{y}1')
        if A % 23 == 0:
            R.append([A, A // 23])

for x in sorted(R):
    print(*x)
'''
'''
for x in range(0, 9+1):
    for y in range(0, 9 + 1):
        A = int(f'2{x}5443{y}1')
        if A % 23 == 0:
            print(A, A // 23)
'''
# Показать ответ:
# 22544301 980187
# 23544341 1023667
# 24544381 1067147
# 28544311 1241057
# 29544351 1284537

f = open('9.txt', 'r').read()



# endregion Урок: ******************************************************************


# todo: Сергей = [2, 5, 8, 12, 14, 15, 16, 23]
# на прошлом уроке: Прорешивали вторую часть 25 номера с масками
# на следующем уроке:
