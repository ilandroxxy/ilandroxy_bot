# region Домашка: ******************************************************************************


# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Тип 8 № 9302
# Сколько слов длины 4, начинающихся с согласной буквы и заканчивающихся гласной буквой, можно составить из букв М, Е, Т, Р, О?
# Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.

# Вариант 1
'''
import itertools
sogl = 'МТР'
glas = 'ЕО'
count = 0
s = itertools.product('МЕТРО', repeat=4)
for temp in s:
    if temp[0] in sogl and temp[3] in glas:
        count += 1
print(count)
'''

# Вариант 2
'''
s = 'МЕТРО'
sogl = 'МТР'
glas = 'ЕО'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                temp = a + b + c + d
                if a in sogl and d in glas:
                    count += 1
print(count)
'''

# Вариант 3
'''
s = 'МЕТРО'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                if a in 'МТР' and d in 'ЕО':
                    count += 1
print(count)
'''
# Ответ: 150

# Тип 8 № 27295
# Света составляет 5-буквенные коды из букв С, В, Е, Т, А.
# Каждую букву нужно использовать ровно один раз, при этом нельзя ставить рядом две гласные.
# Сколько различных кодов может составить Света?

# Вариант 1
'''
import itertools
s = itertools.permutations('СВЕТА', r=5)
count = 0
for temp in s:
    temp = ''.join(temp)
    if 'ЕА' not in temp and 'АЕ' not in temp:
        count += 1
print(count)
'''

# Вариант 1
'''
s = 'СВЕТА'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    M = [a, b, c, d, e]
                    if len(set(M)) == len(M):
                        if 'ЕА' not in temp and 'АЕ' not in temp:
                            count += 1
print(count)
'''
# Ответ: 72


# Работа с файлами для 17 номера
'''
f = open('17.txt')
s = f.readlines()
print(s)
f.close()


M = [int(i) for i in open('17.txt')]
print(M)

# Идеальный вариант работы с файлами
with open('17.txt', 'r') as f:
    M = [int(i) for i in f]
'''


# Типы задач для 17 номера
'''
M = [1, 2, 3, 4, 5]
# 1. Назовём парой два идущих подряд элемента последовательности.
for i in range(0, len(M)-1):
    print(f'{M[i]}{M[i+1]}', end=' ')
print()
# 12 23 34 45

# 2. Назовём тройкой три идущих подряд элемента последовательности.
# 123 234 345
for i in range(0, len(M)-2):
    print(f'{M[i]}{M[i+1]}{M[i+2]}', end=' ')
print('\n')

# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        print(f'{M[i]}{M[j]}', end=' ')
    print()
'''

# Тип 17 № 37368 i
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, у
# которых сумма элементов кратна 60 и хотя бы один элемент из пары делится на 40, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] + M[j]) % 60 == 0 and (M[i] % 40 == 0 or M[j] % 40 == 0):
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
'''
# 29278 19860

# Тип 17 № 39763
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём тройкой три идущих подряд элемента последовательности.
# Определите количество троек чисел таких, которые могут являться сторонами остроугольного треугольника.
# В ответе запишите два числа: сначала количество найденных троек, а затем — максимальную сумму элементов таких троек.
# Если таких троек не найдётся — следует вывести 00.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-2):
    A = sorted([M[i], M[i+1], M[i+2]])
    if A[2]**2 < A[0]**2 + A[1]**2:
        count += 1
        maxi = max(maxi, M[i] + M[i+1] + M[i+2])
print(count, maxi)
'''
# Ответ: 1175 29451


# Тип 17 № 39762
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар чисел, произведение которых кратно 15, а их сумма делится на 7.
# В ответе запишите два числа: сначала количество найденных пар, а затем — максимальную сумму элементов таких пар.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if (M[i] * M[i+1]) % 15 == 0 and (M[i] + M[i+1]) % 7 == 0:
        count += 1
        maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 170 18662.

# endregion Урок: ******************************************************************************


# todo: Данил = [2, 5, 7.1, 8, 9.1, 12, 14+, 15+, 16, 17, 23, 25.2]
# на прошлом уроке: Разобрали решение 8 номера через itertools и начали разбирать 17 номер
# на следующем уроке: Добиваем 17 номер, прорешиваем 9 номер.
