# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# - это однострочный комментарий (то есть программа не видит эту строчку)

'''
- это многострочный (блочный) комментарий
'''

X = 5  # переменная - это способ взаимодействия с ячейкой памяти (с данными лежащими в ней)

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(7 + 2, type(7 + 2))  # 9 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные числа (дроби)
print(7 / 2, type(7 / 2))  # 3.5 <class 'float'>
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый типа данных, хранит в себе символы, буквы, слова, текст, ..
print(a * 4, c * 4)  # 20 5555

d1 = True   # bool (Boolean) - Булева алгебра (математическая логика)
d2 = False
print(4 < 10)  # 4 меньше 10? Ответ: True
'''

# Коллекции - могут хранить в себе несколько значений

# Типы данных коллекций
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка М: {M[0]} \n'
      f'Последний элемент списка M: {M[-1]}')

# Первый элемент списка М: a
# Последний элемент списка M: e

M[2] = 100
print(M)  # ['a', 'b', 100, 'd', 'e']


A = [1, 2, 3]  # list (список)
# Может содержать в себе неограниченное кол-во элементов разных типов данных
# Каждый элемент имеет порядковый номер - индекс
# Индексы элементов начинаются с 0 (при счете слева направо) или с -1 (при счете справа налево)
# Через индексы можно не только брать элементы списка, но и изменять их

B = (1, 2, 3)  # tuple (кортеж)
# Полностью соответствует спискам, кроме четвертого пункта - менять элементы нельзя

C = {1, 2, 3, 3, 3, 3}  # set (множество)
# В множестве нельзя хранить два одинаковых элемента
print(C)  # {1, 2, 3}

D = {"один": 1, "два": 2, "три": 3}  # dict (словарь)
# Элемент словаря разбивается на две части: ключ и значение
# Доступ к значению элемента осуществляется через ключ
print(D['один'])  # 1
D["один"] = 'one'
print(D)  # {'один': 'one', 'два': 2, 'три': 3}
'''
'''
M = [1, 2.0, '3', True, 2+2, 7/2, 4 < 10, '3'+'5', [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 2, 'три': 3}]
for elem in M:
    print(elem, type(elem))
    # 1 <class 'int'>
    # 2.0 <class 'float'>
    # 3 <class 'str'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 3.5 <class 'float'>
    # True <class 'bool'>
    # 35 <class 'str'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'один': 'one', 'два': 2, 'три': 3} <class 'dict'>
'''

'''
print(3 + "3")
# TypeError: unsupported operand type(s) for +: 'int' and 'str'

print('Hello, ' + 'world!')
# Hello, world!
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>
# ValueError: invalid literal for int() with base 10: '5.0'


A = [1, 2, 3, 1, 2, 3]
print(A, type(A))  # [1, 2, 3, 1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')  # принимает только строковый тип данных с клавиатуры
print(s, type(s))  # 123231456 <class 'str'>

x = int(input('Введите число: '))
print(x, type(x))  # 2134567 <class 'int'>
'''

# Работа с f-строками
'''
# Написать: "Сегодня облачно, а температура 24 градуса!"
weather = 'облачно'
temperature = 24
print("Сегодня ", weather, ", а температура ", temperature, " градуса!")
print("Сегодня " + weather + ", а температура " + str(temperature) + " градуса!")
print("Сегодня {}, а температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, а температура {temperature} градуса!")
'''


# Базовая арифметика
"""
a = 7
b = 2
print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # в каждом print() есть переход на новую строку '\n'

print(f'{a} / {b} = {a/b} \n'  # 3.5 - вещественное деление, то есть результат: дробь
      f'{a} // {b} = {a//b} \n'  # 3 - целочисленное деление, то есть только целая часть
      f'{a} % {b} = {a%b}')  # 1 - остаток от деления (от обыкновенной дроби)

# Проверять четность числа
'''
n = int(input('n: '))
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
    
'''

print()

print(f'Возведите число {a} в степень {b}: {a} ** {b} = {a**b}')
print(f'Возьмите квадратный корень от числа 16: 16 ** (1/2) = {16 ** (1/2)}')
print(f'Возьмите кубический корень от числа 27: 27 ** (1/3) = {27 ** (1/3)}')
# Возведите число 7 в степень 2: 7 ** 2 = 49
# Возьмите квадратный корень от числа 16: 16 ** (1/2) = 4.0
# Возьмите кубический корень от числа 27: 27 ** (1/3) = 3.0
"""


# Список разрешенных библиотек
import fnmatch  # решает 25 номер
import turtle  # решает 6 номер
import ipaddress  # решает новый 13 номер
import sys  # решает 16 номер
import itertools  # решает 8 номер и может пригодиться в 12, 9, 17, 24, 25
'''
import math
import string

print(math.sqrt(16))  # 4.0
print(string.punctuation)  #!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
'''

# Как взаимодействовать с библиотеками
'''
import math
print(math.sqrt(16))

import math as m
print(m.sqrt(16))

from math import sqrt, pow
print(sqrt(16))

from math import *  # подключаем сразу все функции из библиотеки 
print(sqrt(16))
'''

# endregion Урок: ******************************************************************

# Никита = []
# КЕГЭ  = []
# на следующем уроке:
