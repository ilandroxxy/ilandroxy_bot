# region Домашка: ******************************************************************

# Дополните приведенный код, чтобы он:
# Заменил второй элемент списка на 14;
# Добавил числа 1, 2 и 5 в конец списка;
# Удалил первый элемент списка;
# Утроил список;
# Вставил число 45 по индексу 4;
# Вывел список, с помощью функции print()
'''
L = [4, 5, 6, 9]
L[1] = 14
# L.extend([1, 2, 5])
L += [1, 2, 5]  # конкатенация (склеивание) списков
"""
print(L)  # [4, 14, 6, 9, 1, 2, 5]
x = L.pop(0)  # Забрать элемент из списка
print(x, L)  # 4 [14, 6, 9, 1, 2, 5]
"""
del L[0]  # Просто удаление по индексу

L *= 3
# L.insert(4, 45)  # Вставили (то есть длину тоже увеличили)
# L[4] = 45  # Заменили элемент по индексу 4
L = L[:4] + [45] + L[4:]  # Вставили (то есть длину тоже увеличили)
print(L)
'''


# На вход программе подается натуральное число n, а затем n целых чисел.
# Напишите программу, которая выводит список, состоящий только из чётных чисел.
'''
n = int(input())
M = []
for i in range(n):
    x = int(input())
    if x % 2 == 0:
        M.append(x)
print(M)
'''
# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Строчный тип данных str (string)
'''
# i  01234
s = 'abcde'

print(f'Первый элемент строки s: {s[0]} \n'
      f'Последний элемент строки s: {s[-1]}')

# Первый элемент строки s: a
# Последний элемент строки s: e
'''

# Работа цикла for со строками:
'''
for x in s:
    print(x, end=' ')  # a b c d e
print()


for i in range(len(s)):
    print(s[i], end=' ')
print()
'''
# Менять элементы по индексу нельзя в отличие от списков

# Срезы строк:
'''
s = 'abcde'
print(s[0])  # a
print(s[1:3])  # bc
print(s[:3])  # abc
print(s[3:])  # de
print(s[::2])  # ace - под четными индексами элементы
print(s[1::2])  # bd - под нечетными индексами элементы
print(s[::-1])  # edcba - в обратом порядке (аналог .reverse() для списков) 
'''

# Функции строк:
'''
s = 'abcdea'
print(len(s))  # длина строки
print(max(s))  # e
print(min(s))  # a
print(set(s))  # {'a', 'e', 'b', 'd', 'c'} - удаляются копии элементов строк
print(sorted(s))  # ['a', 'a', 'b', 'c', 'd', 'e']
print(sorted(s, reverse=True))  # ['e', 'd', 'c', 'b', 'a', 'a']
'''

# Методы строк:
'''
s = 'abcdaae'
c = '1231243'
print(s.count('a'))  # 2 - возвращает кол-во вхождений элемента в строку
print(c.count('1'))

print(s.index('a'))  # 0 - возвращает индекс первого найденного элемента
print(s.rindex('a'))  # 4 - возвращает индекс последнего найденного элемента

print(s)  # abcdaae
s = s.replace('a', '*')  # Заменить все 'a' на '*'. Причем для этого надо пересоздавать строку.
print(s)  # *bcd**e

s = s.replace('*', 'a', 2)  # Первые две заменили
print(s)  # abcda*e

# Метод .split() - разбиение строки символов на список строчных символов
ip = '123.43.23.240'
IP = ip.split('.')
print(IP)  # ['123', '43', '23', '240']


# Метод ''.join() - склеивание списка строчных симвлов в строку
new_ip = ','.join(IP)
print(new_ip)  # 123,43,23,240
'''

# ГЕНЕРАТОРЫ СПИСКОВ
'''
M = []
for x in range(10, 30+1):
    if x % 2 == 0:
        M.append(x)
print(M)  # [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]

M = [x for x in range(10, 30+1) if x % 2 == 0]
print(M)  # [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
# [выражение | цикл перебор значений | условие (необязательно)]


print([x for x in range(10)])  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print([x ** 2 for x in range(10)])  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
print([x ** 2 for x in range(10) if x % 2 == 0])  # [0, 4, 16, 36, 64]

# Нвйдит сумму цифр строки
s = '123241>'
summa = sum([int(x) for x in s if x.isdigit()])
print(summa)  # 13
'''

# Тип 12 №15136
# Какая строка получится в результате применения приведённой
# ниже программы к строке, состоящей из 99 единиц?
#
# ПОКА нашлось (111)
#   ЕСЛИ нашлось (222)
#       ТО заменить (222, 1)
#   ИНАЧЕ заменить (111, 2)
'''
s = '1' * 99
while '111' in s:
    if '222' in s:
        s = s.replace('222', '1', 1)
    else:
        s = s.replace('111', '2', 1)

print(s) 
'''
# Ответ: 22211


# Тип 12 №13571
# Ниже приведена программа для исполнителя Редактор.
#     ПОКА нашлось (19) ИЛИ нашлось (299) ИЛИ нашлось (3999)
#       заменить (19, 2)
#       заменить (299, 3)
#       заменить (3999, 1)

# На вход этой программе подаётся строка длины 101, состоящая из цифры 2,
# за которой следуют 100 идущих подряд цифр 9.
#
# Какая строка получится в результате применения программы к этой строке?
'''
s = '2' + '9' * 100
while '19' in s or '299' in s or '3999' in s:
    s = s.replace('19', '2', 1)
    s = s.replace('299', '3', 1)
    s = s.replace('3999', '1', 1)
print(s)
'''
# Ответ: 399


# Тип 12 №40728
# Дана программа для редактора:
# ПОКА нашлось (1111)
#   заменить (1111, 22)
#   заменить (222, 1)

# Известно, что исходная строка содержала больше 200 единиц и не содержала других цифр.
# При какой наименьшей длине исходной строки результат работы данной
# программы будет содержать наибольшее возможное число единиц?
'''
R = []
for n in range(200+1, 300):
    s = '1' * n
    while '1111' in s:
        s = s.replace('1111', '22', 1)
        s = s.replace('222', '1', 1)
    R.append([s.count('1'), n])

for x in sorted(R):
    print(*x)
'''
# Ответ: 201


# Тип 12 №33757
# Дана программа для редактора:
#     ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
#         заменить (01, 30)
#         заменить (02, 101)
#         заменить (03, 202)
#
# Известно, что исходная строка начиналась с нуля,
# а далее содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка,
# содержащая 20 единиц, 10 двоек и 70 троек.
# Сколько единиц было в исходной строке?
'''
import time
start = time.time()

for x in range(60):
    for y in range(60):
        for z in range(60):
            s = '0' + '1' * x + '2' * y + '3' * z

            while '01' in s or '02' in s or '03' in s:
                s = s.replace('01', '30', 1)
                s = s.replace('02', '101', 1)
                s = s.replace('03', '202', 1)
            if s.count('1') == 20 and s.count('2') == 10 and s.count('3') == 70:
                print(x)

print(time.time() - start)
'''
# Ответ: 50

# endregion Урок: ******************************************************************

# Данил = [2.1, 6.1, 12.1]
# КЕГЭ  = []
# на следующем уроке:
