# region Домашка: ******************************************************************

# КЕГЭ № 1515 (Уровень: Средний)
# Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1. Строится двоичная запись числа N.
# 2. Запись «переворачивается», то есть читается справа налево.
# Если при этом появляются ведущие нули, они отбрасываются.
# 3. Полученное число переводится в десятичную запись и выводится на экран.
#
# Какое наименьшее число, превышающее 1000, после обработки автоматом даёт результат 29?

'''
from string import *
alphabet = digits + ascii_uppercase


def convert(number, system):
    result = ''
    while number > 0:
        result = alphabet[number % system] + result
        number //= system
    return result


z = []
for x in range(1000, 10000):
    c = str(convert(x, 2))
    c = c[::-1]
    v = int(c, 2)
    if v == 29:
        z.append(x)
print(min(z))
'''

# КЕГЭ № 4317 Пробный 06.2022 /dev/inf advanced (Уровень: Сложный)
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится пятеричная запись числа N.
# 2. К полученной записи дописываются разряды. Если последняя цифра в пятеричной записи четная,
# справа дописывается 2, если нечетная – слева дописывается 2 и справа 3.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# В результате работы автомата на экране появилось число, меньшее 1000.
# Для какого наибольшего значения N данная ситуация возможна?

# alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
'''
from string import *
alphabet = digits + ascii_uppercase


def convert(number, system):
    result = ''
    while number > 0:
        result = alphabet[number % system] + result
        number //= system
    return result


R = []
for n in range(1, 1000):
    s = convert(n, 5)
    if s[-1] in '02468':  # Если последняя цифра в пятеричной записи четная
        s = s + '2'
    else:
        s = '2' + s + '3'
    r = int(s, 5)
    if r < 1000:
        R.append(n)

print(max(R))
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 16 №5586
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 2 при n ≤ 2;
# F(n) = 2 * F(n − 1) + F(n − 2) при n > 2.
#
# Чему равно значение функции F(5)? В ответе запишите только натуральное число.
'''
def F(n):
    if n <= 2:
        return 2
    if n > 2:
        return 2 * F(n - 1) + F(n - 2)


print(F(5))
'''
# Ответ: 34


# Тип 16 №40732
# Обозначим остаток от деления натурального числа a на натуральное число b как a mod b.
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n − 1) + 1, если n > 0 и при этом n mod 3 = 2;
# F(n) = F((n − n mod 3) / 3), если n > 0 и при этом n mod 3 < 2.

# Укажите наименьшее возможное n, для которого F(n) = 6.

# mod - %
# div - //
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 3 == 2:
        return F(n - 1) + 1
    if n > 0 and n % 3 < 2:
        return F((n - n % 3) / 3)


for n in range(1, 10000):
    if F(n) == 6:
        print(n)
        break
'''
# Ответ: 728


# Тип 16 №51985
# Обозначим частное от деления натурального числа a на натуральное число b как a div b,
# а остаток как a mod b. Например, 13 div 3 = 4, 13 mod 3 = 1.
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n div 10) + (n mod 10).

# Укажите количество таких чисел n из интервала 237 567 892 ≤ n ≤ 1 134 567 009,
# для которых F(n) > F(n + 1).

'''
from functools import *

@lru_cache(None)
def F(n):
    if n == 0:
        return 0
    else:
        return F(n // 10) + (n % 10)

cnt = 0
for n in range(237_567_892, 1_134_567_009+1):
    if F(n) > F(n + 1):
        cnt += 1
print(cnt)
'''


# Тип 16 №4656
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
# F(1) = 0
# F(n) = F(n–1) + n, при n >1
# G(1) = 1
# G(n) = G(n–1) * n, при n >1
# Чему равно значение функции F(5) + G(5)?
#
# В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:
        return 0
    if n > 1:
        return F(n - 1) + n


def G(n):
    if n == 1:
        return 1
    if n > 1:
        return G(n-1) * n

print(F(5) + G(5))
'''
# Ответ: 134


# Тип 16 №59809
# Задан алгоритм вычисления функции F(n), где n — натуральное число:
# F(n) = 1, при n = 1;
# F(n) = n − 2 + F(n − 1), если n > 1.
#
# Чему равно значение функции F(2023) − F(2021)?
'''
import sys
sys.setrecursionlimit(2024)  # лучше сразу писать 10000

def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n - 2 + F(n - 1)


print(F(2023) - F(2021))

# F(2023) = 2021 + F(2022)
# F(2022) = 2020 + F(2021) - F(2021)

print(2021 + 2020)

# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded
'''
# Ответ: 4041

'''
from functools import *

@lru_cache(None)
def f(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return 2 * f(n-2) - f(n-1) + 2
    if n > 2 and n % 2 != 0:
        return 2 * f(n-1) + f(n-2) - 2

print(f(170))
'''
# Ответ: 3596910688800


# Тип 23 №61369
# A. Прибавить 1
# B. Умножить на 2
# C. Возвести в квадрат
# Сколько существует программ, которые преобразуют исходное число 3 в число 25
# и при этом траектория вычислений не содержит числа 12?
'''
def F(a, b):
    if a > b or a == 12:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a**2, b)

print(F(3, 25))


# Вариант 2
def F(a, b):
    if a >= b or a == 12:
        return a == b
    return F(a+1, b) + F(a*2, b) + F(a**2, b)

print(F(3, 25))
'''

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Данил = [2.1, 5.1, 6.1, 8.1, 12.1, 14.1, 16.1, 23.1]
# КЕГЭ  = []
# на следующем уроке: На следующем уроке посмотреть 23 номера с сложными условиями.
