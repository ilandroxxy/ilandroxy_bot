# region Домашка: ******************************************************************

# КЕГЭ № 7093 OpenFIPI (Уровень: Базовый)
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
# Сколько существует программ, для которых при исходном числе 4 результатом является число 22
# и при этом траектория вычислений содержит число 10, но не содержит число 20?
'''
def F(a, b):
    if a > b or a == 20:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*3, b)


print(F(4, 10) * F(10, 22))
'''


# КЕГЭ № 1020 100 базовых задач Е. Джобс (Уровень: Базовый)
#
# Алгоритм вычисления функции F(n) задан следующими соотношениями:
#
# F(n) = 3 при n≤3
# F(n) = F(n//2) + 5 при четных n>3
# F(n) = F(n−1) − F(n−2) при нечетных n>3
#
# Здесь «//» обозначает деление нацело.
# Определите значение, полученное при вызове F(20).
'''
def F(n):
    if n <= 3:
        return 3
    if n > 3 and n % 2 == 0:
        return F(n//2) + 5
    if n > 3 and n % 2 != 0:
        return F(n-1) - F(n-2)

print(F(20))
'''


# КЕГЭ № 8953 Джобс 02.06.2023 (Уровень: Базовый) (Е. Джобс)
#
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = 1, если n ≥ 10000
# F(n) = F(n+3) + 7, если n < 10000 и четное
# F(n) = F(n+1) − 3, если n < 10000 и нечетное
#
# Чему равно значение выражения F(50)−F(57)?

'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n >= 10000:
        return 1
    if n < 10000 and n % 2 == 0:
        return F(n+3) + 7
    if n < 10000 and n % 2 != 0:
        return F(n+1) - 3


print(F(50) - F(57))

# F(50) = F(53) + 7
# F(53) = F(54) - 3
# F(54) = F(57) + 7 - F(57)
print(7 - 3 + 7)
'''
# Ответ: 11
# RecursionError: maximum recursion depth exceeded


# КЕГЭ № 8426 (Уровень: Средний)
# Функции F(n) и G(n), где n – натуральное число, заданы следующими
# соотношениями:
#
# F(n) = n, если n>1000000
# F(n) = n + F(2n), если n≤1000000
# G(n) = F(n)/n
#
# Сколько существует таких натуральных чисел n (включая число 1000), для которых G(n)=G(2000)?
'''
def F(n):
    if n > 1000000:
        return n
    if n <= 1000000:
        return n + F(2*n)


def G(n):
    return F(n)/n


cnt = 0
x = G(2000)
for n in range(1, 1000000+1):
    if G(n) == x:
        cnt += 1
print(cnt)
'''

'''
from functools import *

@lru_cache(None)
def f(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return 2 * f(n-2) - f(n-1) + 2
    else:
        return 2 * f(n-1) + f(n-2) - 2


print(f(170))
'''
# Ответ: 3596910688800

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# КЕГЭ № 7011 (Уровень: Средний)
# A. Прибавь 2
#  B. Прибавь 3
#  С. Умножь на 2
# Сколько существует программ, для которых при исходном числе 2 результатом будет являться число 40,
# при этом траектория вычисления не содержит число 28, а также не содержит подпоследовательность команд BACA.
'''
def F(a, b, s: str):
    if a > b or a == 28:
        return 0
    elif a == b:
        return True and 'BACA' not in s
    else:
        return F(a+2, b, s+'A') + F(a+3, b, s+'B') + F(a*2, b, s+'C')


print(F(2, 40, ''))
'''


# КЕГЭ № 4500 (Уровень: Сложный)
#
#  1. Прибавь 1
#  2. Прибавь 2
#  3. Умножь на 2
#  Сколько существует программ, которые преобразуют исходное число 3 в число 79,
#  и при этом траектория вычислений содержит число 11 и не содержит число 23.
# Также программа не должна содержать двух команд «Прибавь 1» подряд.
'''
from functools import *


@lru_cache(None)
def F(a, b, f1, f2):
    if a == 11:
        f2 = 1
    if a >= b or a == 23:
        return a == b and f2 == True
    if f1 == 1:
        return F(a + 2, b, 0, f2) + F(a * 2, b, 0, f2)
    return F(a + 1, b, 1, f2) + F(a + 2, b, 0, f2) + F(a * 2, b, 0, f2)


print(F(3, 79, 0, 0))
'''
# Ответ: 812266767


# № 11240 (Уровень: Средний)
# (М. Ишимов) Исполнитель преобразует число на экране.

# A. Прибавить 2
# B. Возвести в квадрат
# C. Умножить на 3
# Сколько существует программ, для которых при исходном числе 2 результатом является число 64,
# если после выполнения команды B можно выполнить только команду A и C?
'''
def F(a, b, f):
    if a >= b:
        return a == b
    if f == 'B':
        return F(a+2, b, 'A') + F(a*3, b, 'C')
    return F(a+2, b, 'A') + F(a**2, b, 'B') + F(a*3, b, 'C')


print(F(2, 64, ''))
'''

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Данил = [2.1, 5.1, 6.1, 8.1, 12.1, 14.1, 16.1, 23.1]
# КЕГЭ  = []
# на следующем уроке: Изучаем 15 номера
