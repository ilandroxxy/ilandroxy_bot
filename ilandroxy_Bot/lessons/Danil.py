# region Домашка: ******************************************************************************


# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# № 8511 Апробация 17.05 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 12??15*6, делящиеся на 253 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 253.
# Количество строк в таблице для ответа избыточно.
'''
import itertools
M = []
for l in range(0, 1+1):  # перебираем длины маски "*"
    for s in itertools.product('0123456789', repeat=l):
        slovo = ''.join(s)
        M.append(slovo)

R = []
for x in '0123456789':
    for y in '0123456789':
        for z in M:
            A = int(f'12{x}{y}15{z}6')
            if A < 10**8:   # не превышающих 10**8
                if A % 253 == 0:  # делящиеся на 253 без остатка
                    R.append([A, A // 253])

for x in sorted(R):
    print(*x)
'''
# 1278156 5052
# 12531596 49532
# 12741586 50362
# 12951576 51192


# № 8510 Апробация 17.05 (Уровень: Средний)
# Текстовый файл состоит из символов, обозначающих прописные буквы латинского алфавита.
# Определите максимальное количество идущих подряд символов,
# среди которых никакие две буквы из набора букв N, O и P (с учетом повторений) не записаны подряд.
# Для выполнения этого задания следует написать программу.

# print('NN NO ON NP PN OO OP PO PP'.split())
'''
s = open('24.txt').readline()
for x in 'NN NO ON NP PN OO OP PO PP'.split():
    s = s.replace(x, '* *')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 58


# № 8508 Апробация 17.05 (Уровень: Базовый)
# Исполнитель преобразует число на экране. У исполнителя есть три команды, которые обозначены латинскими буквами:
#  Прибавить 1
#  Прибавить 2
#  Умножить на 2

# Сколько существует программ, для которых при исходном числе 2 результатом является число 17,
# при этом траектория вычислений содержит число 9 и не содержит 12?
'''
def F(a, b):
    if a > b or a == 12:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*2, b)

print(F(2, 9) * F(9, 17))
'''

# Вариант 2
'''
def F(a, b):
    if a >= b or a == 12:
        return a == b  # True + False + True <==> 1 + 0 + 1 = 2
    return F(a+1, b) + F(a+2, b) + F(a*2, b)

print(F(2, 9) * F(9, 17))
'''
# Ответ: 350



# № 8504 Апробация 17.05 (Уровень: Базовый)
# В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых хотя бы один из элементов является трёхзначным числом,
# а сумма элементов пары кратна минимальному трёхзначному элементу последовательности, оканчивающемуся на 5.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
# минимальному трёхзначному элементу последовательности, оканчивающемуся на 5
A = min([i for i in M if len(str(i)) == 3 and str(i)[-1] == '5'])
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if len(str(M[i])) == 3 or len(str(M[i+1])) == 3:
        if (M[i] + M[i+1]) % A == 0:
            count += 1
            maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 13 9500


# endregion Урок: ******************************************************************************


# todo:    Данил   = [1, 2, 3, 4, 5, 6, 7.1, 8, 9.1, 10, 11, 12, 14, 15, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# todo: Данил КЕГЭ = [14, 15]
# на прошлом уроке: Прорешивали вариант с Апробацйии 17.05, номера: 25, 24, 23, 18, 17.
# на следующем уроке: Дома дорешать вариант: Апробация 17.05 , все номера кроме 25, 24, 23, 18, 17
