# region Домашка: ******************************************************************

# КЕГЭ № 6904 (Уровень: Базовый) (Д. Статный)
#
# Логическая функция F задаётся выражением ¬(((x → y ∧ w) ∧ (z → x ∨ y)) ≡ w).
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (not (((x <= (y and w)) and (z <= (x or y))) == w))
                if F == True:
                    print(x, y, z, w, int(F))
'''

# КЕГЭ № 9149 Джобс 06.06.2023 (Уровень: Базовый)
# Миша заполнял таблицу истинности функции  F = ((x → y) ∨ (z ≡ x)) ∧ (w → z)
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x <= y) or (z == x)) and (w <= z)
                print(x, y, z, w, int(F))
'''
# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Шпаргалка 6 номер:
'''
import turtle as t
t.tracer(0)
t.left(90)
m = 40

# код по алгоритму (из условия)
"""
for i in range(2):
    t.forward(8 * m)
    t.right(90)
"""

t.up()
for x in range(-50, 50):
    for y in range(-50, 50):
        t.goto(x * m, y * m)
        t.dot(2, 'red')

t.update()
t.done()
'''

# Теория списков
# - Могут содержать неограниченное кол-во элементов различных типов данных
# - Каждый элемент списка имеет порядковый номер - индекс
# - Счет индексов слева-направо начинается с 0, а справа-налево начинается с -1
# - Элементы списков можно изменять через индексы (в отличие от кортежей tuple)
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1


print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]}')
# Первый элемент списка: a
# Последний элемент списка: e


A = sorted([45, 234, 23, 12, 3245])  # Отсортировали элементы по возрастанию
print(f'Минимальный элемент списка: {A[0]} \n'
      f'Максимальный элемент списка: {A[-1]}')

print(M[-1])  # е
M[-1] = 'конец'
print(M)  # ['a', 'b', 'c', 'd', 'конец']
'''

# Списки и цикл for:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# Пробегаем элементы списка напрямую
for x in M:
    print(x, end=' ')  # a b c d e
print()

for x in M:
    if x in 'bcd':
        print(x, end=' ')  # b c d
print()

# Пробегаем элементы списка через индексы
for i in range(len(M)):
    # print(i, end=' ')  # 0 1 2 3 4
    print(M[i], end=' ')  # a b c d e
print()

# Пробегаем последовательные пары элементов (пригодится в 17 номере)
for i in range(len(M)-1):
    x, y = M[i], M[i + 1]
    print(f'{x}{y}', end=' ')  # ab bc cd de
print()


for i in range(1, len(M)):
    x, y = M[i-1], M[i]
    print(f'{x}{y}', end=' ')  # ab bc cd de
print()

# Изменяем все элементы списка через индексы
print(M)  # ['a', 'b', 'c', 'd', 'e']
for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''

# Срезы списков:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[3])  # d
print(M[1:3])  # ['b', 'c']
print(M[:3])  # ['a', 'b', 'c'] - все что слева, не включая 3
print(M[2:])  # ['c', 'd', 'e'] - все, что справа, включая 2
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[::])  # ['a', 'b', 'c', 'd', 'e']
# M [ START : STOP : STEP ]
print(M[::2])  # ['a', 'c', 'e'] - все числа начиная с 0 через одно (или все четные индексы)
print(M[1::2])  # ['b', 'd'] - все числа начиная с 1 через одно (или все не четные индексы)
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - в обратном порядке
print(M[-2:])   # ['d', 'e'] - последние два

A = [1234, 114, 15134, 12314]
# Число заканчивается ли на 14?
for x in A:
    if str(x)[-2:] == '14':
        print(x, end=' ')  # 114 12314 
print()
'''

# Функции списков:
'''
M = [3, 4, 2, 3, 2, 2, 6]
print(len(M))  # 7 - длина спсика (кол-во элементов в нем)
print(sum(M))  # 22 - сумма чисел в списке (строк быть не должно)
print(max(M))  # 6
print(min(M))  # 2

print(set(M))  # {2, 3, 4, 6} - сетер (множество) удаляет все копии
print(len(set(M)))  # 4 - кол-во различных элементов

print(sorted(M))  # [2, 2, 2, 3, 3, 4, 6] - по возрастанию
print(sorted(M, reverse=True))  # [6, 4, 3, 3, 2, 2, 2] - по убыванию
'''

# Методы списков:
# Метод - это функция работающая только лишь с одним типом данных
'''
# Метод .append() используется для добавления элемента в конец списка. Пример:
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # Вывод: [1, 2, 3, 4]

# Можно реализовать через конкатенацию (склеивание) списков:
my_list = [1, 2, 3]
my_list += [4]
print(my_list)  # Вывод: [1, 2, 3, 4]
my_list += [5, 6]
print(my_list)  # [1, 2, 3, 4, 5, 6]


# Метод .reverse() изменяет порядок элементов в списке на обратный. Пример:
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]

# Можно записать по другому через срез:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
# Срез работает со всеми последовательностями (list, set, tuple, str)


# Метод .count() возвращает количество вхождений заданного элемента в список. Пример:
my_list = [1, 2, 2, 3, 4, 2]
count_of_twos = my_list.count(2)
print(count_of_twos)  # Вывод: 3


# Метод .remove() удаляет первое вхождение указанного элемента из списка. Пример:
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

# Можно удалить элемент через его индекс используя del:
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]


# Метод .index() возвращает индекс первого вхождения заданного элемента в списке. Пример:
my_list = [1, 2, 3, 2, 4]
index_of_two = my_list.index(2)
print(index_of_two)  # Вывод: 1


# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию)
# или в обратном порядке, если передан аргумент reverse=True. Пример:
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет
# использовать функцию sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''
# endregion Урок: ******************************************************************

# Данил = [2.1, 6.1, ]
# КЕГЭ  = []
# на следующем уроке: На следующем уроке поговорить про генераторы списков и строки
