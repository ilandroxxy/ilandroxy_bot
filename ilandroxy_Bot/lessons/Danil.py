# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 25 №27853
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [312614; 312651],
# числа, имеющие ровно шесть различных натуральных делителей.
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, x+1):
        if x % j == 0:
            div.append(j)
    return div

for x in range(312614, 312651+1):
    d = divisors(x)
    if len(d) == 6:
        print(*d)
'''

'''
import time
start = time.time()

# def divisors0(x):
#     div = []
#     for j in range(1, x+1):
#         if x % j == 0:
#             div.append(j)
#     return div

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
            # div.append(j)
            # div.append(x // j)
    return sorted(set(div))


# print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]  24 // 3 == 8, 24 // 4 == 6
# print(divisors(16))  # [1, 2, 4, 8, 16]
print(divisors(100_000_000))

print(time.time() - start)
'''
# divisors0: 2.9, divisors: 0.0003


# Тип 25 №27850
# Напишите программу, которая ищет среди целых чисел, принадлежащих
# числовому отрезку [245690; 245756] простые числа.
# Выведите на экран все найденные простые числа в порядке возрастания,
# слева от каждого числа выведите его порядковый номер в последовательности.
# Каждая пара чисел должна быть выведена в отдельной строке.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

num = 1
for x in range(245690, 245756+1):
    if len(divisors(x)) == 2:
        print(num, x)
    num += 1
'''
# Ответ:
# 22 245711
# 30 245719
# 34 245723
# 52 245741
# 58 245747
# 64 245753


# Тип 25 №41000
# Пусть M(N) — сумма двух наибольших различных натуральных делителей натурального числа N,
# не считая самого числа и единицы.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 11000000, для
# которых 0 < M(N) < 10000. В ответе запишите найденные значения M(N) в
# порядке возрастания соответствующих им чисел N.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # не считая самого числа и единицы.
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

k = 0
for x in range(11000000+1, 10**20):
    d = divisors(x)
    if len(d) >= 2:
        M = d[-1] + d[-2]
        if 0 < M < 10000:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 8672
# 8388
# 8532
# 7042
# 7364


# Тип 25 №27854
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [110203; 110245],
# числа, имеющие ровно четыре различных чётных натуральных делителя
# (при этом количество нечётных делителей может быть любым).
# Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):  # не считая самого числа и единицы.
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(110203, 110245+1):
    d = [i for i in divisors(x) if i % 2 == 0]
    if len(d) == 4:
        print(*d)
'''
# 2 4 55102 110204
# 2 14 15746 110222
# 2 6 36742 110226
# 2 22 10022 110242


# Тип 25 №55642
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.
#
# Найдите все натуральные числа, не превышающие 10**10, которые соответствуют
# маске 1?6961*5 и при этом без остатка делятся на 3013.
#
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(3013, 10**10, 3013):
    if fnmatch(str(x), '1?6961*5'):
        print(x)
'''
# 1069615
# 1769610225
# 1869611695
# 1969613165


# Тип 25 №59818
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите все натуральные числа, не превосходящие 10**9, для которых выполнены все условия:
# — соответствуют маске *31*65?;
# — делятся на 31 и 2031 без остатка;
# — количество делителей числа является результатом любой степени двойки.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# справа от каждого числа их частное от деления на 2031.
'''
from fnmatch import *

M = [2**i for i in range(0, 100)]


def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):  # не считая самого числа и единицы.
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(2031, 10**9, 2031):
    if x % 31 == 0:
        if fnmatch(str(x), '*31*65?'):
            d = divisors(x)
            if len(d) in M:
                print(x, x // 2031)
'''
# 53831655 26505
# 333126651 164021
# 512313657 252247
# 647931651 319021
# 831966654 409634

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Данил = [2, 5, 6, 8, 9, 12, 14, 15, 16, 17, 23, 24, 25]
# КЕГЭ  = []
# на следующем уроке:
