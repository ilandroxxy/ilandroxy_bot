
# region Домашка: ******************************************************************************


# Тип 5 № 26978
'''
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1) Строится двоичная запись числа N.
# 2) К этой записи дописываются разряды по следующему правилу:
# а) если число четное, то к двоичной записи числа в конце дописываются 1 и 0;
# б) если число нечетное, то к двоичной записи числа в конце дописывается 01.
# Полученная таким образом запись является двоичной записью искомого числа R. Укажите наибольшее число R меньшее 109,
# которое может получиться после обработки этого алгоритма.
# В ответе это число запишите в десятичной системе.

for n in range(10000):
    s = str(bin(n)[2:])
    if n % 2 == 0:
        s += '10'
    else:
        s += '01'
    if int(s, 2) < 109:
        print(int(s, 2))
# 106
'''



# Тип 5 № 10407
'''
# Автомат получает на вход четырёхзначное число. По этому числу строится новое число по следующим правилам. 
# 1. Складываются отдельно первая и вторая цифры, вторая и третья цифры, а также третья и четвёртая цифры. 
# 2. Из полученных трёх чисел выбираются два наибольших и записываются друг за другом в порядке неубывания без разделителей. 
# Пример. Исходное число: 9575. Суммы: 9+5 = 14; 5+7 = 12; 7+5=12. Наибольшие суммы: 14, 12. Результат: 1214. 
# Укажите наибольшее число, при обработке которого автомат выдаёт результат 1515.

for n in range(1000, 10000):
    M = [int(i) for i in str(n)]
    x = M[0] + M[1]
    y = M[1] + M[2]
    z = M[2] + M[3]
    c1 = max(x, y, z)
    c2 = x + y + z - c1 - min(x, y, z)

    if str(c2) + str(c1) == '1515':
        print(n)
        exit
# 9696
'''

# Тип 5 № 9190
'''
# Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам.
# 1.  Складываются первая и вторая, а также вторая и третья цифры исходного числа.
# 2.  Полученные два числа записываются друг за другом в порядке возрастания (без разделителей).
# Пример. Исходное число: 843. Суммы: 8 + 4 = 12; 4 + 3 = 7. Результат: 712.
# Сколько существует чисел, в результате обработки которых автомат выдаст число 1216?

c = 0

for n in range(100, 1000):
    m = [int(i) for i in str(n)]
    x = m[0] + m[1]
    y = m[1] + m[2]

    if str(min(x, y)) + str(max(x, y)) == '1216':
        c += 1
        print(c)
# 6
'''

# Тип 5 № 15622
'''
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом. 
# 1. Строится двоичная запись числа N. 
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу: складываются все цифры двоичной записи, если 
# а) сумма нечетная к числу дописывается 11, 
# б) сумма четная, дописывается 00. 
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R. 
# Укажите такое наименьшее число R, которое превышает 114 и может являться результатом работы алгоритма. В ответе это число запишите в десятичной системе счисления.

for n in range(1000):
    s = bin(n)[2:]

    if s.count('1') % 2 == 0:
        s += '00'
    else:
        s += '11'

    if int(s ,2) > 114:
        print(int(s ,2))
        break
# 115
'''

# Тип 5 № 27535
'''
# Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1.  Строится двоичная запись числа N.
# 2.  В конец двоичной записи добавляются две первые цифры этой записи в обратном порядке.
# 3.  Результат переводится в десятичную систему и выводится на экран.
# Пример.Дано число N = 11. Алгоритм работает следующим образом:
# 1.  Двоичная запись числа N: 1011.
# 2.  В конец записи добавляются цифры 01 — первые две цифры в обратном порядке (сначала вторая, затем первая), получается 101101.
# 3.  На экран выводится число 45.
# При каком наименьшем исходном N результат на экране автомата будет больше 90?

for n in range(2, 1000):
    s = bin(n)[2:]
    s += s[1] + s[0]

    if int(s, 2) > 90:
        print(n)
        break
# 23
'''

# endregion Домашка: ******************************************************************************






# region Урок: ******************************************************************************

# Тип данных переменных str - string (строки: буквы, символы, цифры, предложения, txt файлы и тд)
'''
import string
print(string.punctuation)
print(string.digits)
print(string.ascii_uppercase)

s1 = 'Hello '
s2 = ' Dima'
print(s1 + s2)  # конкатенация (склеивание)

print('1' * 8)  # строчки дублируются n раз

print(s1 == s2)

s = '1243142'
print('1' in s)
print('1' not in s)  # присутствует ли 
'''

# Строки полностью идентичный спискам, за исключением: нельзя изменять элемент строки
s = '1234567'
# s[3] = '*' так делать нельзя

# Срезы строк - идентичный спискам
'''
s = '1234567'
s = s[:3] + '*' + s[4:]  # можно изменить элемент строки через срезы
print(s)

print(s[2:5])
print(s[2:])  # включая 2
print(s[:5])  # не включая 5

print(s[::2])  # все элементы перебрали через одного 
print(s[::-1])  # способ развернуть строку (аналог метода .reverse() для списков)
'''

# Методы строк
'''
s = '123124313'
print(s.count('1'))
print(s.index('1'), s.rindex('1'))  # способы получить индексы первого и последнего элементов

s = s.replace('1', '*')  # заменить один элемент строки на другой (или на подстрку)
print(s)
s = s.replace('*', '1', 2)  # заменили первые две * на 1
print(s)
'''

# Задача: корректный ли ip адрес?
'''
ip = '123.77.43.76.32'

if '.' in ip:
    M = [int(i) for i in ip.split('.')]
    if len(M) == 4:
        for x in M:
            if not(0 < x < 256):
                print(False)
                exit()
    else:
        print(False)
    print(True)
else:
    print(False)
'''

# M = [int(i) for i in input().split()]
# print(M)


# A = ['123', '123', '34', 'ergopk']
# s = ''.join(A)  # способ склеить список строк в одну строку
# print(s)

# b = '13212'
# print(b.isdigit())
# c = '-1.2324f'
# print(c.isdigit())


# Тип 8 № 5055
# Все 5-буквенные слова, составленные из букв В, Е, К, Н, О, записаны в алфавитном порядке и пронумерованы.
#
# Вот начало списка:
# 1. ВВВВВ
# 2. ВВВВЕ
# 3. ВВВВК
# 4. ВВВВН
# 5. ВВВВО
# 6. ВВВЕВ
# Под каким номером стоит первое из слов, которое начинается с буквы О?
'''
s = 'ВЕКНО'
k = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if a == 'О':  # temp[0] == 'О'
                        print(k, temp)
                        exit()
                    k += 1
'''
# Ответ: 2501



# Тип 8 № 9691
'''
# Все 4-буквенные слова, составленные из букв В, Л, Т, У, записаны в алфавитном порядке и пронумерованы.
#
# Вот начало списка:
# 1. ВВВВ
# 2. ВВВЛ
# 3. ВВВТ
# 4. ВВВУ
#
# Запишите слово, которое стоит под номером 75

s = 'ВЛТУ'
M = ['0']
k = 1
for a in s:
    for b in s:
        for c in s:
             for d in s:
                temp = a + b + c + d
                if k == 75:
                    print(temp)
                M.append(temp)
                k += 1

print(M[75])
'''
# Ответ: ЛВТТ


# Тип 8 № 27268
'''
# Руслан составляет 6-буквенные коды из букв Р, У, С, Л, А, Н.
# Каждую букву нужно использовать ровно один раз, при этом нельзя ставить рядом две гласные.
# Сколько различных кодов может составить Руслан?

s = 'РУСЛАН'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        temp = a + b + c + d + e + f
                        if "АА" not in temp and "УУ" not in temp and "АУ" not in temp and "УА" not in temp:
                            M = [i for i in temp]  # [a, b, c, d, e, f]
                            if len(set(M)) == len(temp):
                                count += 1
print(count)
'''
# Ответ: 480


# Тип 8 № 26953
'''
# Найдите количество пятизначных восьмеричных чисел, в которых все цифры различны и никакие две четные или нечетные не стоят рядом.

s = '01234567'
s1 = '1357'
s2 = '0246'
count = 0
for a in s1:
    for b in s2:
        for c in s1:
            for d in s2:
                for e in s1:
                    temp = a + b + c + d + e
                    M = [a, b, c, d,e]
                    if len(set(M)) == len(temp):
                        count += 1

for a in '246':
    for b in s1:
        for c in s2:
            for d in s1:
                for e in s2:
                    temp = a + b + c + d + e
                    M = [a, b, c, d, e]
                    if len(set(M)) == len(temp):
                        count += 1
                        print(temp)
print(count)
'''
# Ответ: 504


# Тип 8 № 26982
'''
# Сколько существует шестизначных чисел, делящихся на 5, в которых каждая цифра может встречаться только один раз, при этом никакие две чётные и две нечётные цифры не стоят рядом.

s = '0123456789'
s1 = '13579'
s2 = '02468'
count = 0
for a in s1:
    for b in s2:
        for c in s1:
            for d in s2:
                for e in s1:
                    for f in '0':
                        temp = a + b + c + d + e + f
                        M = [a, b, c, d, e, f]
                        if len(set(M)) == len(temp):
                            count += 1

for a in '2468':
    for b in s1:
        for c in s2:
            for d in s1:
                for e in s2:
                    for f in '5':
                        temp = a + b + c + d + e + f
                        M = [a, b, c, d, e, f]
                        if len(set(M)) == len(temp):
                            count += 1
print(count)
'''
# Ответ: 1296


# Тип 8 № 35466
'''
# Вероника составляет 3-буквенные коды из букв В, Е, Р, О, Н, И, К, А, причём буква В должна входить в код ровно один раз.
# Все полученные коды Вероника записала в алфавитном порядке и пронумеровала. Начало списка выглядит так:
#
# 1. ААВ
# 2. АВА
# 3. АВЕ

# На каком месте будет записан первый код, не содержащий ни одной буквы А?


s = sorted(['В', 'Е', 'Р', 'О', 'Н', 'И', 'К', 'А'])
k = 1
for a in s:
    for b in s:
        for c in s:
            temp = a + b + c
            if temp.count('В') == 1:
                if 'А' not in temp:
                    print(k, temp)
                    exit()
                k += 1
'''
# Ответ: 23


# endregion Урок: ******************************************************************************


#todo: Дмитрий = [2, 5, 14+], на следующем уроке: Разбираем 12 номер