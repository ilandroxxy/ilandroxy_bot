
# region Домашка: ******************************************************************************

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Для хранения 64 изображений выделено 4 Мбайт памяти. Размер каждого изображения 800х600 пикселей.
# При кодировании используется алгоритм сжатия изображений, позволяющий уменьшить размер памяти для
# хранения одного изображения в среднем в 6 раз по сравнению с независимым кодированием каждого пикселя.
# Каждое изображение дополняется служебной информацией, которая занимает 15 Кбайт.
# Какое максимальное количество цветов можно использовать в палитре каждого изображения?
'''
I = ((4 * 2 ** 10) / 64) - 15  # вес 1 картинки
I = ((I * 6) * 2 ** 13) / (800 * 600)
print(I)
print(2 ** 5)
'''

# Ответ: 32

# Производилась двухканальная (стерео) звукозапись с частотой дискретизации 32 кГц и 16-битным разрешением.
# В результате был получен файл размером 36 Мбайт, сжатие данных не производилось.
# Определите приблизительно, сколько времени (в минутах) проводилась запись?
'''
# 36 * 2 ** 23 = 2 * 32000 * 16 * t
t = (36 * 2 ** 23) / (2 * 32000 * 16)
t = t / 60
print(t)
'''
# Ответ: 5


# Сотрудникам компании выдают электронную карту, на которой записаны их личный код,
# номер подразделения (целое число от 1 до 1200) и дополнительная информация.
#
# Личный код содержит 17 символов и может включать латинские буквы (заглавные и строчные буквы различаются),
# десятичные цифры и специальные знаки из набора @#!%^&*().
#
# Для хранения кода используется посимвольное кодирование,
# все символы кодируются одинаковым минимально возможным количеством бит,
# для записи кода отводится минимально возможное целое число байт.
#
# Номер подразделения кодируется отдельно и занимает минимально возможное целое число байт.
#
# Известно, что на карте хранится всего 48 байт данных.
#
# Сколько байт занимает дополнительная информация?
import string
# print(len(string.ascii_letters))  # 52
'''
symbols1 = 4
alphabet1 = 10
# alphabet = 2 ** i
i1 = 4

symbols2 = 17
alphabet2 = 52 + 10 + 9
# alphabet = 2 ** i
i2 = 7

bit2 = symbols2 * i2
bit1 = symbols1 * i1

print(bit1)
print(bit2)
byte1 = bit1 / 8
byte2 = int(bit2 / 8) + 1
print(byte1, byte2)

print(48 - 15 - 2)
'''
# Ответ: 31


# Сотрудникам компании выдают электронную карту, на которой записаны их личный код,
# и дополнительная информация. Личный код состоит из двух частей.
# Первая часть кода состоит из десяти символов, каждый из которых может
# быть одной из 26 заглавных латинских букв или одной из девяти цифр от 1 до 9.
# Вторая часть кода состоит из восьми символов, каждый из которых может быть одной из десяти цифр от 0 до 9.
# Для записи кода используют посимвольное кодирование,
# все символы в пределах одной части кода кодируют одинаковым минимально возможным для данной
# части количеством бит, а для кода в целом выделяется минимально возможное целое количество байт.
# Известно, что на карте хранится всего 32 байта данных. Сколько байт занимает дополнительная информация?
'''
symbols1 = 10
alphabet1 = 26 + 9
i1 = 6
bit1 = symbols1 * i1

symbols2 = 8
alphabet2 = 10
i2 = 4
bit2 = symbols2 * i2

byte1 = int(bit1 / 8) + 1
byte2 = bit2 / 8
print(byte1, byte2)

print(32 - 8 - 4)
'''
# Ответ: 20



# Найдите разность между средним арифметическим и минимальным значениями температуры в мае.
'''
# Вариант 2
M = []
for s in open('9.txt'):
    M += [float(i) for i in s.replace(',', '.').split()]

print((sum(M) / len(M)) - min(M))

# Вариант 2
M = [float(i) for i in open('9.txt').read().replace(',', '.').split()]
print((sum(M) / len(M)) - min(M))
'''
# Ответ: 10


# Найдите все натуральные числа, принадлежащие отрезку,
# у которых ровно пять различных чётных делителей. (количество нечётных делителей может быть любым).
# В ответе перечислите найденные числа в порядке возрастания.
'''
def Divisor(n):
    divisors = set()
    for j in range(1, int(n ** 0.5)+1):
        if n % j == 0:
            if j % 2 == 0:
                divisors.add(j)
            if (n // j) % 2 == 0:
                divisors.add(n // j)
    return sorted(divisors)

for n in range(1000000, 2000000+1):
    divisors = Divisor(n)
    if len(divisors) == 5:
        print(n)
'''
# 1414562
# 1847042

# Рассматриваются целые числа, принадлежащих числовому отрезку [318216; 369453],
# которые представляют собой произведение трёх различных простых делителей, оканчивающихся на одну и ту же цифру.
# В ответе запишите количество таких чисел и минимальное из них через пробел.
'''
import itertools
def Simpler(x):
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

def Divisor(n):
    divisors = set()
    for j in range(2, int(n ** 0.5)+1):
        if n % j == 0:
            if Simpler(j):
                divisors.add(j)
            if Simpler(n // j):
                divisors.add(n // j)
    return sorted(divisors)

count = 0
mini = 9999999999
for n in range(318216, 369453+1):
    divisors = Divisor(n)
    if any((A[0] * A[1] * A[2] == n) and (A[0] % 10 == A[1] % 10 == A[2] % 10) for A in itertools.permutations(divisors, 3)):
        print(n, divisors)
        count += 1
        mini = min(mini, n)
print(count, mini)
'''
# Ответ: 274 318449

# answer = []
# for i in range(318216, 369453 + 1):
#     prime_divisors = []
#     possible_divisor = 2
#     cur = i
#     while possible_divisor ** 2 <= cur:
#         if cur % possible_divisor == 0:
#           prime_divisors.append(possible_divisor)
#           cur //= possible_divisor
#         else:
#           possible_divisor += 1
#     if cur != 1:
#         prime_divisors.append(cur)
#     if len(prime_divisors) == 3 and len(set(prime_divisors)) == 3:
#         last_digit = prime_divisors[0] % 10
#         if all(p % 10 == last_digit for p in prime_divisors):
#           answer.append(i)
# print(len(answer), min(answer))

# endregion Урок: ******************************************************************************


# todo: Дмитрий = [1, 2, 3, 4, 5, 6, 7, 8, 9.1, 11, 12, 13, 14+, 15+, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# на прошлом уроке: Было два урока, за прошлую  неделю. Прорешивали 7, 11 номера
# на следующем уроке:
