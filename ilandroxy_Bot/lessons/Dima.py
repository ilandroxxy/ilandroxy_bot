
# region Домашка: ******************************************************************************

# Тип 25 № 47229
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а во втором столбце  
# — соответствующие им результаты деления этих чисел на 2023.

print(10**10)
print('1?2139****4')

my_dict = {}
m = [i for i in range(1000)]
m.append('')
for x in '0123456789':
    for y in m:
        a = int(f'1{x}2139{y}4')
        if a % 2023 == 0:
            my_dict[a] = a // 2023
for x in sorted(my_dict):
    print(x, my_dict[x])
'''

# Тип 25 № 47022
'''
# Пусть M(N)  — пятый по величине делитель натурального числа N без учёта самого числа и единицы. Например, M(1000)  =  100.
# Если у числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M(N)  =  0.
# Найдите 5 наименьших натуральных чисел, превышающих 300 000 000, для которых M(N) > 0. 
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
            if len(dl) > 10:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(300000000+1, 500000000):
    dl = D(x)
    if len(dl) >= 5:
        print(dl[-5])
        k += 1
        if k == 5:
            break
'''

# Тип 25 № 41000 Добавить в вариант
'''
# Пусть M(N)  — сумма двух наибольших различных натуральных делителей натурального числа N, не считая самого числа и единицы. 
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
# Найдите 5 наименьших натуральных чисел, превышающих 11 000 000, для которых 0 < M(N) < 10 000. 
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
            if len(dl) > 4:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(11000000+1, 31000000):
    dl = D(x)
    if len(dl) >= 2:
        m = dl[-1] + dl[-2]
        if 0 < m < 10000:
            print(m)
            k += 1
            if k == 5:
                break
'''

# Тип 25 № 37160 Добавить в вариант
'''
# Найдите 5 чисел больших 500000, таких, что среди их делителей есть число, оканчивающееся на 8, при этом этот 
# делитель не равен 8 и самому числу. В качестве ответа приведите 5 наименьших чисел, соответствующих условию.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            if (j % 10 == 8) and (j != 8):
                dl.add(j)
            if ((x // j) % 10 == 8) and (x // j != 8):
                dl.add(x // j)
            if len(dl) > 2:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(500000+1, 1000000):
    dl = D(x)
    if len(dl) >= 1:
        print(x, dl[0])
        k += 1
        if k == 5:
            break
'''

# endregion Домашка: ******************************************************************************




# region Урок: ******************************************************************************

M = [1, 2, 3, 4, 5]
# 1. Назовём парой два идущих подряд элемента последовательности.
# 12 23 34 45
for i in range(0, len(M)-1):
    print(f'{M[i]}{M[i+1]}', end=' ')
print('\n')

# 2. Назовём тройкой три идущих подряд элемента последовательности.
# 123 234 345
for i in range(0, len(M)-2):
    print(f'{M[i]}{M[i+1]}{M[i+2]}', end=' ')
print('\n')

# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        print(f'{M[i]}{M[j]}', end=' ')
    print()


# Работа с файлами txt
# f = open('17.txt')
# for s in f:
#     print(s)
# f.close()

# Две аналогичный записи
'''
s = open('17.txt').readlines()
print(s)

M = [i for i in open('17.txt')]
print(M)
'''

'''
M = [int(i) for i in open('17.txt')]
print(M)


# Эталонная работа с файлами: 
with open('17.txt', 'r') as f:
    M = [int(i) for i in f]
# файл закрывается автоматически, если мы выходим из конструкции
'''

# Тип 17 № 46975
'''
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых один из двух элементов делится на 3,
# а другой меньше среднего арифметического всех чётных элементов последовательности.
# В ответе запишите два числа: сначала количество найденных пар, а затем — максимальную сумму элементов таких пар.

# Вариант 1
M = [int(i) for i in open('17.txt')]

kol = 0
summ = 0
for x in M:
    if x % 2 == 0:
        summ += x
        kol += 1
sred = summ / kol

count = 0
maxi = 0
for i in range(0, len(M)-1):
    if (M[i] % 3 == 0 and M[i+1] < sred) or (M[i+1] % 3 == 0 and M[i] < sred):
        count += 1
        maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
# Ответ: 1711 14666

# Вариант 2
A = [int(i) for i in open('17.txt') if int(i) % 2 == 0]
sred = sum(A) / len(A)

M = [int(i) for i in open('17.txt')]

count = 0
maxi = 0
for i in range(0, len(M)-1):
    if (M[i] % 3 == 0 and M[i+1] < sred) or (M[i+1] % 3 == 0 and M[i] < sred):
        count += 1
        maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 1711 14666


# Тип 17 № 47221
'''
# В файле содержится последовательность целых чисел. Элементы последовательности могут принимать целые значения от −10000 до 10000 включительно.
# Определите количество пар последовательности, в которых только одно число оканчивается на 3,
# а сумма квадратов элементов пары не меньше квадрата максимального элемента последовательности, оканчивающегося на 3.
# В ответе запишите два числа: сначала количество найденных пар, затем максимальную из сумм квадратов элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.

A = [int(i) for i in open('17.txt') if int(i) % 10 == 3]
square_max = max(A) ** 2  # квадрат максимального элемента последовательности, оканчивающегося на 3

M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if (str(M[i])[-1] == '3' and str(M[i+1])[-1] != '3') or (str(M[i])[-1] != '3' and str(M[i+1])[-1] == '3'):
        if M[i]**2 + M[i+1] ** 2 >= square_max:
            count += 1
            maxi = max(maxi, M[i]**2 + M[i+1] ** 2)
print(count, maxi)
'''
# Ответ: 180 190360573


# Тип 17 № 39764
'''
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём тройкой три идущих подряд элемента последовательности.
# Определите количество троек чисел таких, которые могут являться сторонами прямоугольного треугольника.
# В ответе запишите два числа: сначала количество найденных троек, а затем — максимальную сумму элементов таких троек.
# Если таких троек не найдётся — следует вывести 00

M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-2):
    A = sorted([M[i], M[i+1], M[i+2]])
    if A[2] ** 2 == A[0] ** 2 + A[1] ** 2:
        count += 1
        maxi = max(maxi, sum(A))
print(count, maxi)
'''
# Ответ: 00


# Тип 17 № 39763
'''
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём тройкой три идущих подряд элемента последовательности.
# Определите количество троек чисел таких, которые могут являться сторонами остроугольного треугольника.
# В ответе запишите два числа: сначала количество найденных троек, а затем — максимальную сумму элементов таких троек.
# Если таких троек не найдётся — следует вывести 00.

M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-2):
    A = sorted([M[i], M[i+1], M[i+2]])
    if A[2] ** 2 < A[0] ** 2 + A[1] ** 2:
        count += 1
        maxi = max(maxi, sum(A))
print(count, maxi)
'''
# Ответ: 1175 29451



# Тип 17 № 37345 i
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности,
# для которых произведение элементов делится без остатка на 62, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен.

'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] * M[j]) % 62 == 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
'''
# Ответ: 2284645 19920


# Тип 17 № 37337
'''
# В файле содержится последовательность из 10000 натуральных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности,
# у которых различные остатки от деления на d=160 и хотя бы одно из чисел делится на p=7,
# затем максимальную из сумм элементов таких пар. В данной задаче под парой подразумевается два различных элемента последовательности.
# Порядок элементов в паре не важен.
d = 160
p = 7
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if M[i] % d != M[j] % d:
            if M[i] % 7 == 0 or M[j] % 7 == 0:
                count += 1
                maxi = max(maxi, M[i] + M[j])
print(count, maxi)
'''
# Ответ: 12749665 19989


# Тип 9 № 45243
# Откройте файл электронной таблицы, содержащей в каждой строке пять натуральных чисел.
# Определите количество строк таблицы, в которых квадрат суммы максимального и минимального чисел в строке больше суммы квадратов трёх оставшихся.

for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    print(M)



# endregion Урок: ******************************************************************************


# todo: Дмитрий = [2, 5, 8, 12, 14+, 15+, 16, 23, 25.2]
# на прошлом уроке: Порешали задачи на теорию работы с файлами, номер 17
# на следующем уроке: Посмотреть 9 номер через Пайтон и начинать 24 номер.