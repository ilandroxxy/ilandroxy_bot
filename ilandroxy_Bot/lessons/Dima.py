
# region Домашка: ******************************************************************************



# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# № 6635 Пробник ИМЦ СПб (Уровень: Средний)
# 1. Вычесть 3
# 2. Умножить на -3
# Сколько различных отрицательных результатов можно получить из исходного
# числа 333 в ходе исполнения программы, содержащей ровно 13 команд?
'''
R = set()
def F(a, h):
    if h == 13:
        if a < 0:
            R.add(a)
        return 0
    else:
        return F(a-3, h+1) + F(a * (-3), h+1)

F(333, 0)
print(len(R))
'''
# Показать ответ: 2224



# № 8954 02062023 (Уровень: Базовый)
# (Е. Джобс) В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 10 000 включительно.
# Определите количество пар последовательности, в которых только одно число кратно 7,
# а сумма элементов пары кратна максимальному элементу последовательности, оканчивающемуся на 0F в шестнадцатеричной
# системе счисления. В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
A = [i for i in M if hex(i)[-2:] == '0f']
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if (M[i] % 7 == 0) != (M[i+1] % 7 == 0):
        if (M[i] + M[i+1]) % max(A) == 0:
            count += 1
            maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 2 9487


# № 8960 02062023 (Уровень: Базовый)
# (Е. Джобс) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите первые пять чисел, больших 500 000, сумма делителей которых соответствует маске *7?
# Найденные числа выведите в порядке возрастания, справа от каждого запишите найденную сумму делителей.
'''
from fnmatch import *
def Divisors(x):
    divisors = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            divisors.add(j)
            divisors.add(x // j)
    return sorted(divisors)

count = 0
for x in range(500001, 1000000):
    divisors = Divisors(x)
    # if str(sum(divisors))[-2] == '7':
    if fnmatch(str(sum(divisors)), '*7?'):
        print(x, sum(divisors))
        count += 1
        if count == 5:
            break
'''
# Показать ответ
# 500001 666672
# 500048 968874
# 500069 500070
# 500079 666776
# 500114 750174


# № 8481 (Уровень: Базовый)
# (В. Рыбальченко) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# - символ «?» означает ровно одну произвольную цифру;
# - символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Найдите все натуральные числа меньшие 10**8, которые кратны 237,
# соответствуют маске «81?2*80», но не соответствуют маске «*9*».
# В ответ в первом столбике перечислите все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 237.
'''
from fnmatch import *
for x in range(237, 10**8, 237):   # все натуральные числа меньшие 10**8 and которые кратны 237
    if fnmatch(str(x), '81?2*80'):   # соответствуют маске «81?2*80»
        if not fnmatch(str(x), '*9*'):
            print(x, x//237)
'''
# Показать ответ
# 815280 3440
# 8162280 34440
# 81324180 343140
# 81727080 344840
# 81821880 345240

'''
m = open('24.txt').readline()
m = 'SDFATFDBADZZSFATBADGHTBAD'
m = m.replace('BAD', '*').replace('FAT', '*')
len = 0
k = 0
mini = 100000000
for i in m:
    if i == '*' and k == 0:
        k += 1
        len += 3
    elif i != '*' and k > 0:
        len += 1
    elif k > 0 and i == '*':
        k += 1
        len += 3
        if k == 3:
            mini = min(mini, len)
            k, len = 0, 0
print(mini)
'''

# endregion Урок: ******************************************************************************


# todo:    Дмитрий   = [1, 2, 3, 4, 5+, 6, 7, 8+, 9.1, 10, 11, 12, 13, 14+, 15+, 16+, 17, 18, 19-21, 22, 23, 24, 25.2]
# todo: Дмитрий КЕГЭ = [5, 14, 16, 25]
# на прошлом уроке:
# на следующем уроке:  # todo: Тип 26 №  55822, Тип 26 № 48474 | 8956 | 9169
