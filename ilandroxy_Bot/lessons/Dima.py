
# region Домашка: ******************************************************************************

#№ 5168 (Уровень: Базовый)
'''
# (Д. Статный) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = n, если n ≥ 10 000,
# F(n) = F(n+1) + n2 – 3(n-1), если n < 10 000 и n – чётное.
# F(n) = F(n+2) + 5n – (n-1), если n < 10 000 и n – нечётное.
# Чему равно значение выражения F(90) - F(99)?

# 90 -> 99:
n = 90
count = 0
while n < 99:
    if n % 2 == 0:
        count += n  2 - 3 * (n - 1)
        n += 1
    else:
        count += 5 * n - (n - 1)
        n += 2
print(count)
# F(99)-F(99)+9341 = 9341
'''

# № 5167 (Уровень: Базовый)
'''
# (Д. Статный) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = n, если n ≥ 10 000,
# F(n) = F(n+2) - 3, если n < 10 000 и n – чётное.
# F(n) = F(n+2) + 1, если n < 10 000 и n – нечётное.
# Чему равно значение выражения F(94)-F(80)?

# 80 -> 94:
n = 80
count = 0
while n < 94:
    count += 3
    n += 2
print(count)
# 21
'''


'''
# № 5166 (Уровень: Базовый)

#(Д. Статный) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = n!, если n ≥ 10 000,
# F(n) = F(n+1)*F(n+2), если n < 10 000 и n – чётное.
# F(n) = (n+2)/F(n+2), если n < 10 000 и n – нечётное.
# Чему равно значение выражения F(10)/F(38)?

import math


def F(n):
    if n >= 10000:
        return math.factorial(n)
    if n < 10000 and n % 2 == 0:
        return F(n+1) * F(n+2)
    if n < 10000 and n % 2 != 0:
        return (n+2) / F(n+2)

r = 1
for i in range(13, 40, 4):
    print(i)
    r *= i
print(r)
'''

'''
# 10 -> 38

n = 10
count = 0
while n < 38:
    if n % 2 == 0:
        count += n  2 - 3 * (n - 1)
        n += 1
    else:
        count += 5 * n - (n - 1)
        n += 2
print(count)
'''

# № 5155 (Уровень: Базовый)
'''
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: 
# F(n) = 1 при n = 1;  
# F(n) = n2 + F(n − 1), если n > 1.  
# Чему равно значение выражения F(1000) - F(997)?

n = 1000
count = 0
while n > 997:
    count += n**2
    n -= 1
print(count)
# 2994005
'''


# Тип 23 № 7794
'''
# Исполнитель Увеличитель145 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:
# 1.  Прибавь 1
# 2.  Прибавь 4
# 3.  Прибавь 5
# Первая из них увеличивает число на экране на 1, вторая увеличивает это число на 4, а третья  — на 5. 
# Программа для исполнителя Увеличитель145  — это последовательность команд. Сколько есть программ, которые число 30 преобразуют в число 46?

def F(a, b):
    if a > b:
        return 0
    if a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 4, b) + F(a + 5, b)
print(F(30, 46))
# 301
'''

# Тип 23 № 27391
'''
# Исполнитель ДваждыДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 2
# 2. Умножить на 2
# Первая команда увеличивает число на экране на 2, вторая умножает его на 2. 
# Программа для исполнителя ДваждыДва  — это последовательность команд.
# Сколько существует программ, которые преобразуют исходное число 1 в число 30, и при этом траектория вычислений содержит число 14?
# Траектория вычислений  — это последовательность результатов выполнения всех команд программы. 
# Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 10, 20.

def F(a, b):
    if a > b:
        return 0
    if a == b:
        return 1
    else:
        return F(a + 2, b) + F(a * 2, b)
print(F(1, 14) * F(14, 30))
# 20
'''

# Тип 23 № 29671
'''
# Исполнитель преобразует число на экране.
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 3
# Первая команда увеличивает число на экране на 1, вторая умножает его на 3. 
# Программа для исполнителя — это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1 в число 70, 
# и при этом траектория вычислений содержит число 22?
# Траектория вычислений — это последовательность результатов выполнения всех команд программы. 
# Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 12, 13, 39.

def F(a, b):
    if a > b:
        return 0
    if a == b:
        return 1
    else:
        return F(a + 1, b) + F(a * 3, b)
print(F(1, 22) * F(22, 70))
# 45
'''

# endregion Домашка: ******************************************************************************




# region Урок: ******************************************************************************

# Тип 15 № 35904
# Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
# Для какого наименьшего натурального числа А формула
#
# ДЕЛ(A, 40) ∧ (ДЕЛ(780, x) → (¬ ДЕЛ(A, x) → ¬ДЕЛ(180, x)))
#
# тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной x)?


# Вариант 1 для написания функции
'''
def f(x, A):
    return (A % 40 == 0) and ((780 % x == 0) <= ((A % x != 0) <= (180 % x != 0)))

# Вариант 2 для написания функции
def F(x, A):
    Q = A % 40 == 0
    W = 780 % x == 0
    R = A % x == 0
    T = 180 % x == 0
    return Q and (W <= ((not R) <= (not T)))

# Вариант решения 1
for A in range(1, 1000):
    flag = True
    for x in range(1, 1000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''

# Вариант решения 2
'''
def F(x):
    return (A % 40 == 0) and ((780 % x == 0) <= ((A % x != 0) <= (180 % x != 0)))

for A in range(1, 1000):
    if all(F(x) for x in range(1, 1000)) == True:
        print(A)
        break
'''
# Ответ: 120



# Тип 15 № 36870
# Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n.
# Так, например, 14 & 5 = 1110_2 & 0101_2 = 0100_2 = 4.
# Для какого наименьшего неотрицательного целого числа А формула
#
# x & 49 = 0 → (x & 28 ≠ 0 → x & А ≠ 0)
#
# тождественно истинна (т. е. принимает значение 1 при любом неотрицательном целом значении переменной x)?



# Вариант 1
'''
def F(x, A):
    return (x & 49 == 0) <= ((x & 28 != 0) <= (x & A != 0))

for A in range(0, 1000):
    flag = True
    for x in range(0, 1000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''

# Вариант 2
'''
def F(x):
    return (x & 49 == 0) <= ((x & 28 != 0) <= (x & A != 0))

for A in range(0, 1000):
    if all(F(x) for x in range(0, 1000)):
        print(A)
        break
'''
# Ответ: 12



# Тип 15 № 29125
# Для какого наименьшего целого неотрицательного числа А выражение
#
# (4x + 3y < A) ∨ (x > y) ∨ (y > 13)
#
# тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?

# Вариант 1
'''
def F(x, y, A):
    return (4*x + 3 * y < A) or (x > y) or (y > 13)

for A in range(0, 1000):
    flag = True
    for x in range(0, 100):
        for y in range(0, 100):
            if F(x, y, A) == False:
                flag = False
                break
    if flag == True:
        print(A)
        break
'''

# Вариант 2
'''
def F(x, y):
    return (4*x + 3 * y < A) or (x > y) or (y > 13)

for A in range(0, 1000):
    if all(F(x, y) for x in range(0, 100) for y in range(0, 100)):
        print(A)
        break
'''


# Тип 15 № 34538
'''
# На числовой прямой даны два отрезка: Р = [30, 45] и Q = [40, 55].
# Какова наименьшая возможная длина интервала A, что обе приведённые ниже формулы истинны при любом значении переменной х:
#
# ( ¬(x ∈ A) → (¬(x ∈ P))  )
# ((x ∈ Q)→ (x ∈ A))

def F(x):
    P = 30 <= x <= 45
    Q = 40 <= x <= 55
    A = a1 <= x <= a2
    return ((not A) <= ((not P))) and (Q <= A)

M = [i/4 for i in range(20*4, 70*4)]

R = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M):
            R.append(a2-a1)
print(min(R))
'''
# Ответ: 25




# Тип 15 № 34546
'''
# На числовой прямой даны два отрезка: P = [23, 58] и Q = [1, 39].
# Какова наименьшая возможная длина интервала A, что формула
#
# ((x ∈ P) ∨ (x ∈ А)) → ((x ∈ Q) ∨ (x ∈ А))
#
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.

def F(x):
    P = 23 <= x <= 58
    Q = 1 <= x <= 39
    A = a1 <= x <= a2
    return (P or A) <= (Q or A)


M = [i/4 for i in range(1*4, 70*4)]

R = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M):
            R.append(a2-a1)
print(min(R))
'''
# Ответ: 19 (округляем вверх)



#
# № 4283 (Уровень: Базовый)
'''
# Элементами множеств А, P, Q являются натуральные числа, причём P={1,3,4,9,11,13,15,17,19,21},
# Q={3,6,9,12,15,18,21,24,27,30}. Известно, что выражение
#
# ((x ∈ P) → (x ∈ A)) ∨ ((x ∉ A) → (x ∉ Q))
#
# истинно (т.е. принимает значение 1 при любом значении переменной х.
# Определите наименьшее возможное произведение элементов в множестве A.

a = set()

def F(x):
    P = x in {1,3,4,9,11,13,15,17,19,21}
    Q = x in {3,6,9,12,15,18,21,24,27,30}
    A = x in a
    return (P <= A) or ((not A) <= (not Q))

for x in range(0, 1000):
    if F(x) == False:
        a.add(x)

print(a)

r = 1
for x in a:
    r *= x
print(r)

print(9 * 3 * 21 * 15)
'''


# № 3156 (Уровень: Базовый)
'''
# Элементами множеств А, P и Q являются натуральные числа, причём P = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
# и Q = { 5, 10, 15, 20, 25, 30, 35, 40, 45, 50}. Известно, что выражение
#
# ((x ∈ A) → (x ∈ P)) ∧ ((x ∈ Q) → ¬(x ∈ A))
#
# истинно (т. е. принимает значение 1) при любом значении переменной х.
# Определите наибольшее возможное количество элементов множества A.


a = set(range(0, 1000))

def F(x):
    P = x in {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
    Q = x in {5, 10, 15, 20, 25, 30, 35, 40, 45, 50}
    A = x in a
    return (A <= P) and (Q <= (not A))

for x in range(0, 1000):
    if not(F(x)):
        a.remove(x)

print(a, len(a))
'''
# Ответ: 8


# endregion Урок: ******************************************************************************


# todo: Дмитрий = [2, 5, 8, 12, 14+, 15, 16, 23]
# на прошлом уроке: Разбирали 15 номер все типы задач
# на следующем уроке: