
# region Домашка: ******************************************************************************




# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Однострочный комментарий

'''
"""
Многострочный комментарий
"""
'''


x = 5
# Типа данных переменных
'''
a = 4  # int (integer) - целочисленные числа
x = a + 5
print(x)

b = '4'  # str (string) - строка содержащая цифры, символы, слова, буквы и тд
print(b * 4)
print(b + '5')  # конкатенация строк (склеивание)

c = 4.0  # float (число с плавающей точкой)
print(a * c)

d1 = True
d2 = False  # bool (boolean) - для логический операция
'''

# Типа данных коллекций
'''
A = [1, 2, 3]  # список list()
# Упорядоченные элементы, то есть каждый элемент имеет порядковый номер - индекс
# Через индекс мы можем получать значение элемента и изменять его
A[0] = 100
print(A)

B = (1, 2, 3)  # кортеж tuple()
# Упорядоченные элементы, то есть каждый элемент имеет порядковый номер - индекс
# Через индекс мы можем получать значение элемента (работа с кортежем быстрее чем со списком)

C = {1, 2, 3}  # множество set()
# Неупорядоченные элементы, мы можем брать элементы множества через индекс, но их порядок все время будет плавать
# Во множестве не может храниться два одинаковых элемента
A = [1, 1, 2, 2, 3, 4]
C = set(A)
print(C)

D = {1: 'один', 2: 'два', 3: 'три'}  # словарь dict()
# доступ к значению элемента словаря осуществляется через его ключ
# таким образом - ключи повторяться не могут

D[2] = 'ДВА'
print(D)
print(D.keys())
print(D.values())
print(D.items())
'''

'''
M = [4, '4', 4.0, True, 4+3, '4'*3, 7/2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: 'один', 2: 'два', 3: 'три'} ]
for x in M:
    print(x, type(x))
'''

# Конвертация типов данных
'''
a = 4
print(a, type(a))

a = str(a)
print(a, type(a))

a = float(a)
print(a, type(a))

a = int(a)
print(a, type(a))

# Перевести из строки в int или float можно только лишь если строка состоит из цифр

b = '4'
x = int(b + '5')
print(x, type(x))


A = [1, 2, 3]
print(A, type(A))

A = tuple(A)
print(A, type(A))

A = set(A)
print(A, type(A))

A = list(A)
print(A, type(A))
'''

# Ввод данных с клавиатуры
'''
x = input('x: ')  # принять с клавиатуры строчную переменную
print(x * 4)

x = int(input('x: '))
print(x * 4)

n = int(input('Введите длину списка: '))
M = []
for i in range(n):
    M.append(int(input(f'x{i+1}: ')))
print(M)

# Списочные выражения 
M = [int(i) for i in input('Введите числа через пробел: ').split() if int(i) % 2 == 0]
print(M)
'''

# Оформление консольного вывода print()
'''
weather = 'облачно'
temperature = 24
# Привет, сегодня такая классная погода! Облачно, а температура 24 градуса!
print('Привет, сегодня такая классная погода!', weather, ', а температура', temperature, 'градуса!')
print('Привет, сегодня такая классная погода! ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, сегодня такая классная погода! {}, а температура {} градуса!'.format(weather, temperature))
print('Привет, сегодня такая классная погода! %s, а температура %d градуса!'%(weather, temperature))  # %f - для float
print(f'Привет, сегодня такая классная погода! {weather}, а температура {temperature} градуса!')  # f-строка

x = 5
s = f'1234{x}6'  # пригодится в 14 номере нового типа
print(s)
'''


# region Базовая арифметика
'''
a = 7
b = 2
print()  # \n

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b} \n')

print(f'Число {a} в степени {b}: {a}**{b} = {a**b}')
print(f'Квадратный корень числа 16: 16**(1/2) = {16**(0.5)}')
print(f'Кубический корень числа 27: 27**(1/3) = {27**(1/3)}')

import math
x = math.sqrt(16)
print(x)
print()
print(f'Вещественное деление: {a} / {b} = {a / b} \n'
      f'Взятие целой части (без округления): {a} // {b} = {a // b} \n'
      f'Взятие остатка от деления (от обыкновенной дроби): {a} % {b} = {a % b} \n')
'''
# endregion Базовая арифметика

# Сумма цифр числа
'''
x = 123
summ1 = 0
x1 = x // 100
x2 = (x % 100) // 10
x3 = x % 10
summ1 = x1 + x2 + x3
print(x1, x2, x3, summ1)

x = 12342389457239847538927423
summ2 = 0
while x > 0:
    summ2 += x % 10
    x //= 10
    print(x)
print(summ2)
'''


# endregion Урок: ******************************************************************************


#todo: Дмитрий = [ ], на следующем уроке: Теория условные операторы и циклы