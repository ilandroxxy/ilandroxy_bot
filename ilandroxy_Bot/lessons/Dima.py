
# region Домашка: ******************************************************************************

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# № 7013 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# - символ «?» означает ровно одну произвольную цифру;
# - символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Найдите все натуральные числа, не превосходящие 10**9, для которых выполнены все условия:
#
# - соответствуют маске *31*65?;
# - делятся на 31 и 2031 без остатка;
#
# - количество делителей числа является результатом любой степени двойки
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# справа от каждого числа их частное от деления на 2031.

# количество делителей числа является результатом любой степени двойки


# print(10**9)
# print('****3165?')
'''
import itertools

SQUARE_STEPENI = [2**i for i in range(0, 100)]

def MyDevisors(x: int) -> bool:
    divisors = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            divisors.add(j)
            divisors.add(x // j)
    if len(divisors) in SQUARE_STEPENI:
        return True
    else:
        return False


M = []
for l in range(0, 4+1):  # длина звездочки
    for s in itertools.product('0123456789', repeat=l):
        slovo = ''.join(s)
        M.append(slovo)

# количество делителей числа является результатом любой степени двойки
myd = {}
for a in M:
    for b in M:
        for c in '0123456789':
            r = int(f'{a}31{b}65{c}')
            if r % 31 == 0 and r % 2031 == 0 and r <= 10**9:
                if r not in myd:
                    if MyDevisors(r):
                        myd[r] = r // 2031
                        print(r, r // 2031)

print('----------------')
for key in sorted(myd):
    print(key, myd[key])
'''
# 53831655 26505
# 333126651 164021
# 512313657 252247
# 647931651 319021
# 831966654 409634



# № 6210 (Уровень: Средний)
# (Н. Сафронов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

#
# Найдите все натуральные числа, не превосходящие 10**7, для которых выполняются одновременно все условия:
# • соответствуют маске *2?2*;
# • являются палиндромами;
# • делятся на число 53 без остатка;
# • количество делителей больше 30.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — сумму делителей.

# print(10**7)
# print('2?2****')

'''
import itertools

def MyDevisors(x: int) -> list:
    divisors = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            divisors.add(j)
            divisors.add(x // j)
    return sorted(divisors)


M = []
for l in range(0, 4+1):  # длина звездочки
    for s in itertools.product('0123456789', repeat=l):
        slovo = ''.join(s)
        M.append(slovo)

myd = {}
for a in M:
    for b in M:
        for c in '0123456789':
            r = int(f'{a}2{c}2{b}')
            if r % 53 == 0 and r <= 10**7:
                if str(r) == str(r)[::-1]:
                    if r not in myd:
                        divisors = MyDevisors(r)
                        if len(divisors) > 30:
                            myd[r] = sum(divisors)
                            print(r, sum(divisors))

print('----------------')
for key in sorted(myd):
    print(key, myd[key])
'''
# 212212 508032
# 2527252 5588352
# 4282824 13789440
# 4626264 11787120
# 8125218 19595520
# 8824288 19908504


# № 5844 (Уровень: Базовый)
# Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
#
# 1. Строится пятеричная запись числа N.
# 2. Далее, эта запись обрабатывается по следующему правилу:
# а) Если цифр 0 в ней чётное количество, то перед изначальным (десятичным)
# числом дописывается первая цифра пятеричной записи.
# б) Если цифр 0 в ней нечётное количество, то после изначального (десятичного)
# числа дописывается первая цифра пятеричной записи.
# 3. Строится двоичная запись получившегося числа.
# 4. Считается сумма цифр этой двоичной записи.
#
# Какая максимальная сумма может получиться, если на вход алгоритму подавались числа от 100 до 500?
'''
ALPAHBET = '0123456789ABCDEFGH'
def MyConvert(x: int, n: int) -> str:
    """
Функция для перевода из 10-ной в n-ную систему счисления
    :param x: 10-ное число, которое будем переводить
    :param n: система счисления в которое будем переводить x
    :return: Возвращает переведенное число в виде str
    """
    M = []
    while x > 0:
        M.append(ALPAHBET[x % n])
        x //= n
    M.reverse()
    return ''.join(M)

maxi = 0
for n in range(100, 500+1):
    s = MyConvert(n, 5)

    if s.count('0') % 2 == 0:
        new_n = int(s[0] + str(n))
    else:
        new_n = int(str(n) + s[0])

    new_s = MyConvert(new_n, 2)

    summ = sum([int(i) for i in new_s])
    maxi = max(maxi, summ)
print(maxi)

print(MyConvert.__doc__)
print(help(MyConvert))
'''
# Ответ: 10

import useful
print(help(useful.MyConvert))



# endregion Урок: ******************************************************************************


# todo:    Дмитрий   = [1, 2, 3, 4, 5+, 6, 7, 8+, 9.1, 11, 12, 13, 14+, 15+, 16+, 17, 18, 19-21, 22, 23, 24, 25.2]
# todo: Дмитрий КЕГЭ = [5, 14, 16, 25]
# на прошлом уроке: Разбирали 25 номера с масками из домашки и решил вариант Якунина, номера: 4, 5
# на следующем уроке:
