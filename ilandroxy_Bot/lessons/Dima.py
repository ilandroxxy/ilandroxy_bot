
# region Домашка: ******************************************************************************

# # Тип 12 № 16817
'''
# Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 80 единиц?
# НАЧАЛО
# ПОКА нашлось (11111)
# заменить (111, 2)
# заменить (222, 1)
# КОНЕЦ ПОКА
# КОНЕЦ

s = '1' *  80

while '11111' in s:
    s = s.replace('111', '2', 1)
    s = s.replace('222', '1', 1)
print(s)

# 2211
'''
#
# # Тип 12 № 17378
# '''
# # Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 77 единиц?
# # НАЧАЛО
# # ПОКА нашлось (111)
# # заменить (111, 2)
# # заменить (222, 3)
# # заменить (333, 1)
# # КОНЕЦ ПОКА
# # КОНЕЦ
#
# s = '1' * 77
# while '111' in s:
#     s = s.replace('111', '2', 1)
#     s = s.replace('222', '3', 1)
#     s = s.replace('333', '1', 1)
# print(s)
#
# # 33221
# '''
#
# # Тип 12 № 10388
# '''
# # НАЧАЛО
# # ПОКА нашлось (722) ИЛИ нашлось (557)
# # ЕСЛИ нашлось (722)
# # ТО заменить (722, 57)
# # ИНАЧЕ заменить (557, 72)
# # КОНЕЦ ЕСЛИ
# # КОНЕЦ ПОКА
# # КОНЕЦ
#
# # На вход этой программе подается строка, состоящая из 55 цифр; последняя цифра в строке  — цифра 7,
# # а остальные цифры  — пятёрки. Какая строка получится в результате применения программы к этой строке?
# # В ответе запишите полученную строку.
#
# s = '5' * 54 + '7'
# while '722' in s or '557' in s:
#     if '722' in s:
#         s = s.replace('722', '57', 1)
#     else:
#         s = s.replace('557', '72', 1)
# print(s)
#
# # 572
# '''
#
# # Тип 12 № 36867
# '''
# # НАЧАЛО
# # ПОКА НЕ нашлось (00)
# # заменить (01, 210)
# # заменить (02, 320)
# # заменить (03, 3012)
# # КОНЕЦ ПОКА
# # КОНЕЦ
#
# # Известно, что исходная строка начиналась с нуля и заканчивалась нулём,
# # а между ними содержала только единицы, двойки и тройки. После выполнения данной программы получилась строка,
# # содержащая 26 единиц, 54 двойки и 48 троек.
# # Сколько цифр было в исходной строке?
#
# for x in range(50):
#     for y in range(50):
#         for z in range(50):
#             s = '0' + '1' * x + '2' * y + '3' * z + '0'
#
#             while not '00' in s:
#                 s = s.replace('01', '210', 1)
#                 s = s.replace('02', '320', 1)
#                 s = s.replace('03', '3012', 1)
#             if s.count('1') == 26 and s.count('2') == 54 and s.count('3') == 48:
#                 print(2 + x + y + z, x, y, z)
#
# # 36
# '''
#
# # Тип 12 № 47216
# '''
# # НАЧАЛО
# # ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>0)
# # ЕСЛИ нашлось (>1)
# # ТО заменить (>1, 22>)
# # КОНЕЦ ЕСЛИ
# # ЕСЛИ нашлось (>2)
# # ТО заменить (>2, 2>)
# # КОНЕЦ ЕСЛИ
# # ЕСЛИ нашлось (>0)
# # ТО заменить (>0, 1>)
# # КОНЕЦ ЕСЛИ
# # КОНЕЦ ПОКА
# # КОНЕЦ
#
# # На вход приведённой выше программе поступает строка, начинающаяся с символа «>», а затем содержащая 39 цифр «0»,
# # n цифр «1» и 39 цифр «2», расположенных в произвольном порядке.
# # Определите наименьшее значение n, при котором сумма числовых значений цифр строки,
# # получившейся в результате выполнения программы, является простым числом.

# Вариант 1
'''
def tryer(x):
    for i in range(2, x):
        if x % i == 0:
            return False
    return True

for n in range(0, 1000):
    s = '>' + '0' * 39 + n * '1' + '2' * 39

    while '>1' in s or '>2' in s or '>0' in s:
        if '>1' in s:
            s = s.replace('>1', '22>', 1)
        if '>2' in s:
            s = s.replace('>2', '2>', 1)
        if '>0' in s:
            s = s.replace('>0', '1>', 1)

    count = s.count('1') + s.count('2') * 2

    if tryer(count) == True:
        print(n)
        break
    '''

# Вариант 2
'''
for n in range(0, 1000):
    s = '>' + '0' * 39 + n * '1' + '2' * 39

    while '>1' in s or '>2' in s or '>0' in s:
        if '>1' in s:
            s = s.replace('>1', '22>', 1)
        if '>2' in s:
            s = s.replace('>2', '2>', 1)
        if '>0' in s:
            s = s.replace('>0', '1>', 1)

    count = s.count('1') + s.count('2') * 2
    flag = True
    for i in range(2, count):
        if count % i == 0:
            flag = False
    if flag == True:
        print(n)
        break
'''

# # Вариант 2
'''
for n in range(0, 1000):
    s = '>' + '0' * 39 + n * '1' + '2' * 39

    while '>1' in s or '>2' in s or '>0' in s:
        if '>1' in s:
            s = s.replace('>1', '22>', 1)
        if '>2' in s:
            s = s.replace('>2', '2>', 1)
        if '>0' in s:
            s = s.replace('>0', '1>', 1)

    count = s.count('1') + s.count('2') * 2
    k = 2
    for i in range(2, count):
        if count % i == 0:
            k += 1
    if k == 2:
        print(n)
        break
'''
# 5


# endregion Домашка: ******************************************************************************




# region Урок: ******************************************************************************

# Функции:
'''
min()
max(x, y, z, w,...)
len()
range()
'''

# Методы списков - функции направленные на определенный объект
'''
.append()
.count()
.reverse()  
'''
# import ...

# функции
'''
def mysum(*args):
    summ = sum(args)
    return summ

a = 5
b = 7
c = 3
M = [a, b, c]

print(min(a, b, c), max(a, b, c))
print(min(M), max(M), sum(M))

print(mysum(a, b, c))
'''

# Тип 15 № 34521
# Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n.
#
# Так, например, 14 & 5 = 1110_2 & 0101_2 = 0100_2 = 4.
#
# Для какого наибольшего целого числа А формула
#
# x&51 = 0 ∨ (x&41 = 0 → x&А = 0)
#
# тождественно истинна (т.е. принимает значение 1 при любом неотрицательном целом значении переменной x)?

# print(14 & 5)

'''
def Conc(m, n):
    m_2 = bin(m)[2:]
    n_2 = bin(n)[2:]

    while len(m_2) != len(n_2):
        if len(m_2) < len(n_2):
            m_2 = '0' + m_2
        else:
            n_2 = '0' + n_2

    r = ''
    for i in range(0, len(n_2)):
        if n_2[i] == '1' and m_2[i] == '1':
            r += '1'
        else:
            r += '0'

    result = int(r, 2)

    return result

print(Conc(14, 5))

'''



# Тип 23 № 18724
'''
# Исполнитель Вычислитель преобразует число на экране.
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 3
# 3. Прибавить 2
#
# Сколько существует программ, которые преобразуют исходное число 1 в число 15
# и при этом траектория вычислений содержит числа 10 и 12?


def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*3, b) + F(a+2, b)

print(F(1, 10) * F(10, 12) * F(12, 15))
'''
# Ответ: 504

# Тип 23 № 18598
'''
# Исполнитель РазДваТри преобразует число на экране.
#
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Умножить на 3
# Сколько существует программ, которые преобразуют исходное число 1 в число 40,
# и при этом траектория вычислений содержит число 12 и не содержит числа 14?

def F(a, b):
    if a > b or a == 14:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a*3, b)

print(F(1, 12) * F(12, 40))
'''
# Ответ: 152




# Тип 16 № 45250
'''
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n)=2 при n<3;
# F(n)=F(n−2)+F(n−1)−n, если n>2 и при этом n чётно,
# F(n)=F(n−1)−F(n−2)+2×n, если n>2 и при этом n нечётно.
#
# Чему равно значение функции F(32)?

def F(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return F(n - 2) + F(n - 1) - n
    if n > 2 and n % 2 != 0:
        return F(n - 1) - F(n - 2) + 2 * n

print(F(32))
'''
# Ответ: 3194


# Тип 16 № 6779
'''
# Алгоритм вычисления значений функций F(n) и G(n), где n — натуральное число, задан следующими соотношениями:

#
# F(1) = 1; G(1) = 1;
# F(n) = F(n – 1) – G(n – 1), G(n) = F(n–1) + G(n – 1), при n ≥ 2
#
# Чему равно значение величины F(5)/G(5)? В ответе запишите только натуральное число.

def F(n):
    if n == 1:
        return 1
    if n >= 2:
        return F(n - 1) - G(n - 1)

def G(n):
    if n == 1:
        return 1
    if n >= 2:
        return F(n - 1) + G(n - 1)

print(F(5)/G(5))
'''
# ОТВЕТ: 1


print(2023 * 2021 * 2022)
# 8266912626

# endregion Урок: ******************************************************************************


#todo: Дмитрий = [2, 5, 8, 12, 14+], на следующем уроке: Переходим к функциям и решать 23, 16, 15, 25