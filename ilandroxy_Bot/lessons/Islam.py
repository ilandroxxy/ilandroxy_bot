# region Домашка:  ******************************************************************************


# endregion Домашка: ******************************************************************************


# region Урок:  ******************************************************************************


# Тип 25 № 38959 i
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 200_000_000, для которых 0<M(N)<N.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def D(n):
    dl = set()
    for j in range(2, int(n**0.5)+1):      # не считая единицы.
        if n % j == 0:
            dl.add(j)
            dl.add(n // j)
    return sorted(dl)

count = 0
for n in range(200_000_000+1, 200_000_000_000):  # натуральных чисел, превышающих 200_000_000
    dl = D(n)  # вызываем функцию для поиска делителей числа n - кладем найденные делители в dl
    if len(dl) >= 5:  # если делителей меньше пяти, то нет смысла искать M
        M = dl[0] * dl[1] * dl[2] * dl[3] * dl[4]  # M(N) — произведение 5 наименьших различных натуральных делителей
        if 0 < M < n:  # для которых 0<M(N)<N
            print(M)
            count += 1
            if count == 5:  # # Найдите 5 наименьших натуральных чисел
                break
'''
# Ответ:
# 1728
# 21632
# 1260
# 1152
# 4127787




# Тип 25 № 29673 i Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Найдите все натуральные числа, принадлежащие отрезку [123456789;223456789] и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе
# его наибольший нетривиальный делитель. Ответы расположите в порядке возрастания.
'''
def D(n):
    dl = set()
    if round(n ** 0.5) == (n ** 0.5):  # если у числа есть квадратный корень (целое число)
        for j in range(2, int(n**0.5)+1):      # не считая единицы.
            if n % j == 0:
                dl.add(j)
                dl.add(n // j) 
    return sorted(dl)


for n in range(123456789, 223456789+1):  # натуральных чисел, превышающих 200_000_000
    dl = D(n)  # вызываем функцию для поиска делителей числа n - кладем найденные делители в dl
    if len(dl) == 3:  # если делителей меньше пяти, то нет смысла искать M
        print(n, max(dl))
'''
# Ответ:
# 131079601 1225043
# 141158161 1295029
# 163047361 1442897


# Тип 25 № 37130
# Напишите программу, которая перебирает целые числа, большие 600_000, в порядке возрастания и ищет
# среди них такие, среди делителей которых есть хотя бы одно число, оканчивающееся на 7, но не равное 7 и самому
# числу. Необходимо вывести первые 5 таких чисел, и наименьший делитель, оканчивающийся на 7, не равный 7 и самому
# числу.
#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число,
# затем — наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу. Строки выводятся в порядке
# возрастания найденных чисел.
'''
def D(n):
    dl = set()
    for j in range(2, int(n**0.5)+1):  # не считая единицы.
        if n % j == 0:
            if j % 10 == 7 and j != 7:  # оканчивающееся на 7, но не равное 7
                dl.add(j)
            if (n // j) % 10 == 7:
                dl.add(n // j)
    return sorted(dl)

count = 0
for n in range(600_000+1, 600_000_000):  # натуральных чисел, превышающих 200_000_000
    dl = D(n)  # вызываем функцию для поиска делителей числа n - кладем найденные делители в dl
    if len(dl) > 0:  # если делителей меньше пяти, то нет смысла искать M
        print(n, min(dl))
        count += 1
        if count == 5:
            break
'''
# Ответ:
# 600001 437
# 600002 47
# 600003 1227
# 600005 217
# 600012 16667

# Тип 25 № 36880
# Найдите все натуральные числа N, принадлежащие отрезку [400_000_000; 600_000_000], которые можно
# представить в виде N = 2**m * 3**n, где m — чётное число, n — нечётное число. В ответе запишите все найденные числа
# в порядке возрастания.
'''
print(600_000_000)
print(2**28)  # m <= 28
print(3**17)  # n <= 17
'''

'''
R = []
for m in range(0, 28+1, 2):
    for n in range(1, 17+1, 2):
        N = 2**m * 3**n
        if 400_000_000 <= N <= 600_000_000:
            R.append(N)
            
for x in sorted(R):
    print(x)
'''
# Ответ:
# 408146688
# 452984832
# 516560652
# 573308928


# Тип 25 № 47229 i
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023
# без остатка. В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а во втором
# столбце — соответствующие им результаты деления этих чисел на 2023.

# print(10**10)
# print('1?2139***4')  # установили, что длина должна равняться - 3 символ
'''
R = []
for x in range(0, 10):  # ? - [0, 10)
    for y in range(0, 1000):  # * - [0, 1000)
        A = int(f'1{x}2139{y}4')
        if A % 2023 == 0:  # делящиеся на 2023 без остатка
            R.append([A, A//2023])

for x in sorted(R):
    print(*x)
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048

# endregion Урок:  *************************************************************************


# todo: Ислам = [2, 5, 6, 8, 12, 14+, 15, 16, 23, 25]
# на прошлом уроке: Прорешали до конца 25 номера, на все типы.
# на следующем уроке:
