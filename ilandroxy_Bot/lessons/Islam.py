# region Домашка:  ******************************************************************************



# endregion Домашка: ******************************************************************************


# region Урок:  ******************************************************************************

# Функции

# Встроенные функции Python:
'''
len()
range()
int()
float()
set()
print()
max()
sum()
min()
'''

# Методы - это функции описанные для определенного объекта (типа данных)

# Методы списков:
'''
.append()
.reverse()
.count()
'''


a = 5
print(type(a))

print(len.__doc__)

# Можем создать свою функцию

a, b, c = 5, 7, 8
M = [a, b, c]
print(min(M), max(M), sum(M))

print(min(a, b, c), max(a, b, c))  # sum(a, b, c)


def my_sum(*args):
    """
    Функция вычисления суммы на любом наборе переменных

    :param args:  # принимает значения в виде кортежа tuple()
    :return:  # возвращает сумму цифр кортежа args
    """

    summ = 0
    for x in args:
        summ += x
    return summ

print(my_sum(a, b, c, 5, 6, 7, 8))
print(my_sum.__doc__)


def my_square_equation(a, b=0, c=0):  # Квадратное уравнение: a != 0
    '''

    :param a:
    :param b:
    :param c:
    :return:
    '''
    D = b ** 2 - 4 * a * c

    if D < 0:
        return 'Нет корней.'
    elif D == 0:
        return (b-(D**0.5)) / (2 * a)
    else:
        x1 = (b-(D**0.5)) / (2 * a)
        x2 = (-b-(D**0.5)) / (2 * a)
        return x1, x2

print(my_square_equation(1, -1, -2))
print(my_square_equation(3, -22, 7))
print(my_square_equation(7, -1))



# Тип 23 № 14237
'''
# У исполнителя есть две команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Прибавить 2
#
# Сколько существует программ, для которых при исходном числе 1 результатом является число 12?

def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b)

print(F(1, 12))
'''
# Ответ: 144


# Тип 23 № 17386
'''
# Исполнитель РазДваПять преобразует число на экране.
#
# У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Прибавить 5
#
# Сколько существует программ, которые преобразуют исходное число 1 в число 18, и при этом траектория вычислений содержит число 9 и не содержит числа 11?

def F(a, b):
    if a > b or a == 11:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a + 5, b)

print(F(1, 9) * F(9, 18))
'''
# Ответ: 57


# Тип 16 № 7372
'''
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими рекуррентными соотношениями:
#
# F(n) = 1 при n = 1;
#
# F(n) = F(n − 1)·n при n ≥ 2.
#
# Чему равно значение функции F(6)?
#
# В ответе запишите только натуральное число.

def F(n):
    if n >= 2:
        return F(n - 1) * n
    if n == 1:
        return 1

print(F(6))
'''
# Ответ: 720



# Тип 16 № 38950
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 500 и F(n)=8?

def F(n):
    if n == 0:
        return 0
    if n % 2 == 0 and n > 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0
for x in range(1, 500+1):
    if F(x) == 8:
        count += 1
print(count)
'''
# Ответ: 5


# Тип 16 № 4656
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 0
# F(n) = F(n–1) + n, при n >1
#
# G(1) = 1
# G(n) = G(n–1) * n, при n >1
#
# Чему равно значение функции F(5) + G(5)?
#
# В ответе запишите только натуральное число.

'''
def F(n):
    if n == 1:
        return 0
    if n > 1:
        return F(n-1) + n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return G(n-1) * n

print(F(5) + G(5))
'''
# Ответ: 134


print(1000 * (999 * (998 - 1) - 1) - 1)
# 997001999
# 996001999

# endregion Урок:  ******************************************************************************


# todo: Ислам = [2, 5, 6, 8, 12, 14+, 16, 23]
# на прошлом уроке: Разобрали теорию функций и задачи 16, 23
# на следующем уроке: