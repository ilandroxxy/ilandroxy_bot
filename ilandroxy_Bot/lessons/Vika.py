# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 16 №6893
# Алгоритм вычисления значений функций F(n), где n — натуральное число, задан следующими соотношениями:
# F(1) = 1;
# F(2) = 2;
# F(3) = 3;
# F(n) = F(n − 3)*n при n >3
# Чему равно значение функции F(10)? В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:  # F(1) = 1;
        return 1
    if n == 2:  # F(2) = 2;
        return 2
    if n == 3:  # F(3) = 3;
        return 3
    if n > 3:
        return F(n - 3) * n


print(F(10))
'''
# Ответ: 280


# Тип 16 №6338
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = n при n ≤ 2;
# F(n) = 3 × F(n − 1) − F(n − 2) при n> 2.
#
# Чему равно значение функции F(6)? В ответе запишите только натуральное число.
'''
def F(n):
    if n <= 2:
        return n
    if n > 2:
        return 3 * F(n - 1) - F(n - 2)

print(F(6))
'''
# Ответ: 89


# Тип 16 №45250
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n) = 2 при n < 3;
# F(n) = F(n − 2) + F(n − 1) − n, если n > 2 и при этом n чётно,
# F(n) =F(n − 1) − F(n − 2) + 2 × n, если n > 2 и при этом n нечётно.
#
# Чему равно значение функции F(32)?
'''
def F(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return F(n - 2) + F(n - 1) - n
    if n > 2 and n % 2 != 0:
        return F(n - 1) - F(n - 2) + 2 * n

print(F(32))
'''
# Ответ: 3194


# Тип 16 №4657
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = 2 * G(n–1) + 5 * n, при n >1
#
# G(1) = 1
# G(n) = F(n–1) + 2 * n, при n > 1
#
# Чему равно значение функции F(4) + G(4)?
# В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return 2 * G(n-1) + 5 * n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return F(n-1) + 2 * n

print(F(4) + G(4))
'''
# Ответ: 89


# Тип 16 №36871
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n) = 3?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)


count = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        count += 1
print(count)
'''
# Ответ: 120


# Тип 16 №59761
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 10, при n < 11;
# F(n) = n + F(n−1), если n≥11.
#
# Чему равно значение выражения F(2124) − F(2122)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n < 11:
        return 10
    if n >= 11:
        return n + F(n-1)


print(F(2124) - F(2122))

# Решение руками:
# F(2124) = 2124 + F(2123)
# F(2123) = 2123 + F(2122) - F(2122)
print(2124 + 2123)
'''
# Ответ: 4247

# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded


'''
# Функция для увеличения глубины рекурсии
from sys import *
setrecursionlimit(10000)

# Функция для подключения кэширования
from functools import *
@lru_cache(None)
def f(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return 2 * f(n-2) - f(n-1) + 2
    if n > 2 and n % 2 != 0:
        return 2 * f(n-1) + f(n-2) - 2


print(f(170))
'''
# Ответ: 3596910688800

# КЕГЭ № 2248 (Уровень: Сложный)
# Алгоритм вычисления значения функции F(n), где n – целое число, задан следующими соотношениями:
# F(n) = n при n≤1
# F(n) = n + F(n/3) когда n>1 и делится на 3
# F(n) = n + F(n+3) когда n>1 и не делится на 3
# Назовите минимальное значение n, для которого F(n) определено и больше 100


import sys
sys.setrecursionlimit(1000)

def F(n):
    if n <= 1:
        return n
    if n > 1 and n % 3 == 0:
        return n + F(n/3)
    if n > 1 and n % 3 != 0:
        return n + F(n+3)


for n in range(0, 10000):
    try:
        if F(n) > 100:
            print(n)
            break
    except RecursionError:
        # print(f'Ошибка при числе: {n}')
        continue

# Ответ: 81



# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Вика = [2, 6, 19-21]
# КЕГЭ  = []
# на следующем уроке:
