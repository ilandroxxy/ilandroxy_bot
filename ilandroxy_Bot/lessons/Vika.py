# region Домашка: ******************************************************************
'''
s = input()
print(f'Символ + встречается {s.count("+")} раз')
print(f'Символ * встречается {s.count("+")} раз')
'''


# На вход программе подается одна строка.
# Напишите программу, которая выводит:
#
# общее количество символов в строке;
# исходную строку, повторенную 3 раза;
# первый символ строки;
# первые три символа строки;
# последние три символа строки;
# строку в обратном порядке;
# строку с удаленным первым и последним символом.
'''
s = input()
print(len(s))
print(s * 3)
print(s[0])
print(s[0:3])
print(s[-3:])
print(s[::-1])
print(s[1:-1])
'''


# третий символ этой строки;
# предпоследний символ этой строки;
# первые пять символов этой строки;
# всю строку, кроме последних двух символов;
# все символы с четными индексами;
# все символы с нечетными индексами;
# все символы в обратном порядке;
# все символы строки через один в обратном порядке, начиная с последнего.
'''
s = input()
print(s[2])
print(s[-2])
print(s[:5])
print(s[:-2])
print(s[0::2])
print(s[1::2])
print(s[::-1])
print(s[::-2])
'''


# Теория списков list
# - Содержат неограниченное кол-во элементов, различных типов данных
# - Каждый элемент списка имеет порядковый номер - индекс
# - Индексы считаются слева-направо начиная с 0 и справа-налево начиная с -1
# - В списках можно изменять элементы через их индексы
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

M[-1] = 'конец'
print(M)  # ['a', 'b', 'c', 'd', 'конец']
'''

# Работа со списками через цикл for
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

for x in M:  # пробегаем элементы списка на прямую
    print(x, end=' ')  # a b c d e
print()

# Тут удобно отсеивать элементы 
for x in M:  
    if x in 'bcd':
        print(x, end=' ')  # b c d
print()


for i in range(len(M)):  # пробегаем элементы списка через индексы
    # print(i, end=' ')  # 0 1 2 3 4
    print(M[i], end=' ')  # a b c d e
print()

# Через индексы можно менять элементы списка:
for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''


# Срезы списков
'''
print(M[:3])  # ['a', 'b', 'c']
print(M[2:])  # ['c', 'd', 'e']
print(M[1:4])  # ['b', 'c', 'd']
print(M[0::2])  # ['a', 'c', 'e']
print(M[1::2])  # ['b', 'd']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a']
'''
# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Типы данных строка str (string)
'''
s = 'Hello, world!'
print(s)

s1 = 'Hello, '
s2 = 'world!'
print(s1 + s2)  # конкатенация строк (склеивание)

s = '8' * 10
print(s)  # 8888888888 - Строка при умножении на целое число - дублируется
'''


'''
# i  01234
s = 'abcde'

print(s[0], s[1], s[2], s[3], s[4])  # a b c d e
print(s[-5], s[-4], s[-3], s[-2], s[-1])  # a b c d e

print(f'Первый элемент строки s: {s[0]} \n'
      f'Последний элемент строки s: {s[-1]}')
# Первый элемент строки s: a 
# Последний элемент строки s: e
'''

# Срезы строк
'''
# i  01234
s = 'abcde'
print(s[0:3])  # abc
print(s[1:4])  # bcd
print(s[:4])  # abcd
print(s[2:])  # cde
print(s[:])  # abcde - все элементы
print(s[::-1])  # edcba
print(s[::2])  # ace
print(s[1::2])  # bd
'''


# Методы строк
'''
s = 'abcdea'
print(len(s))  # 5 - длина строки (кол-во элементов в строке)
print(s.count('a'))  # 1 - возвращает кол-во вхождений элемента в сроку
print(s.index('a'))  # 0 - возвращает индекс первого вхождения
print(s.rindex('a'))  # 5 - возвращает индекс последнего вхождения
s = s.replace('a', '*')  # заменил все буквы а на *
print(s)  # *bcde*
s = s.replace('*', 'a', 1)  # заменил одну звездочку (слева) на а
print(s)  # abcde*
'''

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Вика = [2.1, 6.1]
# КЕГЭ  = []
# на следующем уроке: На след. уроке добить теорию списков
