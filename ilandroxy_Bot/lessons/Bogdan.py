# region Домашка:  ******************************************************************************

# Тип 16 № 35990
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:

# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 500 и F(n) = 3?

def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0  # Сколько существует
for n in range(1, 500+1):  # таких чисел n, что 1 ≤ n ≤ 500
    if F(n) == 3:  # F(n) = 3?
        count += 1
print(count)
'''
# Ответ: 84
# endregion Домашка:  ******************************************************************************

# region Урок:  ******************************************************************************

# Тип 16 № 47220 i
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n) = 1 при n = 1;
# F(n) = n·F(n−1), если n>1.
#
# Чему равно значение выражения F(2023) / F(2020)?

# def F(n):
#     if n == 1:
#         return 1
#     if n > 1:
#         return n * F(n-1)
#
# print(F(2023) / 2020)  # RecursionError: maximum recursion depth exceeded in comparison

# print(2023*2022*2021)
# Ответ: 8266912626



# № 5156 (Уровень: Базовый)
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = n, при n ≤ 3
# F(n) = 2*n + F(n–2), при нечётном n; при n > 3:
# F(n) = n*n + F(n–1), при чётном n; при n > 3:
#
# Определите значение F(10000) - F(9995).

# F(10000) = 10000 ** 2 + F(9999)
# F(9999) = 2*9999 + F(9997)     # - F(9995)
# F(9997) = 2*9997 + F(9995)
'''
print(10000 ** 2 + 2*9999 + 2*9997)
'''
# Ответ: 100039992


# № 5154 (Уровень: Базовый)
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = n при n > 100 000
# F(n) = F(n+1) + 5·n + 2, если n ≤ 100 000
#
# Чему равно значение функции F(3) - F(7)?

# F(3) = F(4) + 5*3 + 2
# F(4) = F(5) + 5*4 + 2
# F(5) = F(6) + 5*5 + 2
# F(6) = F(7) + 5*6 + 2
'''
print((5*3 + 2) + (5*4 + 2) + (5*5 + 2) + (5*6 + 2))
'''
# Ответ: 98


# № 4739 (Уровень: Средний)
# (А. Куканова) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = n − 10000 при n > 10000;
# F(n) = F(n + 1) + F(n + 2), если 1 ≤ n ≤ 10000.
#
# Чему равно значение выражения F(12345) × (F(10) − F(12)) / F(11) + F(10101)?
'''
def F(n):
    if n > 10000:
        return n - 10000
    if 1 <= n <= 10000:
        return F(n + 1) + F(n + 2)

print(F(12345))
print(F(10101))
'''
# 2345 × (F(10) − F(12)) / F(11) + 101

# F(10) = F(11) + F(12)

# 2345 × (F(11) + F(12) − F(12)) / F(11) + 101
# 2345 × (F(11)) / F(11) + 101
# 2345 × 1 + 101
'''
print(2345 * 1 + 101)
'''
# Ответ: 2446


# Тип 15 № 33517
# Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
#
# Для какого наибольшего натурального числа А формула
#
# ДЕЛ(70, A) ∧ (ДЕЛ(x, 28) → (¬ДЕЛ(x, А) → ¬ДЕЛ(x, 21)))
#
# тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной x)?
'''
def F(x):
    return (70 % A == 0) and (x % 28 == 0) <= ((x % A != 0) <= (x % 21 != 0))

for A in range(1, 1000):
    if all(F(x) for x in range(1, 1000)):
        print(A)
'''

# Вариант 2
'''
def F(x, A):
    return (70 % A == 0) and (x % 28 == 0) <= ((x % A != 0) <= (x % 21 != 0))

for A in range(1, 1000):
    flag = True
    for x in range(1, 1000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
'''
# Ответ: 14


# Тип 15 № 9804 i
'''
# Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n.
#
# Так, например, 14 & 5 = 1110_2 & 0101_2 = 0100_2 = 4. Для какого наименьшего неотрицательного целого числа А формула
#
# x & 29 ≠ 0 → (x & 17 = 0 → x & А ≠ 0)
#
# тождественно истинна (т.е. принимает значение 1 при любом неотрицательном целом значении переменной x)?

def F(x):
    return (x & 29 != 0) <= ((x & 17 == 0) <= (x & A != 0))

for A in range(0, 1000):
    if all(F(x) for x in range(0, 1000)):
        print(A)
        break
'''
# Ответ: 12


# Тип 15 № 16045
# Для какого наибольшего целого неотрицательного числа A выражение
#
# (y + 2x ≠ 48) ∨ (A < x) ∨ (A < y)
#
# тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных x и y?
'''
def F(x, y):
    return ((y + 2*x) != 48) or (A < x) or (A < y)

for A in range(0, 1000):
    if all(F(x, y) for x in range(0, 100) for y in range(0, 100)):
        print(A)
'''
# Ответ: 15

# Тип 15 № 29203 i
# Для какого наименьшего целого неотрицательного числа А выражение

# (3x + 7y < A) ∨ (x ≥ y) ∨ (y > 6)
#
# тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?
'''
def F(x, y):
    return (3*x + 7*y < A) or (x >= y) or (y > 6)

for A in range(0, 1000):
    if all(F(x, y) for x in range(0, 100) for y in range(0, 100)):
        print(A)
        break
'''
# Ответ: Ответ: 58


# Тип 15 № 7763 i
# На числовой прямой даны два отрезка: P = [5, 30] и Q = [14, 23].
# Укажите наибольшую возможную длину промежутка A, для которого формула
#
# ((x ∈ P) ≡ (x ∈ Q)) → ¬(x ∈ A)
#
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x):
    P = 5 <= x <= 30
    Q = 14 <= x <= 23
    A = a1 <= x <= a2
    return (P == Q) <= (not A)

M = []
A = [i/4 for i in range(1*4, 30*4)]
for a1 in A:
    for a2 in A:
        if all(F(x) for x in A):
            M.append(a2-a1)
print(max(M))
'''
# Ответ: округляем(8.75) = 9



# Тип 15 № 47012
'''
# На числовой прямой даны два отрезка: P=[69;91] и Q=[77;114].
# Укажите наименьшую возможную длину такого отрезка A, для которого формула
#
# (x∈P)→(¬((x∈P)≡(x∈Q))∨((x∈Q)→(x∈A)))
#
# тождественно истинна (т.е. принимает значение 1 при любом значении переменной х).

def F(x):
    P = 69 <= x <= 91
    Q = 77 <= x <= 114
    A = a1 <= x <= a2
    return P <= ((not(P == Q)) or (Q <= A))

M = []
A = [i/4 for i in range(60*4, 120*4)]
for a1 in A:
    for a2 in A:
        if all(F(x) for x in A):
            M.append(a2-a1)  # конец - начало = длина отрезка
print(min(M))
'''

# endregion Урок:  ******************************************************************************


# todo: Богдан = [2, 5, 8, 12, 14+, 16.2, 23]
# на прошлом уроке: Прорешали 16 номера на глубину рекурсии и прорешали 15 номер всех типов
# на следующем уроке: