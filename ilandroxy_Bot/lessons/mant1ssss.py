
# region Домашка: ******************************************************************
'''
def draw_triangle():
    for n in range(1, 10):
        print('*' * n)
    pass

draw_triangle()
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 16 №27413
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n) = 1 при n = 1;
# F(n) = n + F(n − 1), если n — чётно;
# F(n) = 2 × F(n − 2), если n> 1 и при этом n — нечётно.
#
# Чему равно значение функции F(26)?
'''
def F(n):
    if n == 1:
        return 1
    if n % 2 == 0:
        return n + F(n - 1)
    if n % 2 != 0 and n > 1:
        return 2 * F(n - 2)


print(F(26))
'''
# Ответ: 4122


# Тип 16 №36871
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное
# число, задан следующими соотношениями:

# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.

# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n) = 3?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n-1)


count = 0
for n in range(1,1000+1):
    if F(n) == 3:
        count += 1
print(count)
'''
# Ответ: 120


# Тип 16 №55812
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n)=n, если n≥2025,
# F(n)=n+3+F(n+3), если n<2025.
#
# Чему равно значение выражения F(23)−F(21)?
'''
def F(n):
    if n >= 2025:
        return n
    if n < 2025:
        return n + 3 + F(n+3)


print(F(23) - F(21))
'''
# Ответ: 1338


# Тип 16 №59721
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n)=n, если n=1;
# F(n)=n−1+F(n−1), если n>1.

# Чему равно значение выражения F(2024)−F(2022)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n == 1:
        return n
    if n > 1:
        return n-1+F(n-1)


print(F(2024) - F(2022))
'''
# Ответ: 4045

# RecursionError: maximum recursion depth exceeded



# Тип 16 №6779
# Алгоритм вычисления значений функций F(n) и G(n), где n — натуральное число, задан следующими соотношениями:
#
# F(1) = 1; G(1) = 1;
# F(n) = F(n – 1) – G(n – 1), G(n) = F(n–1) + G(n – 1), при n ≥ 2
#
# Чему равно значение величины F(5)/G(5)? В ответе запишите только натуральное число
'''
def F(n):
    if n == 1:
        return 1
    if n >= 2:
        return F(n - 1) - G(n - 1)


def G(n):
    if n == 1:
        return 1
    if n >= 2:
        return F(n - 1) + G(n - 1)


print(F(5)/G(5))
'''
# Ответ: 1


# Тип 23 №3623

# 1. прибавь 3,
# 2. умножь на 3.
#
# Сколько есть программ, которые число 3 преобразуют в число 93?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+3, b) + F(a*3, b)


print(F(3, 93))
'''

'''
def F(a, b):
    if a >= b:
        return a == b
    return F(a+3, b) + F(a*3, b)


print(F(3, 93))
'''

# Ответ: 28


# Тип 23 № 13418
# 1. прибавь 1
# 2. сделай нечётное
#
# Сколько существует таких программ, которые число 1 преобразуют в число 27,
# причём траектория вычислений не содержит число 26?
'''
def F(a, b):
    if a > b or a == 26:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2 + 1, b)


print(F(1, 27))
'''
'''
def F(a, b):
    if a >= b or a == 26:
        return a == b
    return F(a+1, b) + F(a*2 + 1, b)


print(F(1, 27))
'''


# Тип 23 №18724
# 1. Прибавить 1
# 2. Умножить на 3
# 3. Прибавить 2

# Сколько существует программ, которые преобразуют исходное число 1 в число 15
# и при этом траектория вычислений содержит числа 10 и 12?

'''
def F(a, b):
    if a >= b:
        return a == b
    return F(a+1, b) + F(a*3, b) + F(a+2, b)


print(F(1, 10) * F(10, 12) * F(12, 15))

'''

# endregion Урок: ******************************************************************


# todo: Марк = [2.1, 6.1, 5.1, 8.1, 12.1, 14.1, 16.1, 23.1]
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
