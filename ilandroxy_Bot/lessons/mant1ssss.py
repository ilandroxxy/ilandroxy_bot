
# region Домашка: ******************************************************************
'''
maxi = -9999
r = 0
for n in range(301, 1000, 1):
    s = '5' * n
    while '55555' in s:
        s = s.replace('55555', '88', 1)
        s = s.replace('888', '55', 1)
    if maxi < s.count("5"):
        maxi = s.count('5')
        r = n
print(r)
'''

'''
s = '0' * 19 + '1' * 13 + '2'* 17
while '10' in s or '20' in s:
    if '20' in s:
        s= s.replace('20', '00', 1)
    else:
        s = s.replace('10', '200', 1)
print(s.count('0'))
'''
'''
from itertools import permutations
maxi = 0
M = ['2' * 17, '1' * 13, '0' * 19]
for var in permutations(M):
    s = ''.join(var)

    while '10' in s or '20' in s:
        if '20' in s:
            s = s.replace('20', '00', 1)
        else:
            s = s.replace('10', '200', 1)
    maxi = max(maxi, s.count('0'))
print(maxi)
'''


'''
from itertools import permutations
for var in permutations('0' * 19 + '1' * 13 + '2' * 17):
    s = ''.join(var)
    print(s)
'''
# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# На вход приведённой ниже программе поступает строка, начинающаяся с символа «>»,
# затем содержащая 20 цифр 1, 15 цифр 2 и 40 цифр 3,
# расположенных в произвольном порядке и оканчивающаяся символом «<».

# ПОКА НЕ нашлось(><)
#    заменить(>1, 3>)
#    заменить(>2, 2>)
#    заменить(>3, 1>)
#    заменить(3<, <1)
#    заменить(2<, <3)
#    заменить(1<, <2)

# Определите максимальную сумму числовых значений цифр строки,
# получившейся в результате выполнения программы.
'''
import itertools
R = []
M = ['1' * 20, '2' * 15, '3' * 40]
for var in itertools.permutations(M):
    s = '>' + ''.join(var) + '<'

    while '><' not in s:
        s = s.replace('>1', '3>', 1)
        s = s.replace('>2', '2>', 1)
        s = s.replace('>3', '1>', 1)
        s = s.replace('3<', '<1', 1)
        s = s.replace('2<', '<3', 1)
        s = s.replace('1<', '<2', 1)
    summ = sum([int(x) for x in s if x.isdigit()])
    R.append(summ)
print(max(R))
'''


# Тип 12 №28550
# Дана программа для Редактора:

# ПОКА нашлось (21)
#   заменить (21, 5)
#
# Исходная строка содержит десять единиц и некоторое количество двоек, других цифр нет,
# точный порядок расположения единиц и двоек неизвестен. После выполнения программы получилась строка с суммой цифр 34.
# Какое наименьшее количество двоек могло быть в исходной строке?
'''
from itertools import permutations
for n in range(1, 10):
    for var in permutations('1' * 10 + '2' * n):
        s = ''.join(var)

        while '21' in s:
            s = s.replace('21', '5', 1)

        if sum([int(x) for x in s]) == 34:
            print(n)
            exit()
'''


# Тип 5 №58472
# Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. Если число N делится на 5, в конец двоичной записи добавляется двоичный код числа 5,
# в противном случае в конец двоичной записи добавляется 1.
# 3. Если полученное на предыдущем шаге число делится на 7, в конец двоичной записи добавляется
# двоичный код числа 7, в противном случае в конец двоичной записи добавляется 1.
# 4. Результатом работы алгоритма становится десятичная запись полученного числа R.
#
# Определите наибольшее возможное значение N, для которого в результате работы алгоритма получается R < 1728404.
'''
for n in range(1, 100000000):

    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.

    if n % 5 == 0:
        s += bin(5)[2:]  # 2. Если число N делится на 5, в конец двоичной записи добавляется двоичный код числа 5,
    else:
        s += '1'  # в противном случае в конец двоичной записи добавляется 1.

    if int(s, 2) % 7 == 0:
        s += bin(7)[2:]  # 3. Если полученное на предыдущем шаге число делится на 7, в конец двоичной записи добавляется двоичный код числа 7
    else:
        s += '1'  # в противном случае в конец двоичной записи добавляется 1

    r = int(s, 2)  # 4. Результатом работы алгоритма становится десятичная запись полученного числа R.

    if r < 1728404:
        print(n)
'''
# Ответ: 432098



# № 10658 (Уровень: Средний)
# (Н. Сафронов) На вход алгоритма подаётся натуральное число N > 10.
# Алгоритм строит по нему новое число R следующим образом:
# 1. Строится троичная запись числа N.
# 2. К этой записи дописываются разряды по следующему правилу.
# Если количество четных цифр в полученной записи больше чем нечетных, слева дописывается 22, иначе 11.
# 3. Полученная таким образом запись является троичной записью искомого числа R.
# Укажите минимальное значение R, больше  чем 100, которое может получится в результате
# работы алгоритма. В ответе запишите это число в десятичной системе счисления.
'''
R = []
for n in range(11, 100000):

    s = ''
    while n > 0:
        s += str(n % 3)  # 1. Строится троичная запись числа N.
        n //= 3
    s = s[::-1]
    # chet = [x for x in s if int(x) % 2 == 0]
    if s.count('0') + s.count('2') > s.count('1'):
        s = '22' + s
    else:
        s = '11' + s

    r = int(s, 3)
    if r > 100:
        R.append(r)
print(min(R))
'''
# ответ 120

# endregion Урок: ******************************************************************


# todo: Марк = [2.1, 6.1, 5.1, 8.1, 12.1, 14.1]
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
