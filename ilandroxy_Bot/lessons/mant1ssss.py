# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************


# Теория:

# Адрес сети = IP-адрес узла & Маска (побитовая конъюнкция)

# ip = состоит из четыерх чисел на каждое из которых выделено по 1 байту (8 бит)
# В связи с этим каждое такое число лежит в диапазоне от 0 (00000000) до 255 (11111111)

# Маска имеет длину 32 бита и вид: 1111..000


# Тип 13 №4854
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 224.31.249.137
# Маска: 255.255.240.0
'''
knot = '.'.join([bin(int(x))[2:].zfill(8) for x in '224.31.249.137'.split('.')])
mask = '.'.join([bin(int(x))[2:].zfill(8) for x in '255.255.240.0'.split('.')])

address = ''
for i in range(len(knot)):
    if knot[i] == '1' and mask[i] == '1':
        address += '1'
    elif knot[i] == '.' and mask[i] == '.':
        address += '.'
    else:
        address += '0'

print(knot, mask, address, sep='\n')
# 11100000.00011111.11111001.10001001
# 11111111.11111111.11110000.00000000
# 11100000.00011111.11110000.00000000

print([int(x, 2) for x in address.split('.')])
'''
# [224, 31, 240, 0]
# Ответ: DFCH


# Тип 13 №4854
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 224.31.249.137
# Маска: 255.255.240.0
'''
from ipaddress import *
net = ip_network('224.31.249.137/255.255.240.0', 0)
print(net)  # 224.31.240.0/20, где 20 - число единиц в маске
'''
# Ответ: DFCH


# Тип 13 №5367
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 194.128.208.64
# Маска: 255.255.224.0
'''
from ipaddress import *
net = ip_network('194.128.208.64/255.255.224.0', 0)
print(net)  # 194.128.192.0/19
'''
# Ответ: HBAF


# Тип 13 №14271
# Для узла с IP-адресом 93.138.88.47 адрес сети равен 93.138.80.0.
# Чему равен третий слева байт маски? Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'93.138.88.47/{mask}', 0)
    print(net, net.netmask)
    # 93.138.80.0/20 255.255.240.0
'''
# Ответ: 240


# Тип 13 №27270
# Для узла с IP-адресом 84.77.95.123 третий слева байт маски равен 224.
# Чему равен третий байт адреса сети для этого узла?
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'84.77.95.123/{mask}', 0)
    print(net, net.netmask)

    # 84.77.64.0/19 255.255.224.0
'''
# Ответ: 64


# Тип 13 №10386
# Для узла с IP-адресом 111.81.208.27 адрес сети равен 111.81.192.0.
# Чему равно наименьшее возможное значение третьего слева байта маски? Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'111.81.208.27/{mask}', 0)
    print(net, net.netmask)

    # 111.81.192.0/18 255.255.192.0
    # 111.81.192.0/19 255.255.224.0
'''
# Ответ: 192


# Тип 13 №13569
# Для узла с IP-адресом 218.159.208.24 адрес сети равен 218.159.192.0.
# Чему равно наибольшее возможное значение третьего слева байта маски? Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'218.159.208.24/{mask}', 0)
    print(net, net.netmask)
    
    # 218.159.192.0/18 255.255.192.0
    # 218.159.192.0/19 255.255.224.0
'''
# Ответ: 224


# Тип 13 №18714
# Для узла с IP-адресом 113.191.37.168 адрес сети равен 113.191.37.160.
# Чему равно наибольшее возможное количество единиц в последнем байте этой маске сети?
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'113.191.37.168/{mask}', 0)
    print(net, net.netmask, '.'.join([bin(int(x))[2:].zfill(8) for x in str(net.netmask).split('.')]))

    # 113.191.37.160/27 255.255.255.224 11111111.11111111.11111111.11100000
    # 113.191.37.160/28 255.255.255.240 11111111.11111111.11111111.11110000
    # 28 - 8 - 8 - 8 = 4
'''
# Ответ: 4


# Тип 13 №13623
# Для узла с IP-адресом 93.138.70.47 адрес сети равен 93.138.64.0.
# Каково наибольшее возможное общее количество единиц во всех четырёх байтах маски?
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'93.138.70.47/{mask}', 0)
    print(net, net.netmask)

    # 93.138.64.0/18 255.255.192.0
    # 93.138.64.0/19 255.255.224.0
    # 93.138.64.0/20 255.255.240.0
    # 93.138.64.0/21 255.255.248.0
'''
# Ответ: 21


# Тип 13 №14773
# Для узла с IP-адресом 93.138.161.94 адрес сети равен 93.138.160.0.
# Какое наименьшее количество нулей может быть в двоичной записи маски?
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'93.138.161.94/{mask}', 0)
    print(net, mask, 32-mask)

    # 93.138.160.0/19 19 13
    # 93.138.160.0/20 20 12
    # 93.138.160.0/21 21 11
    # 93.138.160.0/22 22 10
    # 93.138.160.0/23 23 9
'''
# Ответ: 9


# Тип 13 №15107
# Для узла с IP-адресом 93.138.164.49 адрес сети равен 93.138.160.0.
# Для скольких различных значений маски это возможно?
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'93.138.164.49/{mask}', 0)
    print(net)
    # 93.138.160.0/19 
    # 93.138.160.0/20 
    # 93.138.160.0/21 
'''
# Ответ: 3


# Тип 13 №16888
# Для узла с IP-адресом 98.162.71.94 адрес сети равен 98.162.71.64.
# Чему равно наименьшее количество возможных адресов в этой сети?
# Примечание. Адрес сети и широковещательный адрес необходимо учитывать при подсчёте.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'98.162.71.94/{mask}', 0)
    print(net, net.num_addresses)  # количество возможных адресов в этой сети
    # 98.162.71.64/26 64
    # 98.162.71.64/27 32
'''
# Ответ: 32


# Для узла с IP-адресом 98.162.71.94 адрес сети равен 98.162.71.64.
# Чему равно наименьшее количество возможных адресов в этой сети?
# Примечание. Адрес сети и широковещательный адрес необходимо не учитывать при подсчёте.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'98.162.71.94/{mask}', 0)
    print(net, net.num_addresses)  # количество возможных адресов в этой сети
    # 98.162.71.64/26 64 - 2 = 62
    # 98.162.71.64/27 32 - 2 = 30
'''
# Ответ: 30


# Тип 13 №3541
# Для некоторой подсети используется маска 255.255.248.0
# Сколько различных адресов компьютеров допускает эта маска?
# Примечание. На практике для адресации компьютеров не используются два адреса: адрес сети и широковещательный адрес.
'''
from ipaddress import *
net = ip_network('0.0.0.0/255.255.248.0', 0)
print(net.num_addresses - 2)
'''
# Ответ: 2046


# Тип 13 №17330
# Узлы с IP-адресами 98.162.71.150 и 98.162.71.140 находятся в одной сети.
# Чему равно наибольшее количество возможных единиц в маске этой сети?
'''
from ipaddress import *
for mask in range(32+1):
    net1 = ip_network(f'98.162.71.150/{mask}', 0)
    net2 = ip_network(f'98.162.71.140/{mask}', 0)
    if net1 == net2:
        print(mask)
        # 26
        # 27
'''
# Ответ: 27


# Тип 13 №63029
# Узлы с IP-адресами 120.91.176.213 и 120.91.174.205 находятся в разных сетях.
# Укажите наименьшее возможное значение третьего слева байта маски этой сети.
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net1 = ip_network(f'120.91.176.213/{mask}', 0)
    net2 = ip_network(f'120.91.174.205/{mask}', 0)
    if net1 != net2:
        print(net1.netmask)
        # 255.255.240.0
        # 255.255.248.0
        # 255.255.252.0
        # 255.255.254.0
'''
# Ответ: 240


# Тип 13 №60255
# Сеть задана IP-адресом 192.168.32.160 и маской сети 255.255.255.240.
# Сколько в этой сети IP-адресов, для которых сумма единиц в двоичной записи IP-адреса чётна?
'''
from ipaddress import *
net = ip_network('192.168.32.160/255.255.255.240', 0)

cnt = 0
for ip in net:
    s = f'{ip:b}'  # перевод в двоичную запись
    if s.count('1') % 2 == 0:
        cnt += 1
print(cnt)
'''
# Ответ: 8

print(f'{8:b}')  # 1000


# Тип 24 №61370
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите максимальное количество идущих подряд символов, среди которых ровно по одному разу встречаются буквы A и B.
'''
s = open("24.txt").readline()
s = s.replace('A', 'A ').replace('B', 'B ').split(' ')
print(s)
maxi = 0
for i in range(len(s) - 2):
    r = ''.join(s[i:i+3])[:-1]
    # r = s[i] + s[i + 1] + s[i + 2][:-1]
    # 'RMDWGZYEFQURB', 'KQNNRWA', 'VFOOGA'  - справа убираем A
    # 'RMDWGZYEFQURBKQNNRWAVFOOG'
    # if r.count('A') == 1 and r.count('B') == 1:
    if 'A' in r and 'B' in r:
        maxi = max(maxi, len(r))
print(maxi)
'''
# Ответ: 182

# Тип 24 №63040
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите максимальное количество идущих подряд символов, среди которых каждая из букв A и B
# встречается не более двух раз.
'''
s = open("24.txt").readline()
s = s.replace('A', 'A ').replace('B', 'B ').split(' ')
maxi = 0
for i in range(len(s) - 4):
    r = ''.join(s[i:i+5])[:-1]
    # 'LRKMXZPVSKUIB', 'UUGORTGGXWB', 'TYRHYOQGRNEA', 'IKA', 'VMQFOHHVZKWEXCNTCDKJWQVTVXZWRKA'
    if r.count('A') == 2 and r.count('B') == 2:
        maxi = max(maxi, len(r))
print(maxi)
'''
# Ответ: 222


# endregion Урок: *******************************************************************


# region Разобрать: *************************************************************

# todo разобрать КЕГЭ № 11636 (Уровень: Сложный)

# todo разобрать Марк № 14100 (Уровень: Средний)
# (П. Говоров) В файле содержится строка длиной не более 106 из букв A,B,C.
# Определите в прилагаемом файле максимальную длину подпоследовательности, составленную конкатенацией из
# следующих подстрок (могут использоваться любое количество раз): ABA, CB, AC, BB, ABC, BCB, BA, AB.
'''
s = open('24.txt').readline()
dp = [0] * len(s)
prim = ['ABA', 'CB', 'AC', 'BB', 'ABC', 'BCB', 'BA', 'AB']

for i in range(1, len(s)):
    for j in prim:
        if i >= len(j) - 1:
            if s[i - len(j) + 1:i + 1] == j:
                dp[i] = max(dp[i], dp[i - len(j)] + len(j))
print(max(dp))


# наше решение:
s = open('24.txt').readline()
maxi = 0
for a in "ABA CB AC BB ABC BCB BA AB".split():
    s = s.replace(a, '*' * len(a))
s = s.replace('A', ' ').replace('B', ' ').replace('C', ' ')
print(max([len(x) for x in s.split()]))
'''


# todo Разобрать Марк почему ответ не сходится № 13715 (Уровень: Средний)
# Текстовый файл состоит из символов A, B, C, D и E.
#
# Определите в прилагаемом файле максимальное количество идущих подряд символов,
# среди которых комбинация символов AB встречается ровно 50 раз.
'''
s = open('24.txt').readline().split('AB')
maxi = 0
for i in range(len(s)-50):
    r = 'AB'.join(s[i:i+51])
    print(len(r), r.count('AB'), r)
    maxi = max(maxi, len(r))
print(maxi)
'''

# todo Придумать как быть с незначащими нулями Марк № 10724 (Уровень: Базовый)
'''
s = open('24.txt').readline()
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')[16:]
for a in alphabet:
    s = s.replace(a, ' ')
maxi = 0
for x in s.split():
    if x[0] != '0':
        if maxi < len(x):
            maxi = len(x)
            print(maxi, x)
print(maxi)
'''

# endregion Разобрать: *************************************************************


# Марк = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25]
# КЕГЭ  = [5, 8, 9, 14, 16, 23, 24, 25]
# на следующем уроке: 8, 12, 15, 17
