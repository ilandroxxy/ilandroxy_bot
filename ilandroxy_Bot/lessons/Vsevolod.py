
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# Тип 5 № 16435 i
# Автомат обрабатывает натуральное число N > 1 по следующему алгоритму.
#
# 1. Строится двоичная запись числа N.
# 2. Последняя цифра двоичной записи удаляется.
# 3. Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если четным — 01.
# 4. Результат переводится в десятичную систему и выводится на экран.
#
# Какое число нужно N ввести в автомат, чтобы в результате получилось R = 2017?
'''
# Вариант 1 через списки
for n in range(1, 10000):
    temp = n

    M = []
    while n > 0:
        M.append(n % 2)  # 1. Строится двоичная запись числа N.
        n //= 2
    M.reverse()

    del M[-1]  # 2. Последняя цифра двоичной записи удаляется.

    if temp % 2 != 0:
        M.append(1)
        M.append(0)  # 3. Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если четным — 01.
    else:
        M += [0, 1]
        # M = M + [0, 1]

    r = 0
    M.reverse()
    for i in range(0, len(M)):  # 4. Результат переводится в десятичную систему и выводится на экран.
        r += M[i] * 2 ** i

    if r == 2017:  # Какое число нужно N ввести в автомат, чтобы в результате получилось R = 2017?
        print(temp)
        break

# Вариант 2 через строки
for n in range(1, 10000):

    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.

    s = s[:-1]  # 2. Последняя цифра двоичной записи удаляется.

    if n % 2 != 0:
        s += '10'  # 3. Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если четным — 01.
    else:
        s = s + '01'

    r = int(s, 2)  # 4. Результат переводится в десятичную систему и выводится на экран.
    # int(строка, система счисления) - перевести строку из n системы счисления в десятичную систему

    if r == 2017:  # Какое число нужно N ввести в автомат, чтобы в результате получилось R = 2017?
        print(n)
        break

# import string
# print(string.ascii_uppercase)  вывести английский алфавит  в верхнем регистре

# Вариант 3 создадим свою универсальную функцию
def my_bin(n, x):
    alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    M = []
    while n > 0:
        M.append(alphabet[n % x])  # 1. Строится двоичная запись числа N.
        n //= x
    M.reverse()
    return ''.join(M)

for n in range(1, 10000):
    s = my_bin(n, 2)

    s = s[:-1]  # 2. Последняя цифра двоичной записи удаляется.

    if n % 2 != 0:
        s += '10'  # 3. Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если четным — 01.
    else:
        s = s + '01'

    r = int(s, 2)  # 4. Результат переводится в десятичную систему и выводится на экран.
    # int(строка, система счисления) - перевести строку из n системы счисления в десятичную систему

    if r == 2017:  # Какое число нужно N ввести в автомат, чтобы в результате получилось R = 2017?
        print(n)
        break
'''
# Ответ: 1008

# n = int(input('n: '))
# x = int(input('x: '))
# temp = my_bin(n, x)
# print(temp)
# print(int(temp, x))




# Тип 5 № 17324 i
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится двоичная запись числа N.
# 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.
# Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.
# 3. Полученное число переводится в десятичную запись.
# 4. Новое число вычитается из исходного, полученная разность выводится на экран.
#
# Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 10 до 1000?
'''
A = set()  # типа коллекций - множество (не может хранить одинаковых элементов)
for n in range(10, 1000+1):
    s = bin(n)[2:]

    s = s[1:]

    r = int(s, 2)

    A.add(n - r)

print(len(A))
'''
# Ответ: 7

L = []
L = list()

T = (1, 2, 3)
T = tuple()
T = ()

s = {1, 2, 3}  # set()
S = set()  # создание пустого множества

D = {}  # dict() - создание пустого словаря
D = dict()


# Тип 8 № 7457 i
# Все 4-буквенные слова, составленные из букв К, Л, Р, Т, записаны в алфавитном порядке и пронумерованы.
# Вот начало списка:
# 1. КККК
# 2. КККЛ
# 3. КККР
# 4. КККТ
# Запишите слово, которое стоит под номером 67.
'''
# Вариант 1
s = sorted([i for i in 'КЛРТ'])  # записали в алфавитном порядке
s = 'КЛРТ'
k = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                temp = a + b + c + d
                if k == 67:
                    print(k, temp)
                k += 1

# Вариант 2
s = 'КЛРТ'
M = ['0']
for a in s:
    for b in s:
        for c in s:
            for d in s:
                temp = a + b + c + d
                M.append(temp)
print(M[67])
'''
# Ответ: ЛККР


# Тип 8 № 3200 i
# Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:
# 1. ААААА
# 2. ААААО
# 3. ААААУ
# 4. АААОА
# Укажите номер первого слова, которое начинается с буквы У.
'''
s = 'АОУ'
k = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if a == 'У':
                        print(k, temp)
                        exit()
                    k += 1
'''
# Ответ: 163


# Тип 8 № 27236
# Андрей составляет 4-буквенные коды из букв А, Н, Д, Р, Е, Й.
# Каждую букву можно использовать любое количество раз, при этом
# код не может начинаться с буквы Й и должен содержать хотя бы одну гласную.
# Сколько различных кодов может составить Андрей?
'''
s = 'АНДРЕЙ'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                temp = a + b + c + d
                if a != 'Й' and ('А' in temp or 'Е' in temp):
                    count += 1
print(count)
'''
# Ответ: 888


# Тип 8 № 27379 i
# Виктор составляет 4-буквенные коды из букв В, И, К, Т, О, Р.
# Каждую букву можно использовать не более одного раза, при этом нельзя ставить рядом две гласные и две согласные.
# Сколько различных кодов может составить Виктор?
'''
s = 'ВИКТОР'
s1 = 'ИО'
s2 = 'ВКТР'
count = 0
for a in s1:
    for b in s2:
        for c in s1:
            for d in s2:
                L = [a, b, c, d]
                if len(set(L)) == len(L):
                    count += 1
print(count*2)
'''
# Ответ: 48

# Тип 8 № 26953
# Найдите количество пятизначных восьмеричных чисел, в которых все цифры различны и никакие две четные или нечетные не стоят рядом.
'''
s = '01234567'
s1 = '1357'
s2 = '0246'
count = 0
for a in s1:
    for b in s2:
        for c in s1:
            for d in s2:
                for e in s1:
                    L = [a, b, c, d, e]
                    if len(set(L)) == len(L):
                        count += 1

for a in '246':
    for b in s1:
        for c in s2:
            for d in s1:
                for e in s2:
                    L = [a, b, c, d, e]
                    if len(set(L)) == len(L):
                        count += 1
print(count)
'''
# Ответ: 504.

# endregion Урок: ******************************************************************



# todo: Всеволод = [2, 5.1, 14]
# на прошлом уроке: Разбирали 5.2 и номера 8 всех типов
# на следующем уроке: Разбираем 12 номер и переходим к функциям. Хотя функции Всеволод изучает сам на Степике.
