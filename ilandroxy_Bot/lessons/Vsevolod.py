
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# № 6637 Пробник ИМЦ СПб (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10, найдите все числа,
# соответствующие маске 1?2139*4, делящиеся на 3052 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 3052.

# print(10**10)
# print('1?2139***4')
'''
import itertools
M = []
for l in range(0, 3+1):
    for s in itertools.product('0123456789', repeat=l):
        slovo = ''.join(s)
        M.append(slovo)

R = []
for x in '0123456789':  # '?'
    for y in M:  # '*'
        A = int(f'1{x}2139{y}4')
        if A < 10**10:
            if A % 3052 == 0:
                R.append([A, A // 3052])

for x in sorted(R):
    print(*x)
'''
# Показать ответ
# 1421398804 465727
# 1521397584 498492
# 1621396364 531257
# 1721395144 564022
# 1821393924 596787
# 1921392704 629552


# № 6636 Пробник ИМЦ СПб (Уровень: Базовый)
# Текстовый файл состоит из цифр 1, 2, 3, 4 и 5.
# Определите максимальное количество идущих подряд пар символов вида:
# четная цифра + нечетная цифра в прилагаемом файле.
'''
s = open('24.txt').readline()
for x in '135':
    s = s.replace(x, '*')
for x in '24':
    s = s.replace(x, '+')
s = s.replace('+*', 'A')
for x in '+*':
    s = s.replace(x, ' ')
M = [len(i) for i in s.split()]
print(max(M))


s = open('24.txt').readline()
s = s.replace('3', '1').replace('5', '1')  # все нечетные - заменили на 1
s = s.replace('4', '2')  # все четные - заменили на 2
s = s.replace('21', '*')  # все подходящие пары, заменили на *
s = s.replace('1', ' ').replace('2', ' ')  # после замены удалили все лишние символы
M = [len(i) for i in s.split()]  # взяли длины строк разбитые по пробелам
print(max(M))  #  вывели максимальную длину
'''
# Ответ: 10


# Тип 23 № 11318
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Умножить на 3
#
# Сколько существует программ, для которых при исходном числе 2 результатом является число 26
# и при этом траектория вычислений содержит число 12 и не содержит число 22?
'''
def F(a, b):
    if a > b or a == 22:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a*3, b)

print(F(2, 12) * F(12, 26))


def F(a, b):
    if a >= b or a == 22:
        return a == b
    return F(a+1, b) + F(a*2, b) + F(a*3, b)

print(F(2, 12) * F(12, 26))
'''


# № 6635 Пробник ИМЦ СПб (Уровень: Средний)
# Исполнитель Троечка преобразует число, записанное на доске. У Троечки есть две команды:
# 1. Вычесть 3
# 2. Умножить на -3
#
# Первая команда уменьшает число на 3, вторая команда умножает его на –3.
# Сколько различных отрицательных результатов можно получить из исходного числа 333
# в ходе исполнения программы, содержащей ровно 13 команд?
'''
my_set = set()
def F(a, h):
    if h == 13:
        if a < 0:
            my_set.add(a)
        return 0
    else:
        return F(a-3, h+1) + F(-3*a, h+1)

F(333, 0)
print(len(my_set))
'''
# Показать ответ: 2224

# endregion Урок: ******************************************************************


# todo: Всеволод = [1, 2, 3, 4, 5.1, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19-21, 22, 23, 24, 25]
# на прошлом уроке: Начали решать Пробник ИМЦ СПб, номера: 25, 24, 23
# на следующем уроке:
