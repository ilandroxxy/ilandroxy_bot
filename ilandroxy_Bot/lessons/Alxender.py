# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# № 933 Джобс 08.02.2021 (Уровень: Сложный)
# Исполнитель Кампухтер преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 3
# 2. Умножить на 3
#
# Сколько различных чисел положительных четных чисел, меньших 100, может получить исполнитель из числа 3?
'''
S = []
def F(a, b):
    if a >= b:
        return a == b
    if a % 2 == 0:
        S.append(a)
    return F(a+3, b) + F(a*3, b)


F(3, 99)
print(len(set(S)), set(S))
'''

'''
S = []
S2 = []
S3 = []

def F(a, b):
    S.append(a)
    if a >= b:
        S3.append(a)
        return a == b
    S2.append(a)
    return F(a+3, b) + F(a*3, b)


print(F(3, 99))
print(set(S))  # сколько всего различных чисел было перебрано в процессе программы
print(set(S2))  # сколько всего различных чисел было перебрано в диапазоне 3, 99
print(set(S3))  # сколько всего различных чисел было на выходе (результатом) 
'''


#
# № 11240 (Уровень: Средний)
# (М. Ишимов) Исполнитель преобразует число на экране.
# A. Прибавить 2
# B. Возвести в квадрат
# C. Умножить на 3
#
# Сколько существует программ, для которых при исходном числе 2 результатом является число 64,
# если после выполнения команды B можно выполнить только команду A или C?
'''
def F(a, b, flag):
    if a >= b:
        return a == b
    if flag == 'B':
        return F(a+2, b, 'A') + F(a*3, b, 'C')
    return F(a+2, b, 'A') + F(a**2, b, 'B') + F(a*3, b, 'C')


print(F(2, 64, 0))


# Вариант 2
def F(a, b, flag):
    if a >= b:
        return a == b
    if flag == 1:
        return F(a+2, b, 0) + F(a*3, b, 0)
    return F(a+2, b, 0) + F(a**2, b, flag+1) + F(a*3, b, 0)


print(F(2, 64, 0))
'''


# todo № 4500 (Уровень: Сложный)
# 1. Прибавь 1
# 2. Прибавь 2
# 3. Умножь на 2
# Сколько существует программ, которые преобразуют исходное число 3 в число 79,
# и при этом траектория вычислений содержит число 11 и не содержит число 23.
# Также программа не должна содержать двух команд «Прибавь 1» подряд.
'''
def F(a, b, flag):
    if a > b or a == 23 or flag == 2:
        return 0
    if a == b:
        return 1
    return F(a+1, b, flag + 1) + F(a+2, b, 0) + F(a*2, b, 0)


print(F(3, 11, 0) * F(11, 79, 0))
'''
# Ответ: 812266767


# № 10105 Демоверсия 2024 (Уровень: Средний)
# Текстовый файл состоит из символов T, U, V, W, X, Y и Z.
# Определите в прилагаемом файле максимальное количество идущих подряд символов
# (длину непрерывной подпоследовательности), среди которых символ T встречается ровно 100 раз.
# Для выполнения этого задания следует написать программу.

# ****T*****T*****T*****T****T*****T****T*****T***
# **** ***** ***** ***** **** ***** **** ***** ***
'''
s = open('24.txt').readline().split('T')
maxi = 0
for i in range(len(s)-101):
    x = 'T'.join(s[i:i+101])
    maxi = max(maxi, len(x))
    # print(x.count('T'), x)
print(maxi)
'''
# 133


# Тип 24 №59792
# Текстовый файл состоит не более чем из 10**6 символов латинского алфавита.
# Определите минимальную подстроку, содержащую 100 символов "Т".
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline().split('T')
mini = 9999999
for i in range(len(s)-99):
    x = 'T'.join(s[i:i+99])
    mini = min(mini, len(x))
    # print(x.count('T'), x)
print(mini+2)
'''
# Ответ: 1523


# Текстовый файл состоит не более чем из 10**6 символов латинского алфавита.
# Определите минимальную подстроку, содержащую 3 символов "Т".
# Для выполнения этого задания следует написать программу.
'''
s = '**T***T****T*****T******'.split('T')
print(s)
maxi = 0
for i in range(len(s)-4):
    x = 'T'.join(s[i:i+4])
    maxi = max(maxi, len(x))
print(maxi)

s = '**T**T***T****T*****T******T'.split('T')
mini = 9999999
for i in range(len(s)-2):
    x = 'T'.join(s[i:i+2])
    print(x)
    mini = min(mini, len(x))
print(mini+2)
'''
# **T**T

# endregion Урок: ******************************************************************


# Александр = [5.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 18.1, 19-21.1, 22.1, 23.1, 24.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
