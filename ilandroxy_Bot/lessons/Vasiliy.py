# region Домашка: ************************************************************

# Тип 17 № 39246
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых хотя бы один из двух элементов делится на 5, а их сумма делится на 7.
# В ответе запишите два числа: сначала количество найденных пар, а затем — максимальную сумму элементов таких пар.

"""
file = open("17.txt")
num = file.readlines()

counter = maximum = 0

for i in range(len(num)):
    num[i] = int(num[i])

for i in range(len(num) - 1):
    if (num[i] % 5 == 0 or num[i + 1] % 5 == 0) and ((num[i] + num[i + 1]) % 7 == 0):
        counter += 1
        maximum = max(maximum, num[i] + num[i + 1])

print(counter, maximum)
"""
# Ответ: 308 18893


# Тип 17 № 47221
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от −10 000 до 10 000 включительно.
# Определите количество пар последовательности, в которых только одно число оканчивается на 3,
# а сумма квадратов элементов пары не меньше квадрата максимального элемента последовательности, оканчивающегося на 3.
# В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную из сумм квадратов элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.

"""
file = open('17.txt')
nums = [int(i) for i in file]
max_square_sum = count = max_num = 0

for x in nums:
    if x % 10 == 3:
        max_num = max(max_num, x)

for i in range(len(nums) - 1):
    check_suf = (abs(nums[i]) % 10 == 3 and abs(nums[i + 1]) % 10 != 3) \
                or (abs(nums[i]) % 10 != 3 and abs(nums[i + 1]) % 10 == 3)
    if check_suf and nums[i] ** 2 + nums[i + 1] ** 2 >= max_num**2:
        count += 1
        max_square_sum = max(max_square_sum, nums[i] ** 2 + nums[i + 1] ** 2)

print(count, max_square_sum)
"""

# Ответ: 223 189352105


# КЕГЭ № 6696 (Уровень: Базовый)
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от -100 000 до 100 000 включительно.
# Найдите такие тройки элементов, сумма которых кратна 2022 и хотя бы одно из чисел неотрицательно.
# В ответ запишите сначала количество таких троек, а затем – максимальную сумму элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-2):
    if (M[i] + M[i+1] + M[i+2]) % 2022 == 0:
        if M[i] > 0 or M[i+1] > 0 or M[i+2] > 0:
            count += 1
            maxi = max(maxi, M[i] + M[i+1] + M[i+2])
print(count, maxi)
'''
# Ответ: 7 76836


# КЕГЭ № 6360 (Уровень: Средний)
# Файл содержит последовательность целых чисел, по модулю не превышающих 10 000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, для которых выполняются следующие условия:
# – запись элементов пары заканчивается одной и той же цифрой;
# – ровно один элемент из пары делится без остатка на 7;
# – сумма квадратов элементов пары не превышает квадрат наименьшего из элементов последовательности,
# запись которых заканчивается цифрой 7.
# В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную величину суммы квадратов элементов этих пар.
'''
M = [int(i) for i in open('17.txt')]
A = [i for i in M if abs(i) % 10 == 7]
MINI = min(A)  # наименьшего из элементов последовательности, запись которых заканчивается цифрой 7
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if abs(M[i]) % 10 == abs(M[i+1]) % 10:  # – запись элементов пары заканчивается одной и той же цифрой;
        if (M[i] % 7 == 0 and M[i+1] % 7 != 0) or (M[i+1] % 7 == 0 and M[i] % 7 != 0):  # – ровно один элемент из пары делится без остатка на 7;
            if (M[i] ** 2 + M[i+1] ** 2) <= MINI ** 2:
                count += 1
                maxi = max(maxi, M[i] ** 2 + M[i+1] ** 2)
print(count, maxi)
'''
# Ответ: 102 97666192


# КЕГЭ № 6897 OpenFIPI (Уровень: Средний)
# Откройте файл электронной таблицы, содержащей в каждой строке четыре натуральных числа.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
#
# – наибольшее из четырёх чисел меньше суммы трёх других;
# – четыре числа нельзя разбить на две пары чисел с равными суммами.

# f = open('9.txt').read()
# M = [int(i) for i in f.split()]
# print(M)

# M = [48, 17, 85, 23]
# for s in itertools.permutations(M, 4):
#     print(s)

# Вариант 1
'''
import itertools
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]  # – наибольшее из четырёх чисел меньше суммы трёх других;
    if max(M) < sum(M) - max(M):
        if all((A[0] + A[1] != A[2] + A[3]) for A in itertools.permutations(M, 4)):
            count += 1
print(count)
'''
# Ответ: 2396



# 4. Тип 9 № 48457
# В каждой строке электронной таблицы записаны шесть натуральных чисел.
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
#
# — в строке встречается ровно четыре различных числа; два из них по два раза, два— по одному;
# — сумма повторяющихся чисел (без учёта повторений, то есть каждое число входит в сумму один раз)
# больше суммы неповторяющихся.
'''
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    if len(set(M)) == len(M) - 2 and all(M.count(i) <= 2 for i in M):  
        copied = sum(M) - sum(set(M))
        if copied > sum(set(M)) - copied:
            count += 1
print(count)

# 1 2 3 3 4 4
# 3 + 4 > 1 + 2
'''
# Ответ: 456


# Тип 9 № 40725
# В каждой строке электронной таблицы записаны три натуральных числа, задающих длины трёх взаимно
# перпендикулярных рёбер прямоугольного параллелепипеда. Определите, сколько в таблице троек, для которых у заданного
# ими параллелепипеда можно так выбрать три грани с общей вершиной, что сумма площадей двух из них будет меньше
# площади третьей.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if M[2] * M[1] > M[0] * M[1] + M[0] * M[2]:
        count += 1
print(count)
'''
# Ответ: 3119


# endregion Домашка: ************************************************************


# region Урок: ************************************************************


# Тип 9 № 35898
# Электронная таблица содержит результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Определите, сколько раз за время измерений результат очередного измерения оказывался ниже результата
# предыдущего на 2 и более градусов.

# ValueError: could not convert string to float: '13,7'

# M = []
# for s in open('9.txt'):
#     M += [float(i) for i in s.replace(',', '.').split()]
# print(M)
'''
count = 0
M = [float(i) for i in open('9.txt').read().replace(',', '.').split()]
for i in range(0, len(M)-1):
    # if M[i+1] - M[i] <= -2:
    if M[i] - M[i + 1] >= 2:
        count += 1
print(count)
'''
# Ответ: 458.




# Теория перебора для 17 номера

# i  0  1  2  3  4
M = [1, 2, 3, 4, 5]

# 1. В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
# 12 23 34 45
for i in range(0, len(M)-1):
    print(f'{M[i]}{M[i+1]}', end=' ')
print('\n')

# 2. Назовём тройкой три идущих подряд элемента последовательности.
# 123 234 345
for i in range(0, len(M)-2):
    print(f'{M[i]}{M[i+1]}{M[i+2]}', end=' ')
print('\n')

# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
# Вариант 1
for i in range(0, len(M)):
    for j in range(0, len(M)):
        if i < j:
            print(f'{M[i]}{M[j]}', end=' ')
    print()

# Вариант 2
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        print(f'{M[i]}{M[j]}', end=' ')
    print()

# endregion Урок: ************************************************************


# todo: Василий = [2, 3, 5, 6, 8, 9, 12, 14+, 15, 16, 17, 18, 19-21, 22, 23, 24, 25.1]
# на прошлом уроке: Рассматривали номера с домашки: 17 и 9 номера
# на следующем уроке:
