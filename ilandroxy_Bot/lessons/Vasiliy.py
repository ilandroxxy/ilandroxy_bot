
# region Домашка

# endregion Домашка


# region Урок
# (x ≡ (y ∨ z)) → (y ≡ (x ∧ w))
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x == (y or z)) <= (y == (x and w))
                if F == False:
                    print(x, y, z, w, F)
'''


'''
# Алгоритм получает на вход натуральное число N ≥ 10 и строит по нему новое число R следующим образом:
# 1. Все пары соседних цифр в десятичной записи N рассматриваются как двузначные числа (возможно, с ведущим нулём).
# 2. Из списка полученных на предыдущем шаге двузначных чисел выделяются наибольшее и наименьшее.
# 3. Результатом работы алгоритма становится разность найденных на предыдущем шаге двух чисел.
# Пример. Дано число N = 2022. Алгоритм работает следующим образом: 1. В десятичной записи выделяем двузначные числа: 20, 02, 22.
# 2. Наибольшее из найденных чисел 22, наименьшее 02.
# 3. 22–02=20.
# Результат работы алгоритма R = 20.
# При каком наименьшем N в результате работы алгоритма получится R = 44?

for n in range(10, 10000):
    M = []
    s = str(n)
    for i in range(0, len(s)-1):
        M.append(int(s[i] + s[i+1]))
    print(n, M)

    r = max(M) - min(M)

    if r == 44:
        print(n)
        break
'''
# Ответ: 159

'''
for i in range(1000000000, 10000000000000000):
    s = i
    s = s // 3
    n = 0
    k = 1
    while s > k:
        s -= k
        k *= 2
        n += 1
    if n == 29:
        print(i)
        break
'''


'''
# Дана программа для редактора:
# НАЧАЛО
# ПОКА НЕ нашлось (00)
# заменить (02, 20) заменить (03, 30) заменить (011, 1031) заменить (01, 102)
# КОНЕЦ ПОКА
# КОНЕЦ
# Известно, что исходная строка содержала ровно два нуля – на первом и на последнем месте,
# а после выполнения данной программы получилась строка, содержащая 17 единиц, 25 двоек и 4 тройки.
# Какое наибольшее количество двоек могло быть в исходной строке?

for x in range(1, 50):
    for y in range(1, 1000):
        for z in range(1, 50):
            s = '0' + '1' * x + '2' * y + '3' * z + '0'

            while '00' not in s:
                s = s.replace('02', '20')
                s = s.replace('03', '30')
                s = s.replace('011', '1031')
                s = s.replace('01', '102')
            if s.count('1') == 17 and s.count('2') == 25 and s.count('3') == 4:
                print(s)
'''

'''
def F(A, x, y):
    return ((x**2 + y ** 2) < A) or (x > 3) or (y >= 5)

for A in range(1, 1000):
    flag = True
    for x in range(1, 1000):
        for y in range(1, 1000):
            if F(A, x, y) == False:
                flag = False
                break
        if flag == False:
            break
    if flag == True:
        print(A)
        break
'''

'''
def F(n):
    if n == 0:
        return 0
    if n % 3 != 0:
        return F(n-1) + 1
    if n % 3 == 0 and n > 0:
        return F(n/3)

maxi = 0
for i in range(1_600_000_000, 1_200_000_000, -1):
    x = F(i)
    if maxi < x:
        maxi = x
        print(maxi)
'''


# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём тройкой три идущих подряд элемента последовательности.
# Определите количество таких троек, в которых все элементы имеют различные остатки от деления на 3 и при этом ровно один
# из элементов меньше среднего арифметического всех нечётных элементов последовательности.
# В ответе запишите два числа: сначала количество найденных троек, а затем – максимальную сумму элементов таких троек.

'''
f = open('17.txt')
M = [int(i) for i in f]

count = 0
maxi = 0
for i in range(0, len(M)-2):
    if len({M[i] % 3, M[i+1] % 3, M[i+2] % 3}) == 3:
        count += 1
        if maxi < (M[i] % 3) + (M[i+1] % 3) + (M[i+2] % 3):
            maxi = M[i] + M[i+1] + M[i+2]
print(count, maxi)
'''

# Исполнитель преобразует число на экране.
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Приписать 1
# Первая команда увеличивает число на экране на 1, вторая приписывает 1 в конец десятичной записи числа.
# Программа для исполнителя – это последовательность команд.
# Например, если в начальный момент на экране находится число 1, то программа 212 последовательно преобразует его в 11, 12, 121.
# Сколько существует программ, которые преобразуют исходное число 1 в число 333?

'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F((a * 10) + 1, b)

print(F(1, 333))
'''
# Ответ: 73


# Тип 23 № 35912
# Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Умножить на 3
#
# Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья— умножает на 3.
#
# Программа для исполнителя— это последовательность команд. Сколько существует программ, которые
# преобразуют исходное число 2 в число 39, и при этом траектория вычислений содержит число 13 и не содержит числа 30?


"""
def F(a, b):
    if a > b or a == 30:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a*3, b)

print(F(2, 13) * F(13, 39))
"""
# Ответ: Ответ: 75


# endregion Урок


# todo: Василий = [2, 5, 6, 8, 12, 14, 17, 24], на следующем уроке: Поразобрать 15 и новый вариант решения 6