# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

X = 5  # переменная - это способ взаимодействия с данными
# print(X, type(X))  # 5 <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(4+4))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные числа/дроби
print(7 / 2)  # 3.5

c = '5'  # str (string) - строковый тип данных содержит в себе символы, цифры, буквы, слова и тд
print(a*4, c*4)  # 20 5555

d1 = True
d2 = False  # bool (Boolean) - Элементы Булевой алгебры / Математическая логика
print(4 < 10)  # Вопрос: 4 меньше 10? - True
'''

# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# Списки содержат неограничено много значений разных типов данных
# Все элементы списка пронумерованы через индексы (начиная с нуля)
# Через индексы мы можем брать элементы и менять их

B = (1, 2, 3)  # tuple (кортеж)
# Полностью идентичен спискам, кроме момента: в кортеже нельзя менять элементы

C = {1, 2, 3, 2, 3}  # set (множество)
# В множестве не может быть двух одинаковых элементов - копии удаляются..
print(C)  # {1, 2, 3}

D = {1: 'один', 2: 'два', 3: 'три'}  # dict (словари)
# Элемент словаря состояит из двух частей: ключ и значение
# доступ к значению элемента словаря осуществлдяется через его ключ
print(D[1])  # один
D[3] = '33'
print(D)  # {1: 'один', 2: 'два', 3: '33'}
'''

'''
M = [2, 2.0, '2', True, 2+2, 7/2, '2' * 4, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: 'один', 2: 'два', 3: 'три'}]
for elem in M:
    print(elem, type(elem))
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)  # при переводе из строки нужно внимательно следить за символами и буквами
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>

# ValueError: invalid literal for int() with base 10: '5.0'
print()

A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
x = input('Введите символ: ')  # функция input() - принимает строчные переменные
print(x, type(x))  # <class 'str'>

x = int(input('Введите целое число: '))
print(x, type(x))  # <class 'int'>
'''

'''
for x in range(10):
    print(x, end='\n\n')
'''

# Базовая арифметика в Пайтон
'''
a = 7
b = 2

print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # в каждом print() есть хотя бы один '/n'

print(f'{a} / {b} = {a/b} - вещественное деление, то есть дробное\n'
      f'{a} // {b} = {a//b} - взятие целой части (без округления)\n'
      f'{a} % {b} = {a%b} - остаток от деления (в виде обыкновенной дроби)')

print()

x = 34567
print(x // 100, x % 100)

print()

print(f'Возведем число {a} в степень {b}: {a} ** {b} = {a**b} \n'
      f'Возьмем квадратный корень от числа 16: 16**(1/2) = {16**(1/2)} \n'
      f'Возьмем кубический корень от числа 27: 27**(1/3) = {27**(1/3)}')

import math  # не всегда удобно использовать библиотеки
print(math.sqrt(16))
'''

'''
print(round(10 / 4))
print(round(10 / 4, 0))
print(round(10 / 4, 1))
print(round(10 / 4, 2))
'''

# Перечислим список библиотек, которые мы будем использовать при подготовки
'''
import math  # Cодержит в себе математические функции
import turtle  # Для решения 6-го номера
import itertools  # Может пригодиться в 1, 8, 12, 17, 24, 9
import fnmatch  # Для решния 25-го номера
import ipaddress  # Для решения нового 13-го номера
import functools
import os  # Могут пригодиться в 16-ом номере
import string
print(string.ascii_uppercase)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
print(alphabet)
# ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
'''

# Как подключать и работать с библиотеками
'''
import math  # минус - нужно везде таскать .math, плюс - можно заглянуть в список функций
print(math.sqrt(16))

import math as m  # переименовали функцию в нашем файле
print(m.sqrt(16))

from math import sqrt, pow  # подключили определенные функции из библиотеки
print(sqrt(16))

from math import *  # подключили сразу все функции из библиотеки
print(factorial(5))
'''

# Что делать, если забыл что делает функция?
'''
import math

# 1.
print(math.sqrt(16))
# Использовать сочетание клавиш ctrl (cmd) + B

# 2.
print(math.sqrt.__doc__)  # Return the square root of x.

# 3.
print(help(math.sqrt))
# Help on built-in function sqrt in module math:
# 
# sqrt(x, /)
#     Return the square root of x.
# 
# None
'''


# Тип 1 №19052
# Так как таблицу и схему рисовали независимо друг от друга, то нумерация
# населённых пунктов в таблице никак не связана с буквеннымиобозначениями на графе.
# Определите, какова протяжённость дороги из пункта Д в пункт Е.
'''
import itertools

GRAPH = 'АБ БА БВ ВБ ВД ДВ БД ДБ БГ ГБ ДГ ГД ДЕ ЕД ДК КД ГК КГ ЕК КЕ'
TABLE = '14 17 24 26 36 41 42 45 46 47 54 56 57 62 63 64 65 71 74 75'

for per in itertools.permutations('АБВГДКЕ'):
      GRAPH_NEW = TABLE
      for i in range(0, 7):
            GRAPH_NEW = GRAPH_NEW.replace(str(i+1), per[i])
      if set(GRAPH.split()) == set(GRAPH_NEW.split()):
            print(per)
'''
#   1    2    3    4    5    6    7
# ('Е', 'В', 'А', 'Д', 'Г', 'Б', 'К')
# Ответ: 9

# endregion Урок: ******************************************************************


# todo: Артур = []
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
