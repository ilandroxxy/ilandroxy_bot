# region Домашка: ******************************************************************
'''
def F(A1, A2, x):
    A = A1 <= x <= A2
    P = 1 <= x <= 39
    Q = 23 <= x <= 58
    return (P <= (not Q)) <= (not A)


M = [x / 4 for x in range(0 * 4, 60 * 4)]
R = []
for A1 in M:
    for A2 in M:
        if all(F(A1, A2, x) for x in M):
            R.append(A2 - A1)
print(int(max(R)))  # 16.0 -> 16
'''
# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 25 №58533
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.
#
# Найдите все натуральные числа, не превышающие 10**10,
# которые соответствуют маске 1?2711*0 и при этом без остатка делятся на 4891.

'''
from fnmatch import *
for x in range(4891, 10**10, 4891):
    if fnmatch(str(x), '1?2711*0'):
        print(x)
'''
# Ответ:
# 1027110
# 10271100
# 102711000
# 1027110000
# 1527116930


# Тип 25 №55821
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 12??36*1, делящиеся на 273 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 273.
'''
from fnmatch import *
for x in range(273, 10**8, 273):
    if fnmatch(str(x), '12??36*1'):
        print(x, x // 273)
'''
# Ответ:
# 1271361 4657
# 12633621 46277
# 12663651 46387
# 12693681 46497



# КЕГЭ № 3901 Джобс 14.05.2022 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите 5 минимальных чисел, больших 700000, которые кратны
# 13 и не подходят ни под одну из трех масок: *0??3*, *4??2 и *1*.
# Найденные числа запишите в порядке возрастания, справа от каждого найденного числа укажите сумму значений разрядов.
'''
print(700001 % 13)
print(700002 % 13)
print(700003 % 13)
print(700004 % 13)
print(700005 % 13)
print(700006 % 13)
print(700007 % 13)
print(700008 % 13)
print(700009 % 13)
print(700010 % 13)
print(700011 % 13)
'''
'''
from fnmatch import *
k = 0
for x in range(700011, 10**10, 13):
    if not fnmatch(str(x), '*0??3*'):
        if not fnmatch(str(x), '*4??2'):
            if not fnmatch(str(x), '*1*'):
                print(x, sum([int(i) for i in str(x)]))
                k += 1
                if k == 5:
                    break
'''
# 700024 13
# 700050 12
# 700076 20
# 700089 24
# 700206 15

"""
import time
start = time.time()
'''
def divisors(x):
    div = []
    for j in range(1, x+1):
        if x % j == 0:
            div.append(j)
    return div
'''

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):  # 24: {1 2 3 4 (24**0.5) 6 8 23 24}  24 // 4 = 6
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


# print(divisors(16))  # [1, 2, 4, 8, 16]
# print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(100_000_000))  # 2.799190044403076 - старая функция
print(divisors(100_000_000))  # 0.0003299713134765625 - новая функция

end = time.time()
print(end - start)
"""


# Тип 25 №33770
# Найдите все натуральные числа, принадлежащие отрезку [106000000; 107000000],
# у которых ровно три различных чётных делителя. В ответе перечислите найденные числа в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


for x in range(106000000, 107000000+1):
    ds = divisors(x)
    ds = [i for i in ds if i % 2 == 0]
    if len(ds) == 3:
        print(x)
'''
# 106084178
# 106492418
# 106784498
# 106842962


# Тип 25 №59818
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
#
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
#
# Например маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Найдите все натуральные числа, не превосходящие 109, для которых выполнены все условия:
#
# — соответствуют маске *31*65?;
#
# — делятся на 31 и 2031 без остатка;
#
# — количество делителей числа является результатом любой степени двойки.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, справа от каждого числа их частное от деления на 2031.

# endregion Урок: ******************************************************************


# Артур = [2.1. 5.1, 6.1, 8.1, 12.1, 14.1, 15.1, 16.1, 23.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
