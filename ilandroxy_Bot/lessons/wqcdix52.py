
# Напишите программу, которая принимает год от пользователя и проверяет, является ли он високосным.
#
# Если является, программа должна вывести "Да", или "Нет", если не является високосным.
#
# Примечание. Год является високосным, если его номер кратен 4,
# но не кратен 100, или если он кратен 400.
'''
year = int(input())
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print('ДА')
else:
    print('НЕТ')
'''


# Тип 14 №18497
# Значение выражения 6*343**5 + 5*49**7 - 50 записали в системе счисления с основанием 7.
# Сколько цифр 6 содержится в этой записи?
'''
x = 6*343**5 + 5*49**7 - 50
M = []
while x > 0:
    M.append(x % 7)
    x //= 7
M.reverse()
print(M.count(6))
'''
# Ответ: 14


# Тип 14 №8104
# Сколько единиц содержится в двоичной записи значения выражения: 4**16 + 2**36 - 16?

# Вариант 1
'''
print(bin(4**16 + 2**36 - 16)[2:].count('1'))
'''

# Вариант 2
'''
x = 4**16 + 2**36 - 16
M = []
while x > 0:
    M.append(x % 2)
    x //= 2
M.reverse()
print(M.count(1))
'''
# Ответ: 29


# Тип 16 №6779
# Алгоритм вычисления значений функций F(n) и G(n), где n — натуральное число, задан следующими соотношениями:
# F(1) = 1;
# G(1) = 1;
#
# F(n) = F(n – 1) – G(n – 1),
# G(n) = F(n–1) + G(n – 1), при n ≥ 2

# Чему равно значение величины F(5)/G(5)?
# В ответе запишите только натуральное число.
'''
def F(n):
    if n >= 2:
        return F(n - 1) - G(n - 1)
    if n == 1:
        return 1

def G(n):
    if n == 1:
        return 1
    if n >= 2:
        return F(n - 1) + G(n - 1)

print(F(5)/G(5))
'''
# Ответ: 1


# Тип 25 №59773
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «∗» может задавать и пустую последовательность.
#
# Например маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Найдите все натуральные числа, не превосходящие 10**8, для которых выполнены все условия:
#
# — соответствуют маске 3?1*57;
# — делятся на 1991 без остатка;
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке
# возрастания, справа от каждого числа их частное от деления на 1991.
# Примечание. Также могло делиться на 1973.

from fnmatch import *
for x in range(1991, 10**8, 1991):
    if fnmatch(str(x), '3?1*57'):
        print(x, x//1991)


# 30117857 15127
# 31113357 15627
# 32108857 16127
# 33104357 16627


