# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 25 № 27850 i
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку
# [245690; 245756] простые числа. Выведите на экран все найденные простые числа в порядке возрастания,
# слева от каждого числа выведите его порядковый номер в последовательности. Каждая пара чисел должна быть выведена в
# отдельной строке.
'''
def F(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
    return sorted(dl)

count = 1
for x in range(245690, 245756+1):
    d = F(x)

    if len(d) == 2:
        print(count, x)
    count += 1
'''
# Ответ:
# 22 245711
# 30 245719
# 34 245723
# 52 245741
# 58 245747
# 64 245753



# Тип 25 № 38603
# Пусть M — сумма минимального и максимального натуральных делителей целого числа,
# не считая единицы и самого числа. Если таких делителей у числа нет, то значение M считается равным нулю.
#
# Напишите программу, которая перебирает целые числа, бо́льшие 700000, в порядке возрастания и ищет среди них такие,
# для которых значение M оканчивается на 8. Выведите первые пять найденных чисел и соответствующие им значения M.
#
# Формат вывода: для каждого из пяти таких найденных чисел в отдельной строке сначала выводится само число,
# затем — значение М.
'''
def F(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
    return sorted(dl)

count = 0
for x in range(700000+1, 1000000000):
    d = F(x)
    if len(d) >= 2:
        M = min(d) + max(d)
        if M % 10 == 8: # для которых значение M оканчивается на 8
            print(x, M)
            count += 1
            if count == 5:
                break
'''
# 700005 233338
# 700007 100008
# 700012 350008
# 700015 140008
# 700031 24168


# Тип 25 № 45259 i
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8,
# делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

#  12345?7?8
'''
for x in '0123456789':
    for y in '0123456789':
        A = int(f'12345{x}7{y}8')
        if A % 23 == 0:
            print(A, A//23)
'''
# Ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816



# Тип 25 № 47229
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа,
# соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.

# Ищем длину *:
# print(10**10)
# print('1?2139****4')

# 10000000000 < 1?2139****4
# 10000000000 >= 1?2139***4
'''
import itertools
M = []
for l in range(0, 3+1):  # длина *
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    for y in '0123456789':
        A = int(f'1{y}2139{x}4')
        if A % 2023 == 0:
            R.append([A, A // 2023])

for x in sorted(R):
    print(*x)
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048


#
# № 6758 Апробация 10.03.23 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**8, найдите все числа, соответствующие маске 2*5443?1,
# делящиеся на 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

# print(10**8)
# print('2*5443?1')
'''
import itertools
M = []
for l in range(0, 1+1):
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    for y in '0123456789':
        A = int(f'2{x}5443{y}1')
        if A % 23 == 0:
            R.append([A, A//23])

for x in sorted(R):
    print(*x)
'''
# Показать ответ:
# 22544301 980187
# 23544341 1023667
# 24544381 1067147
# 28544311 1241057
# 29544351 1284537



#
# № 7095 OpenFIPI (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**8, найдите все числа, соответствующие маске 1234*54,
# делящиеся на 21 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 21.

# print(10**8)
# print('1234**54')
'''
import itertools
M = []
for l in range(0, 2+1):
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    A = int(f'1234{x}54')
    if A % 21 == 0:
        R.append([A, A//21])

for x in sorted(R):
    print(*x)
'''
# Показать ответ:
# 1234254 58774
# 12341154 587674
# 12343254 587774
# 12345354 587874
# 12347454 587974
# 12349554 588074


# № 7273 OpenFIPI (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8,
# делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 23.
'''
for x in '0123456789':
    for y in '0123456789':
        A = int(f'12345{x}7{y}8')
        if A % 23 == 0:
            print(A, A//23)
'''
# Показать ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816


#
# № 6210 (Уровень: Средний)
# (Н. Сафронов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите все натуральные числа, не превосходящие 10*7,
# для которых выполняются одновременно все условия:
#
# • соответствуют маске *2?2*;
# • являются палиндромами;
# • делятся на число 53 без остатка;
# • количество делителей больше 30.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — сумму делителей.

# print(10**7)
# print('**2?2**')
'''
import itertools

def F(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
    return sorted(dl)

M = []
for l in range(0, 3+1):
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = dict()
for x in M:
    for y in '0123456789':
        for z in M:
            A = int(f'{x}2{y}2{z}')
            if A <= 10**7:
                if str(A) == str(A)[::-1]:  # • являются палиндромами;
                    if A % 53 == 0:
                        dl = F(A)
                        if len(dl) > 30:  # • количество делителей больше 30.
                            R[A] = sum(dl)

for key in sorted(R):
    print(key, R[key])
'''
# print('*2?2*')
# Показать ответ:
# 212212 508032
# 2527252 5588352
# 4282824 13789440
# 4626264 11787120
# 8125218 19595520
# 8824288 19908504

my_dict = {1: 'one', 2: 'two', 3: 'three'}
print(my_dict[2])

Students = {774094112: ['Denis.py', '21:00-22:00', 6800, 'Денис', 8, 438879394, 'Tuesday']}

print(Students[774094112])
print(f'Привет, {Students[774094112][3]} сегодня занимаемся?')

# endregion Урок: ******************************************************************


# todo: Никита3 = [2, 5, 8, 12, 14, 15, 16, 23, 25]
# на прошлом уроке: Разбирали 25 номера с масками, прорешали все задачи РЕШУ ЕГЭ и задачи с крайних пробников
# на следующем уроке: Разбирать 17 и 9 номера на работу с .txt
