# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Типы 17 номера

M = [1, 2, 3, 4, 5]

# 1. Назовём парой два идущих подряд элемента последовательности.
# 12 23 34 45
'''
for i in range(0, len(M)-1):  # IndexError: list index out of range
    print(f'{M[i]}{M[i+1]}', end=' ')
print('\n')
'''
# 2. Назовём тройкой три идущих подряд элемента последовательности.
# 123 234 345
'''
for i in range(0, len(M)-2):  # IndexError: list index out of range
    print(f'{M[i]}{M[i+1]}{M[i+2]}', end=' ')
print('\n')
'''
# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
'''
for i in range(0, len(M)):
    for j in range(0, len(M)):
        if i < j:
            print(f'{M[i]}{M[j]}', end=' ')
    print()

for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        print(f'{M[i]}{M[j]}', end=' ')
    print()
'''


'''
f = open('17.txt')
print(f)
f.close()

s = open('17.txt', 'r').readlines()
print(s)

M = [int(i) for i in open('17.txt')]
print(M)

with open('17.txt', 'r') as file:
    M = [int(i) for i in file]
    print(M)
'''

# Тип 17 № 39764
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000. Назовём тройкой
# три идущих подряд элемента последовательности. Определите количество троек чисел таких, которые могут являться
# сторонами прямоугольного треугольника. В ответе запишите два числа: сначала количество найденных троек, а затем  —
# максимальную сумму элементов таких троек. Если таких троек не найдётся — следует вывести 0 0.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-2):
    A = sorted([M[i], M[i+1], M[i+2]])
    if A[2] ** 2 == A[0] ** 2 + A[1] ** 2:
        count += 1
        maxi = max(maxi, M[i] + M[i+1] + M[i+2])
print(count, maxi)
'''
# Ответ: 0 0


# Тип 17 № 37372
# В файле содержится последовательность из 10000 целых положительных чисел.
# Каждое число не превышает 10 000.
# Определите и запишите в ответе сначала количество пар элементов последовательности,
# у которых разность элементов кратна 45 и хотя бы один из элементов кратен 18,
# затем максимальную из разностей элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности.
# Порядок элементов в паре не важен.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] - M[j]) % 45 == 0 and (M[i] % 18 ==0 or M[j] % 18 == 0):
            count += 1
            maxi = max(maxi, M[i] - M[j])
print(count, maxi)
'''
# Ответ: 92471 9945


# Тип 17 № 47221
# В файле содержится последовательность целых чисел. Элементы последовательности могут принимать
# целые значения от −10000 до 10000 включительно. Определите количество пар последовательности, в которых только
# одно число оканчивается на 3, а сумма квадратов элементов пары не меньше квадрата максимального элемента
# последовательности, оканчивающегося на 3. В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную из сумм квадратов элементов таких пар. В данной задаче под парой подразумевается два идущих
# подряд элемента последовательности.
print(abs(-203) % 10)  # abs() - взятие модуля числа
print(abs.__doc__)
'''
M = [int(i) for i in open('17.txt')]
max_square = max([i for i in M if str(i)[-1] == '3']) ** 2
count = 0
maxi = 0
for i in range(0, len(M)-1):
    # if (abs(M[i]) % 10 == 3 and abs(M[i+1]) % 10 != 3) or (abs(M[i]) % 10 != 3 and abs(M[i+1]) % 10 == 3):
    if (str(M[i])[-1] == '3' and  str(M[i+1])[-1] != '3') or (str(M[i])[-1] != '3' and  str(M[i+1])[-1] == '3'):
        if (M[i] ** 2 + M[i+1] ** 2) >= max_square:
            count += 1
            maxi = max(maxi, M[i] ** 2 + M[i+1] ** 2)
print(count, maxi)
'''
# Ответ: 180 190360573



# Тип 9 № 45243 i
# Откройте файл электронной таблицы, содержащей в каждой строке пять натуральных чисел.
#
# Определите количество строк таблицы, в которых квадрат суммы максимального и минимального
# чисел в строке больше суммы квадратов трёх оставшихся.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if (M[0] + M[4]) ** 2 > (M[1] ** 2 + M[2] ** 2 + M[3] ** 2):
        count += 1
print(count)
'''
# Ответ: 2640


#
# № 6898 OpenFIPI (Уровень: Базовый)
# Откройте файл электронной таблицы, содержащей в каждой строке четыре натуральных числа.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
#
# – наибольшее из четырёх чисел меньше суммы трёх других;
# – четыре числа можно разбить на две пары чисел с равными суммами.
#
# В ответе запишите только число.
'''
import itertools
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    if max(M) < sum(M) - max(M):
        if any(A[0] + A[1] == A[2] + A[3] for A in itertools.permutations(M, 4)):
            count += 1
print(count)
'''
# Ответ: 116


# Тип 9 № 33181 i
# Электронная таблица содержит результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Определите, сколько раз за время наблюдений температура в 8:00 была выше среднесуточной температуры того же дня.
'''
f = open('9.txt')
print(f.readline())
count = 0
for s in f:
    M = [float(i) for i in s.replace(',', '.').split()]
    if M[8] > (sum(M) / len(M)):
        count += 1
print(count)
'''
# Ответ: 30


# endregion Урок: ******************************************************************


# todo: Никита3 = [2, 5, 8, 9, 12, 14, 15, 16, 17, 23, 25]
# на прошлом уроке: Разбирали 25 номера с масками, прорешали все задачи РЕШУ ЕГЭ и задачи с крайних пробников
# на следующем уроке: Разбирать 17 и 9 номера на работу с .txt
