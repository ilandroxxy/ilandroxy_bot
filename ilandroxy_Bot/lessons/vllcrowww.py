# region Домашка: ***************************************************************

# КЕГЭ № 8609 (Уровень: Базовый) (Л. Шастин)
#
# Откройте файл электронной таблицы, содержащей в каждой строке пять натуральных чисел.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
# - каждое число в строке встречается по одному разу,
# - удвоенная сумма максимального и минимального значений не превышает утроенной суммы оставшихся чисел.

count = 0
for s in open('9.txt'):
    M = sorted([int(x) for x in s.split()])
    if len(M) == len(set(M)):
        if 2 * (M[-1] + M[0]) <= (M[1] + M[2] + M[3]) * 3:
            count += 1
print(count)



# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

# Решение 9 номеров с температурами (вещественными числами)
'''
count = 0
for s in open('9.txt'):
    M = [float(x) for x in s.replace(',', '.').split()]
    # ValueError: could not convert string to float: '14,5'
    print(M)
    # [14.5, 45.3, 12.3, 123.3]
    # [312.3, 21.3, 124.6, 12.0]
'''


# 24 номера простые задачи


# Тип 24 №27688
# Текстовый файл состоит не более чем из 106 символов X, Y и Z.
# Определите длину самой длинной последовательности, состоящей из символов Z.
# Хотя бы один символ Z находится в последовательности.
'''
# Вариант 1
s = open('24.txt').readline()
count = 1
max_count = 0
for i in range(len(s)-1):
    # if s[i] == 'Z' and s[i+1] == 'Z':
    if s[i:i+2] == 'ZZ':
        count += 1
        max_count = max(max_count, count)
    else:
        count = 1
print(max_count)

# Вариант 2
s = open('24.txt').readline()
s = s.replace('X', ' ').replace('Y', ' ')
maxi = 0
for x in s.split():
    maxi = max(maxi, len(x))
print(maxi)

# Вариант 2.2
s = open('24.txt').readline()
s = s.replace('X', ' ').replace('Y', ' ')
print(max([len(x) for x in s.split()]))

# Вариант 2.3
print(max([len(x) for x in open('24.txt').readline().replace('X', ' ').replace('Y', ' ').split()]))


# Вариант 3 через сочетание клавиш ctrl + F
print(open('24.txt').readline())
print(len('ZZZZZZZ'))
'''
# Ответ: 7


# Тип 24 №36037
# Текстовый файл состоит не более чем из 1 200 000 символов X, Y, и Z.
# Определите максимальное количество идущих подряд символов, среди которых нет подстроки XZZY.
'''
s = open('24.txt').readline()
s = s.replace('XZZY', 'XZZ ZZY')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 1713


# Тип 24 №45258
# Текстовый файл состоит из символов A, B и C.
# Определите максимальное количество идущих подряд пар символов AB или CB в прилагаемом файле.
# Искомая подпоследовательность должна состоять только из пар AB, или только из пар CB,
# или только из пар AB и CB в произвольном порядке следования этих пар.
'''
s = open('24.txt').readline()
s = s.replace('AB', '*').replace('CB', '*')
s = s.replace('A', ' ').replace('B', ' ').replace('C', ' ')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 65


# Тип 24 №27689
# Текстовый файл состоит не более чем из 106 символов X, Y и Z.
# Определите максимальную длину цепочки вида XYZXYZXYZ...
# (составленной из фрагментов XYZ, последний фрагмент может быть неполным).
'''
print(open('24.txt').readline())
print(len('XYZXYZXYZXYZX'))
'''
# Ответ: 13


# Тип 24 №47228
# Текстовый файл состоит из символов A, C, D, F и O.
# Определите максимальное количество идущих подряд пар символов вида согласная + гласная.
'''
s = open('24.txt').readline()
for p in 'CA DA FA CO DO FO'.split():
    s = s.replace(p, '*')
for x in 'ACDFO':
    s = s.replace(x, ' ')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 95


# Тип 24 №58329
# Текстовый файл состоит не более чем из 106 символов арабских цифр (0,1,...,9).
# Определите максимальное количество идущих подряд цифр, среди которых сумма двух идущих подряд чисел
# больше числа следующего за ними.
'''
s = open('24.txt').readline()
count = 2
max_count = 0
for i in range(len(s)-2):
    # if (int(s[i])+ int(s[i+1])) > int(s[i+2]):
    a, b, c = [int(x) for x in s[i:i+3]]
    if (a + b) > c:
        count += 1
        max_count = max(max_count, count)
    else:
        count = 2
print(max_count)
'''
# Ответ: 33

# endregion Урок: ******************************************************************


# Марго = [2.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1]
# КЕГЭ  = []
# на следующем уроке: Продолжить разбирать сложные 24 номера с строками и кол-во элементов
