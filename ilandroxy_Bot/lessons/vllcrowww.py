# region Домашка: ***************************************************************


# endregion Домашка: ************************************************************


# region Урок: ******************************************************************


# 24: {1, 2, 3, 4, 6, 8, 12, 24} - если целого квадратного корня нет, то делителей четное кол-во
# 16: {1, 2, 4, 8, 16} - если у числа есть целый квадратный корень, то делителей нечетное кол-во

'''
import time
start = time.time()

# def divisors(x):
#     div = []
#     for j in range(1, x+1):
#         if x % j == 0:
#             div.append(j)
#     return div


def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


print(divisors(100_000_000))
print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]  24 ** 0.5 = 4.89
print(divisors(16))  # [1, 2, 4, 8, 16] 16 ** 0.5 = 4

print(time.time() - start)  # 2.97 > 0.00034
'''


# Тип 25 №28122
# Напишите программу, которая ищет среди целых чисел, принадлежащих
# числовому отрезку [489421; 489 440],
# числа, имеющие ровно четыре различных натуральных делителя.
# Для каждого найденного числа запишите эти четыре делителя
# в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


for x in range(489421, 489440+1):
    d = divisors(x)
    if len(d) == 4:
        print(*d)
'''
# 1 19 25759 489421
# 1 2 244711 489422
# 1 13 37649 489437


# Тип 25 №35914
# Найдите все натуральные числа, принадлежащие отрезку [45000000; 50000000],
# у которых ровно пять различных нечётных делителей (количество чётных делителей может быть любым).
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            # div.append(j)
            # div.append(x // j)
            div += [j, x // j]
    return sorted(set(div))


for x in range(45000000, 50000000+1):
    d = [i for i in divisors(x) if i % 2 != 0]
    if len(d) == 5:
        print(x)
'''
# 45212176
# 45265984
# 47458321
# 48469444


# Тип 25 №40741
# Пусть M(N) — сумма двух наибольших различных натуральных делителей
# натурального числа N, не считая самого числа.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 10000000,
# для которых 0<M(N)<10000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # не считая самого числа и единицу
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


k = 0
for x in range(10000000+1, 10**10):
    d = divisors(x)
    if len(d) >= 2:
        M = d[-1] + d[-2]  # sum(d[-2:])
        if 0 < M < 10000:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 6876
# 6374
# 6924
# 8024
# 8358


# Тип 25 №36880
# Найдите все натуральные числа N, принадлежащие отрезку [400000000; 600000000],
# которые можно представить в виде N = 2**m * 3**n,
# где m — чётное число, n — нечётное число. В ответе запишите все найденные числа в порядке возрастания.
'''
for m in range(0, 32, 2):
    for n in range(1, 32, 2):
        N = 2**m * 3**n
        if 400000000 <= N <= 600000000:
            print(N)
'''
# 516560652
# 408146688
# 573308928
# 452984832


# Тип 25 №33104
# Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Например, у числа 6 есть два нетривиальных делителя: 2 и 3. Найдите все натуральные числа,
# принадлежащие отрезку [289123456; 389123456] и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.
'''
def divisors(x):
    div = []
    if x ** 0.5 == int(x ** 0.5):
        for j in range(2, int(x**0.5)+1):  # не равный единице и самому числу
            if x % j == 0:
                div += [j, x // j]
    return sorted(set(div))


for x in range(289123456, 389123456+1):
    d = divisors(x)
    if len(d) == 3:
        print(x)
'''

# Тип 25 №63074
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.
#
# Найдите все натуральные числа, не превышающие 10**10, которые соответствуют
# маске 1*4239?7 и при этом без остатка делятся на 3147.
#
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(3147, 10**10, 3147):
    if fnmatch(str(x), '1*4239?7'):
        print(x)
'''
# 100423917
# 176423967
# 1374423927
# 1450423977
# 1973423907


# № 12932 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа,
# соответствующие маске 1?2*4, делящиеся на 2024 без остатка и являющиеся полными квадратами.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 2024.

'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1?2*4'):
        if x ** 0.5 == int(x**0.5):  # являющиеся полными квадратами
            print(x, x // 2024)
'''
# 1024144 506
# 1327290624 655776
# 1721586064 850586

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Марго = [2.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 24.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
