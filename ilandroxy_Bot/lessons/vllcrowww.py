# region Домашка: ******************************************************************

# Домашка на 12 номер. Задание один
'''
s = '>' + '1' * 11 + '2' * 12 + '3' * 30

while ('>1' in s) or ('>2' in s) or ('>3' in s):
    if '>1' in s:
        s = s.replace('>1', '22>', 1)
    if '>2' in s:
        s = s.replace('>2', '222>', 1)
    if '>3' in s:
        s = s.replace('>3', '1>', 1)

print(s.count('1') + s.count('2') * 2 + s.count('3') * 3)
print(sum([int(x) for x in s if x.isdigit()]))
'''

# задание 2
'''
s = '1' * 95 + '7' * 31
while '1111' in s:
    s = s.replace('1111', '7', 1)
    s = s.replace('77', '1', 1)
print(s)
'''

# № 2226 (Уровень: Средний)
# Дана программа для исполнителя Редактор:
#
# ПОКА нашлось(555) ИЛИ нашлось(888)
#    заменить(555, 8)
#    заменить(888, 55)
# КОНЕЦ ПОКА

# Известно, что начальная строка состоит более чем из 300 цифр 8
# и не содержит других символов. В ходе работы алгоритма получилась строка,
# содержащая одну цифру 5 и одну цифру 8.
# Укажите минимальную возможную длину входной строки.
'''
for n in range(301, 1000):
    s = '8' * n

    while '555' in s or '888' in s:
        s = s.replace('555', '8', 1)
        s = s.replace('888', '55', 1)
    if s.count('8') == 1 and s.count('5') == 1:
        print(n)
        break
'''
# Ответ: 307

'''
x = 3 * 625**173 + 4 * 125**180 + 3 * 25**157 + 2 * 5**155 + 156
M = []
while x != 0:
    M.append(x % 25)
    x //= 25
M = M[::-1]  # M.reverse()
print(M.count(0))


x = 3 * 625**173 + 4 * 125**180 + 3 * 25**157 + 2 * 5**155 + 156
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
s = ''
while x != 0:
    s += alphabet[x % 25]
    x //= 25
s = s[::-1]
print(s.count("0"))
'''


# Тип 14№61394

# В числе 21x457y9_37 x и y обозначают некоторые цифры из алфавита системы счисления с основанием 37.
# Определите такие значения x и y, при которых приведённое число кратно 36, а число xy37
# имеет наибольшее возможное значение.
# В ответе запишите значение числа xy_37 в десятичной системе счисления.
'''
def back_convert(num: list, system: int):
    result = 0
    num.reverse()
    for i in range(len(num)):
        result += num[i] * system ** i
    return result


R = []
for x in range(0, 36+1):
    for y in range(0, 36+1):
        r = back_convert([2, 1, x, 4, 5, 7, y, 9], 37)
        if r % 36 == 0:
            R.append(back_convert([x, y], 37))
print(max(R))
'''
# Ответ: 1340


# Тип 5 №33177
# Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
# 1. Строится двоичная запись числа N.
# 2. В конец записи (справа) дописывается вторая справа цифра двоичной записи.
# 3. В конец записи (справа) дописывается вторая слева цифра двоичной записи.
# 4. Результат переводится в десятичную систему.
#
# При каком наименьшем числе N в результате работы алгоритма получится R > 150?
# В ответе запишите это число в десятичной системе счисления.
'''
for n in range(2, 1000):
    s = bin(n)[2:]
    s = s + s[-2]
    s = s + s[1]
    r = int(s, 2)
    if r > 150:
        print(n)
        break
'''
'''
def convert(number: int, system: int):
    alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    result = ''
    while number != 0:
        result += alphabet[number % system]
        number //= system
    result = result[::-1]
    return result


for n in range(2, 1000):
    s = convert(n, 2)  # s = bin(n)[2:]
    s = s + s[-2]
    s = s + s[1]
    r = int(s, 2)
    if r > 150:
        print(n)
        break
        
# print(convert(8, 2))
'''

# Ответ: 38


# Тип 5 №59827
# На вход алгоритма подается натуральное число N. Алгоритм строит по нему новое число R следующим образом:
#
# 1) Строится троичная запись числа N
# 2) Если N кратно 3, то в конец записи дописываются две последние троичные цифры
# 3) Если N не кратно 3, то остаток от деления умножается на 5,
# переводится в троичную систему и затем дописывается к числу

# Укажите максимальное число R, не превышающее 173, которое может быть получено с помощью описанного алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
def convert(number: int, system: int):
    alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    result = ''
    while number != 0:
        result += alphabet[number % system]
        number //= system
    result = result[::-1]
    return result


R = []
for n in range(1, 1000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = s + s[-2:]
    else:
        x = (n % 3) * 5
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 173:
        print(r)
        R.append(r)
print(max(R))
'''
# Ответ: 162

# todo Рассмотреть домашние задачи 14.1 (3, 4)

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************



# endregion Урок: ******************************************************************


# Марго = [2.1, 6.1, 12.1, 14.1]
# КЕГЭ  = []
# на следующем уроке:
