# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************




# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# todo Разобрать новое решение через "аналитическое решение"
# Тип 25 №33104
# Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Например, у числа 6 есть два нетривиальных делителя: 2 и 3.
# Найдите все натуральные числа, принадлежащие отрезку [289123456;389123456] и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.


'''
for i in range(17004, 19727):
    if i**0.5 == int(i**0.5):
        print(i**2, max(i, i**0.5, i**0.5*i))
'''

'''
import time
start = time.time()
def F(n):
    div = []
    if n ** 0.5 == int(n ** 0.5):  # Если есть целый квадратный корень
        for m in range(2, int(n**0.5)+1):  # Не равный единице и самому числу.
            if n % m == 0:
                div += [m, n // m]
    return sorted(set(div))


for n in range(289123456, 389123456+1):
    d = F(n)
    if len(d) == 3:
        print(n, max(d))

print(time.time() - start)
'''
# 40 - Секунд

# Ответ:
# 294499921 2248091
# 352275361 2571353
# 373301041 2685619


# Тип 15 №34544
# На числовой прямой даны два отрезка: P = [10, 39] и Q = [23, 58].
# Какова наименьшая возможная длина интервала A, что формула
# ((x ∈ P) ∧ (x ∈ Q)) → ((x ∈ Q) ∧ (x ∈ A ))
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x, a1, a2):
    P = 10 <= x <= 39  # P = [10, 39]  (x ∈ P)
    Q = 23 <= x <= 58
    A = a1 <= x <= a2
    return (P and Q) <= (Q and A)


R = []
M = [x / 4 for x in range(10 * 4, 60 * 4)]
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)
print(min(R))
'''
# Ответ: 16.0 -> 16


# Тип 15 №34540
# На числовой прямой даны два отрезка: Р = [12, 62] и Q = [52, 92].
# Какова наименьшая возможная длина интервала A, что логическое выражение
# ¬(¬(х ∈ А) ∧ (х ∈ Р)) ∨ (х ∈ Q)
# тождественно истинно, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x, a1, a2):
    P = 12 <= x <= 62  # (х ∈ Р)
    Q = 52 <= x <= 92  # (х ∈ Q)
    A = a1 <= x <= a2  # (х ∈ А)
    return (not((not A) and P)) or Q


R = []
M = [x / 10 for x in range(10 * 10, 100 * 10)]
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)
print(min(R))
'''
# Ответ: 39.75 -> 39.8 -> 39.9 -> 40


# Теория:
# Адрес сети = IP-адресу узла & Маска
# & - побитовая конъюнкция (and - логическое умножение)

# Маска имеет длину 32 бита и вид 11111..000

# IP состоит из четырех чисел разделенных точками
# На каждое такое число выделен 1 байт инорфмации - 8 бит
# Каждое число лежит в диапазоне от 0 (00000000) до 255 (11111111)
'''
knot = '.'.join([bin(int(x))[2:].zfill(8) for x in '102.9.140.219'.split('.')])  # 01100110.00001001.10001100.11011011
mask = '.'.join([bin(int(x))[2:].zfill(8) for x in '255.255.192.0'.split('.')])

address = ''
for i in range(len(knot)):
    if knot[i] == '1' and mask[i] == '1':
        address += '1'
    elif knot[i] == '.' and mask[i] == '.':
        address += '.'
    else:
        address += '0'

print(knot, mask, address, sep='\n')
# 01100110.00001001.10001100.11011011
# 11111111.11111111.11000000.00000000
# 01100110.00001001.10000000.00000000

print([int(x, 2) for x in address.split('.')])
'''
# [102, 9, 128, 0]
# Ответ: EABF


# Тип 13 №7208
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 102.9.140.219
# Маска: 255.255.192.0
'''
from ipaddress import *
net = ip_network('102.9.140.219/255.255.192.0', 0)
print(net)  # 102.9.128.0/18 где 18 - кол-во единиц в маске
'''
# Ответ: EABF


# Тип 13 №13358
# Для узла с IP-адресом 147.192.92.64 адрес сети равен 147.192.80.0.
# Чему равно значение третьего слева байта маски? Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'147.192.92.64/{mask}', 0)
    print(net, net.netmask, mask)
    # 147.192.80.0/20 255.255.240.0 20
'''
# Ответ: 240


# Тип 13 №10386
# Для узла с IP-адресом 111.81.208.27 адрес сети равен 111.81.192.0.
# Чему равно наименьшее возможное значение третьего слева байта маски?
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'111.81.208.27/{mask}', 0)
    print(net, net.netmask)
    # 111.81.192.0/18 255.255.192.0
    # 111.81.192.0/19 255.255.224.0
'''
# Ответ: 192


# Тип 13 №18588
# Узлы с IP-адресами 98.162.71.151 и 98.162.71.155 находятся в разных сетях.
# Чему равно наименьшее количество возможных единиц в масках этих сетей?
'''
from ipaddress import *
for mask in range(32+1):
    net1 = ip_network(f'98.162.71.151/{mask}', 0)
    net2 = ip_network(f'98.162.71.155/{mask}', 0)
    if net1 != net2:  # в разных сетях.
        print(mask, net1, net2)
        # 29 98.162.71.144/29 98.162.71.152/29
        # 30 98.162.71.148/30 98.162.71.152/30
        # 31 98.162.71.150/31 98.162.71.154/31
        # 32 98.162.71.151/32 98.162.71.155/32
'''
# Ответ: 29


# endregion Разобрать: *************************************************************


# Никита = [5, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19-21, 23, 24, 25]
# КЕГЭ  = []
# на следующем уроке: Повторить 11 номера и разобрать 22
