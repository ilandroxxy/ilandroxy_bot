# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Задача поиска делителей числа

import time
start = time.time()

# def divisors(x):
#     div = []
#     for j in range(1, x+1):
#         if x % j == 0:
#             div.append(j)
#     return div
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            # div.append(j)
            # div.append(x // j)
            div += [j, x // j]
    return sorted(set(div))


print(divisors(100_000_000))  # 2.868 -> 0.0003

print(time.time() - start)
'''
# 24 {1, 2, 3, 4, 24**0.5, 6, 8, 12, 24}  24 // 4 == 6, 24 // 6 = 4
# 16 {1, 2, 16**0.5, 8, 16}  # если у числа есть целый квадратный корень, то нечетное кол-во делителей


# Тип 25 №27422
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [174457; 174505],
# числа, имеющие ровно два различных натуральных делителя, не считая единицы и самого числа.
# Для каждого найденного числа запишите эти два делителя в два соседних столбца на экране с
# новой строки в порядке возрастания произведения этих двух делителей.

'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # не считая единицы и самого числа
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(174457, 174505+1):
    div = divisors(x)
    if len(div) == 2:
        print(*div)
'''
# Ответ:
# 3 58153
# 7 24923
# 59 2957
# 13 13421
# 149 1171
# 5 34897
# 211 827
# 2 87251


# Тип 25 №28123
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому
# отрезку [125256; 125330], числа, имеющие ровно шесть различных чётных натуральных делителей.
# Для каждого найденного числа запишите эти шесть делителей
# в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(125256, 125330+1):
    div = divisors(x)
    chet = [a for a in div if a % 2 == 0]
    if len(chet) == 6:
        print(*chet)
'''
# 2 6 18 13918 41754 125262
# 2 4 8 31322 62644 125288
# 2 6 18 13922 41766 125298


# Тип 25 №27850
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому
# отрезку [245690; 245756] простые числа.
# Выведите на экран все найденные простые числа в порядке возрастания, слева
# от каждого числа выведите его порядковый номер в последовательности.
# Каждая пара чисел должна быть выведена в отдельной строке.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


num = 1
for x in range(245690, 245756+1):
    div = divisors(x)
    if len(div) == 2:
        print(num, x)
    num += 1
'''


# Тип 25 №39254
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 500000000,
# для которых0<M(N)<N. В ответе запишите найденные значения M(N)
# в порядке возрастания соответствующих им чисел N.
'''
import math
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


k = 0
for n in range(500000000+1, 5000000000000):
    div = divisors(n)
    if len(div) >= 5:
        M = math.prod(div[:5])
        # M = div[0] * div[1] * div[2] * div[3] * div[4]
        if 0 < M < n:
            print(M)
            k += 1
            if k == 5:
                break
'''
# 1008
# 1797092
# 48408867
# 1800
# 1156923


# Тип 25 №29673
# Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Например, у числа 6 есть два нетривиальных делителя: 2 и 3.
# Найдите все натуральные числа, принадлежащие отрезку [123456789; 223456789]
# и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.
'''
def divisors(x):
    div = []
    if x ** 0.5 == int(x**0.5):
        for j in range(2, int(x**0.5)+1):
            if x % j == 0:
                div += [j, x // j]
    return sorted(set(div))


for x in range(123456789, 223456789+1):
    div = divisors(x)
    if len(div) == 3:
        print(x, max(div))
'''
# 131079601 1225043
# 141158161 1295029
# 163047361 1442897


# Тип 25 №52196
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.

# Найдите все натуральные числа, не превышающие 10**9, которые
# соответствуют маске 12*93?1? и при этом без остатка делятся на 3127.
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(3127, 10**9, 3127):
    if fnmatch(str(x), '12*93?1?'):
        print(x)
'''
# Ответ:
# 120993011
# 122093715
# 126193212
# 127293916


# Тип 25 №59818
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите все натуральные числа, не превосходящие 10**9, для которых выполнены все условия:
# — соответствуют маске *31*65?;
# — делятся на 31 и 2031 без остатка;
# — количество делителей числа является результатом любой степени двойки.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# справа от каждого числа их частное от деления на 2031.

'''
from fnmatch import *

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


M = [2**i for i in range(0, 1000)]

for x in range(2031 * 31, 10**9, 2031 * 31):
    if fnmatch(str(x), '*31*65?'):
        div = divisors(x)
        if len(div) in M:
            print(x, x // 2031)
'''


# № 12932 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
#     – символ «?» означает ровно одну произвольную цифру;
#     – символ «*» означает любую последовательность цифр произвольной длины;
#     в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10,
# найдите все числа, соответствующие маске 1?2*4, делящиеся на 2024 без остатка и являющиеся полными квадратами.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 2024.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1?2*4'):
        if x ** 0.5 == int(x ** 0.5):
            print(x, x // 2024)
'''
# 1024144 506
# 1327290624 655776
# 1721586064 850586


# № 11672 (Уровень: Базовый)
# (Л. Шастин) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 12*34?5,
# делящиеся на 21025 без остатка и состоящие из одинакового количества чётных и нечётных цифр.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 21025.
# Количество строк в таблице для ответа избыточно.
'''
from fnmatch import *
for x in range(21025, 10**10, 21025):
    if fnmatch(str(x), '12*34?5'):
        chet = [a for a in str(x) if a in '02468']
        nechet = [a for a in str(x) if a in '13579']
        if len(chet) == len(nechet):
            print(x, x // 21025)
'''
# 1214803475 57779
# 1233263425 58657
# 1240033475 58979
# 1241673425 59057
# 1258493425 59857
# 1265263475 60179
# 1283723425 61057

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Никита = [5.1, 7.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 24.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
