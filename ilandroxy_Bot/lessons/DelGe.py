
# region Домашка: ************************************************************


# endregion Домашка: ************************************************************


# region Урок: ************************************************************

# Тип 14 №10506
# Значение арифметического выражения: x — записали в системе счисления с основанием 4.
# Сколько цифр «3» содержится в этой записи?
'''
x = 16**2016 + 4**2015 - 64
M = []  # M = {} set(), M = [] list()
while x > 0:
    M.append(x % 4)
    x //= 4
M.reverse()
print(M.count(3))
'''
# Ответ: 2012


# Тип 14 №48393
# Операнды арифметического выражения записаны в системах счисления с основаниями 8 и 11:
#
# y04x5_11 + 253xy_8
#
# В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры.
# Определите значения x и y, при которых значение данного арифметического выражения будет наименьшим и кратно 117.
# Для найденных значений x и y вычислите частное от деления значения арифметического выражения на 117
# и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления в ответе указывать не нужно.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:8]:
    for y in alphabet[:8]:
        A = int(f'{y}04{x}5', 11)
        B = int(f'253{x}{y}', 8)
        if (A + B) % 117 == 0:
            print((A + B) // 117)
'''
# Ответ: 224


# Тип 14 №48379
# Числа M и N записаны в системе счисления с основанием 9 соответственно.
#
# M = 842x5_9, N = 8x725_9
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита девятеричной системы счисления.
# Определите наименьшее значение натурального числа A, при котором существует такой x, что M + A кратно N.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

for A in range(1, 10000):
    for x in alphabet[:9]:
        M = int(f'842{x}5', 9)
        N = int(f'8{x}725', 9)
        if (M + A) % N == 0:
            print(A)
            exit()
'''
# Ответ: 387


# Тип 12 №11243
# Ниже приведена программа для исполнителя Редактор.
#

# ПОКА нашлось (19) ИЛИ нашлось (299) ИЛИ нашлось (3999)
#   заменить (19, 2)
#   заменить (299, 3)
#   заменить (3999, 1)
#
# На вход этой программе подаётся строка длины 99, состоящая из цифры 1, за которой следуют 98 идущих подряд цифр 9.
# Какая строка получится в результате применения программы к этой строке? В ответе запишите полученную строку.
'''
s = '1' + '9' * 98

while '19' in s or '299' in s or '3999' in s:
    s = s.replace('19', '2', 1)
    s = s.replace('299', '3', 1)
    s = s.replace('3999', '1', 1)

print(s)
'''
# Ответ: 29


# Тип 12 №26986
# Дана программа для Редактора:
#
# ПОКА нашлось (49) ИЛИ нашлось (97) ИЛИ нашлось (47)
#     ЕСЛИ нашлось (47)
#     ТО заменить (47, 74)
#     ЕСЛИ нашлось (97)
#     ТО заменить (97, 79)
#     ЕСЛИ нашлось (49)
#     ТО заменить (49, 94)
#
# На вход приведённой ниже программе поступает строка, содержащая 40 цифр 7, 40 цифр 9 и 50 цифр 4,
# расположенных в произвольном порядке.
# Запишите без разделителей символы, которые имеют порядковые номера 25, 71 и 105 в получившейся строке.
'''
s = '4' * 50 + '7' * 40 + '9' * 40

while '49' in s or '97' in s or '47' in s:
    if '47' in s:
        s = s.replace('47', '74', 1)
    if '97' in s:
        s = s.replace('97', '79', 1)
    if '49' in s:
        s = s.replace('49', '94', 1)

print(s[25-1], s[71-1], s[105-1])
'''
# Ответ: 794


# Тип 12 №26957
# Дана программа для Редактора:
#
# ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>3)
#     ЕСЛИ нашлось (>1)
#     ТО заменить (>1, 22>)
#     ЕСЛИ нашлось (>2)
#     ТО заменить (>2, 2>)
#     ЕСЛИ нашлось (>3)
#     ТО заменить (>3, 1>)
#
# На вход приведённой ниже программе поступает строка, начинающаяся с символа «>»,
# а затем содержащая 26 цифр 1, 10 цифр 2 и 14 цифр 3, расположенных в произвольном порядке.
# Определите сумму числовых значений цифр строки, получившейся в результате выполнения программы.
'''
s = '>' + '1' * 26 + '2' * 10 + '3' * 14

while '>1' in s or '>2' in s or '>3' in s:
    if '>1' in s:
        s = s.replace('>1', '22>', 1)
    if '>2' in s:
        s = s.replace('>2', '2>', 1)
    if '>3' in s:
        s = s.replace('>3', '1>', 1)

print(s)

# Вариант 1
summ = 0
for x in s:
    if x.isdigit():
        summ += int(x)
print(summ)

# Вариант 2
print(sum([int(x) for x in s if x.isdigit()]))

# Вариант 3
print(s.count('1') + s.count('2') * 2)
'''


# Тип 12 №33757
# Дана программа для редактора:
#
#     ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
#         заменить (01, 30)
#         заменить (02, 101)
#         заменить (03, 202)
#
# Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка, содержащая 20 единиц, 10 двоек и 70 троек.
# Сколько единиц было в исходной строке?
'''
for x in range(70):
    for y in range(70):
        for z in range(70):
            s = '0' + '1' * x + '2' * y + '3' * z

            while '01' in s or '02' in s or '03' in s:
                s = s.replace('01', '30', 1)
                s = s.replace('02', '101', 1)
                s = s.replace('03', '202', 1)

            if s.count('1') == 20 and s.count('2') == 10 and s.count('3') == 70:
                print(x)
'''
# Ответ: 50


# Тип 12 №28550
# Дана программа для Редактора:
#
# ПОКА нашлось (21)
#     заменить (21, 5)

# Исходная строка содержит десять единиц и некоторое количество двоек, других цифр нет,
# точный порядок расположения единиц и двоек неизвестен.
# После выполнения программы получилась строка с суммой цифр 34.
# Какое наименьшее количество двоек могло быть в исходной строке?
'''
from itertools import product
for n in range(1, 100):
    for t in product('12', repeat=10+n):
        if t.count('1') == 10:
            s = ''.join(t)

            while '21' in s:
                s = s.replace('21', '5', 1)

            if sum([int(x) for x in s if x.isdigit()]) == 34:
                print(n)
                exit()
'''
# Ответ: 6


# endregion Урок: ************************************************************


# todo: Евгений = [2.1, 8.1, 12.1, 14.1]
# на прошлом уроке:
# на следующем уроке:
