
# region Домашка: ************************************************************

# КЕГЭ № 6904 (Уровень: Базовый) (Д. Статный)
#
# Логическая функция F задаётся выражением ¬(((x → y ∧ w) ∧ (z → x ∨ y)) ≡ w).
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F,
# содержащий неповторяющиеся строки. Определите, какой столбец в таблице каждой переменной в выражении.
'''
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = not(((x <= (y and w)) and (z <= (x or y))) == w)
                if F == True:
                    print(x, y, z, w)
'''


# КЕГЭ № 6842 (Уровень: Средний) (А. Богданов)
#
# Логическая функция F задаётся выражением w ∧ ((z ∨ y) ≡ (z ∧ x)).
# На рисунке приведён частично заполненный фрагмент таблицы
# истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции
# F соответствует каждая из переменных x, y, z, w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = w and ((z or y) == (z and x))
                print(x, y, z, w, int(F))
'''
# endregion Домашка: ************************************************************


# region Урок: ************************************************************

# Списки и строки
'''
L = []
L = list()  # пустой список

# i        0  1  2   3    4
my_list = [1, 2, 3, '5', True]
# -i      -5 -4 -3  -2   -1

print(my_list)
print(*my_list)
print(my_list[3])  # вывести на экран элемент под индексом 3
print(my_list[-2])


# Основное отличие список от кортежей K = (1, 2, 3) - в списках можно менять элементы по индексу
my_list[3] = 45
print(my_list)
'''

# Функции для списков
'''
M = [1, 2, 3, 4, 1, 2]
print(len(M))  # длину списка (кол-во элементов в списке)
print(sum(M))  # сумму int-овых значений
print(max(M))
print(min(M))
print(set(M))  # {1, 2, 3, 4}  - переконвертировали список в множество, то есть удалили все копии элементов
print(sorted(M))
print(sorted(M, reverse=True))
'''

# Методы списков
# Метод - это функция для одного определенного объекта
'''
M = [2, 3, 4, 1]
M.append(5)  # Метод .append() добавляет новый элемент в конец списка
print(M)

print(M.count(3))  # показывает сколько элементов находится внутри списка
print(M.index(3))  # показывает индекс первого найденного элемента (слева)

M.sort()
print(M)

M.reverse()
print(M)

print(help(M.reverse))
'''


# Срезы списков
'''
# i  0  1  2  3  4  5  6  7  8  9
M = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

print(M[1:4])  # [1, 2, 3]
print(M[:4])  # [0, 1, 2, 3]
print(M[4:])  # [4, 5, 6, 7, 8, 9]
print(M[::])  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(M[::2])  # [0, 2, 4, 6, 8]
print(M[::-1])  # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  аналог .reverse() 
'''


# Генераторы списков
'''
n = int(input('Введите длину списка: '))
M = []
for i in range(n):
    M.append(int(input(f'Введите {i}-ый элемент: ')))
print(M)
'''

'''
M = [int(x) for x in input() if int(x) % 2 == 0]
print(M)

M = [int(x) for x in input().split()]
print(M)
'''




# Строки
# Срезы в строках работают идентично, потому что индексы тоже работают идентично

s = '0123456789'

# endregion Урок: ************************************************************


# todo: Евгений = [2.1, 8.1]
# на прошлом уроке: Обсудили новый формат Степик домашек и прорешали 2-ой номер ЕГЭ.
# на следующем уроке:
