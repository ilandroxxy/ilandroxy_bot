import useful as u
# print(u.OrelReshka())
# region Домашка: ************************************************************

# Задача: "Отдыхает ли?"
'''
s = input().lower().strip()
if 'суббота' in s or 'воскресенье' in s:  # Суббота классная
    print('YES')
    print(s * 4)
else:
    print('NO')
'''


# Задача: "Интересное число"
'''
x = int(input())
s = str(x)

M = []
for i in range(len(s)):
    M.append(int(s[i]))  # .append() - добавить элемент в конец списка

if max(M) - min(M) == sum(M) / len(M):
    print("Число интересное")
else:
    print("Число неинтересное")
'''

# endregion Домашка: ************************************************************


# region Урок: ************************************************************

# Тип 14 №40730
# Значение выражения 3*125**6 + 2*25**9 + 5**12 - 625
# записали в системе счисления с основанием 5.
# Сколько значащих нулей содержится в этой записи?
'''
x = 3*125**6 + 2*25**9 + 5**12 - 625
M = []  # пустой список (сюда будем складывать остатки от деления).
while x > 0:  # пока x > 0
    M.append(x % 5)  # добавить в конец списка
    x //= 5  # x = x // 5
M.reverse()  # .reverse() - разворачивает список в обратном направлении
print(M.count(0))  # показывает кол-во вхождений элемента в список

x = 3*125**6 + 2*25**9 + 5**12 - 625
s = ''  # пустая строка
while x > 0:
    s += str(x % 5)
    x //= 5
s = s[::-1]  # аналог .reverse() у списков
print(s.count('0'))
'''
# Ответ: 11

'''
M = [1, 2, 3, 4]
M.reverse()
print(M)  # [4, 3, 2, 1]
'''


# Тип 14 № 29201
# Значение выражения 49**6*7**19 - 7**9 - 21 записали
# в системе счисления с основанием 7.
# Сколько цифр 6 содержится в этой записи?
'''
x = 49**6*7**19 - 7**9 - 21
M = []
while x > 0:
    M.append(x % 7)
    x //= 7
M.reverse()
print(M.count(6))
'''
# Ответ: 28


# Тип 16 № 4978
# Алгоритм вычисления значения функции F(n),
# где n — натуральное число, задан следующими соотношениями:
#
# F(1) = 1;
# F(2) = 1;, при n == 2
# F(n) = F(n - 2) * (n - 1), при n > 2.
#
# Чему равно значение функции F(8)?
# В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    if n > 2:
        return F(n - 2) * (n - 1)

print(F(8))
'''
# Ответ: 105


# Тип 16 № 36871
# Алгоритм вычисления значения функции F(n),
# где n — целое неотрицательное число, задан следующими соотношениями:

# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.

# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n)=3?
'''
def F(n):
    if n == 0:
        return 0  # F(0) = 0;
    if n > 0 and n % 2 == 0:  # если n > 0 и при этом чётно;
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)


k = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        k += 1
print(k)
'''
# Ответ: 120.


# Тип 23 № 13749
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
#
# Сколько существует таких программ, которые преобразуют исходное число 2
# в число 12 и при этом траектория вычислений программы содержит числа 8 и 10?
# Траектория должна содержать оба указанных числа.
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*3, b)

print(F(2, 8) * F(8, 10) * F(10, 12))


# Вариант 2
def F(a, b):
    if a >= b:
        return a == b
    return F(a+1, b) + F(a+2, b) + F(a*3, b)

print(F(2, 8) * F(8, 10) * F(10, 12))
'''
# 2 -> 8 -> 10 -> 12

# Ответ: 60


# Тип 25 № 45259
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа,
# соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа
# в порядке возрастания, а во втором столбце — соответствующие им результаты деления этих чисел на 23.
#
# Количество строк в таблице для ответа избыточно.
'''
from fnmatch import *
for x in range(23, 10**9, 23):
    if fnmatch(str(x), '12345?7?8'):
        print(x, x//23)
'''
# Ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816


# endregion Урок: ************************************************************


# todo: Евгений = []
# на прошлом уроке: Решили посмотреть несколько базовых задач с экзамена на прогу, а именно: 14, 16, 23, 25
# на следующем уроке:
