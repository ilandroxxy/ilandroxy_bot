# region Домашка: ************************************************************

# endregion Домашка: ************************************************************


# region Урок: ************************************************************

# Тип 7 №36020
# Для хранения произвольного растрового изображения размером 1536×2048 пикселей отведено
# не более 6 Мбайт памяти без учёта размера заголовка файла.
# Для кодирования цвета каждого пикселя используется одинаковое количество бит, коды пикселей записываются
# в файл один за другим без промежутков. Какое максимальное количество цветов можно использовать в изображении?

# I = pixels * i
'''
pixels = 1536 * 2048
I = 6 * 2**23  # не более 6 Мбайт
i = I / pixels
print(i)
# colors = ?   # colors = 2 ** i
colors = 2 ** i
print(colors)
'''
# Ответ: 65536


# Тип 7 №17373
# Автоматическая фотокамера с 200 Кбайт видеопамяти производит растровые
# изображения c фиксированным разрешением и 8-цветной палитрой.
# Сколько цветов можно будет использовать в палитре, если увеличить видеопамять до 400 Кбайт?
'''
# colors = 8 = 2 ** 3
i = 3
I = 200 * 2**13
pixels = I / i
print(pixels)
I2 = 400 * 2**13
i2 = I2 / pixels
print(i2)
colors2 = 2 ** i2
print(colors2)
'''
# Ответ: 64


# Тип 7 №27378
# Для проведения эксперимента создаются изображения, содержащие случайные наборы цветных пикселей.
# Размер изображения — 640x480пк, при сохранении изображения каждый пиксель кодируется одинаковым
# числом битов, все коды пикселей записываются подряд, методы сжатия не используются.
# Размер файла не должен превышать 280 Кбайт, при этом 40 Кбайт необходимо выделить для служебной информации.
# Какое максимальное количество различных цветов и оттенков можно использовать в изображении?
'''
pixels = 640 * 480
I = (280 - 40) * 2**13  # не должен превышать
i = I / pixels
print(i)  # 6.4 -> 6
colors = 2 ** 6
print(colors)
'''
# Ответ: 64


# Тип 7 №45241
# Для хранения сжатого произвольного растрового изображения размером 192 на 960 пикселей
# отведено 90 Кбайт памяти без учёта размера заголовка файла. При сжатии объём файла уменьшается на 35%.
# Для кодирования цвета каждого пикселя используется одинаковое количество бит,
# коды пикселей записываются в файл один за другим без промежутков.
# Какое максимальное количество цветов можно использовать в изображении?
'''
pixels = 192 * 960
I = 90 * 2 ** 13

i = (I / (1 - 0.35)) / pixels
print(i)  # 6.15 -> 6
colors = 2 ** 6
print(colors)
'''
# Ответ: 64


# Тип 7 №9759
# Какой минимальный объём памяти (в Кбайт) нужно зарезервировать,
# чтобы можно было сохранить любое растровое изображение размером 128×128 пикселей
# при условии, что в изображении могут использоваться 256 различных цветов?
# В ответе запишите только целое число, единицу измерения писать не нужно.
'''
colors = 256  # 2 ** 8
i = 8
pixels = 128 * 128
I = (pixels * i) / (2 ** 13)
print(I)
'''
# Ответ: 16


# Тип 7 №59685
# Сколько секунд потребуется обычному модему, передающему сообщения со скоростью 65536 бит/с,
# чтобы передать цветное растровое изображение размером 1024 на 768 пикселей,
# при условии, что цвет каждого пикселя кодируется 3 байтами?
'''
i = 3 * 2**3  # бит
pixels = 1024 * 768
I = pixels * i
U = 65536
print(I / U)
'''
# Ответ: 288


# Тип 11 №35985
# Каждый объект, зарегистрированный в информационной системе, получает уникальный код из 11 символов,
# каждый из которых может быть одной из 26 заглавных или строчных латинских букв.
# Для представления кода используют посимвольное кодирование, все символы кодируют
# одинаковым минимально возможным количеством битов, а для кода в целом выделяется минимально
# возможное целое количество байтов. Кроме того, для каждого объекта в системе выделен одинаковый
# объём памяти для хранения содержательной информации. Для хранения данных (код и содержательная информация)
# о 40 объектах потребовалось 2400 байт.
#
# Сколько байтов выделено для хранения содержательной информации об одном объекте?
# В ответе запишите только целое число — количество байтов.
'''
symbols = 11
alphabet = 26 * 2  # 52
# alphabet = colors = 2 ** i (бит на один символ)
i = 6
bit = symbols * i  # весь кода = (все символы) умножить на (бит на один символ)пше 
print(bit / 8)  # 8.25
byte = 9  # округляется вверх - вес в байтах одного кода
I = 2400 / 40  # вес одного объекта (код и содержательная информация)
print(I - byte)
'''
# Ответ: 51

# endregion Урок: ************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Евгений = [1.1, 2.1, 4.1, 5.1, 8.1, 9.1-, 12.1, 14.1, 15.1, 16.1, 17.1-, 23.1]
# КЕГЭ = []
# на следующем уроке: Разобрали задачи с изображением: на след. уроке 11 и задачи с музыкой (7)
