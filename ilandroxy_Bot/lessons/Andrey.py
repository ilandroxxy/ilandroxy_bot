
# Реализуйте функцию hide_card(), которая принимает один аргумент:
#
# card_number — строка, представляющая собой корректный номер банковской карты из
# 16
# 16 цифр, между которыми могут присутствовать символы пробела
# Функция должна заменять первые
# 12
# 12 цифр в строке card_number на символ * и возвращать полученный результат. Если между цифрами в номере имелись символы пробела, их следует удалить.
#
# Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию hide_card(), но не код, вызывающий ее.


'''
def hide_card(s):
    # for i in s:
    #     if i==' ':
    #         s=s.replace(i, '')
    while ' ' in s:
        s = s.replace(' ', '', 1)
    for i in range(12):
        s = s.replace(s[i], '*', 1)


    return s

print(hide_card('1234 5678 9012 3456'))
'''

'''
Реализуйте функцию same_parity(), которая принимает один аргумент:

numbers — список целых чисел
Функция должна возвращать новый список, элементами которого являются числа из списка numbers, имеющие ту же четность, что и первый элемент этого списка.
'''
'''
def same_parity(M):
    if len(M) > 0:
        if M[0] % 2 == 0:
            R=[i for i in M if i%2==0]
        else:
            R=[i for i in M if i%2!=0]
    else:
        R = []
    return R
'''
'''
Будем считать, что PIN-код является корректным, если он удовлетворяет следующим условиям:

состоит из 
4
4, 
5
5 или 
6
6 символов
состоит только из цифр (
0
−
9
0−9)
не содержит пробелов
Реализуйте функцию is_valid(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать значение True, если строка string представляет собой корректный PIN-код, или False в противном случае.
'''

def is_valid(pin: str):
    if pin.isdigit() and 4 <= len(pin) <= 6:
        return True
    else:
        return False


# Реализуйте функцию print_given(), которая принимает произвольное количество позиционных и именованных аргументов и выводит все переданные аргументы, указывая тип каждого. Пары аргумент-тип должны выводиться каждая на отдельной строке, в следующем формате:
#
# для позиционных аргументов:
# <значение аргумента> <тип аргумента>
# для именованных аргументов:
# <имя переменной> <значение аргумента> <тип аргумента>
# Примечание 1. При выводе позиционные аргументы должны быть расположены в порядке их передачи, именованные — в лексикографическом порядке имен переменных.
#
# Примечание 2. При выводе сначала должны следовать все позиционные аргументы, затем — все именованные.
#
# Примечание 3. Если в функцию ничего не передается, функция ничего не должна выводить.
#
# Примечание 4. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_given(), но не код, вызывающий ее.

def print_given(*args, **kwargs):
    for i in args:
        print(i, type(i))
    for key in kwargs:
        print(kwargs[key], type(kwargs[key]))



# Реализуйте функцию convert(), которая принимает один аргумент:
#
# string — произвольная строка
# Функция должна возвращать строку string:
#
# полностью в нижнем регистре, если букв в нижнем регистре в этой строке больше
# полностью в верхнем регистре, если букв в верхнем регистре в этой строке больше
# полностью в нижнем регистре, если количество букв в верхнем и нижнем регистрах в этой строке совпадает


def convert(s: str):
    s1 = ''
    s2 = ''
    for x in s:
        if x.isdigit():
            continue
        elif x.isupper():
            s2 += x
        else:
            s1 += x
    if len(s1) >= len(s2):
        return s.lower()
    elif len(s1) < len(s2):
        return s.upper()



# Реализуйте функцию filter_anagrams(), которая принимает два аргумента в следующем порядке:

# word — слово в нижнем регистре
# words — список слов в нижнем регистре
# Функция должна возвращать список, элементами которого являются слова из списка words, которые представляют анаграмму слова word. Если список words пуст или не содержит анаграмм, функция должна вернуть пустой список.

def filter_anagrams(w: str, ws: list):
    M =[]
    for x in ws:
        if sorted(w) == sorted(x):
            M.append(x)
    return M



print(filter_anagrams('ewrwrf', ['ewrwrf', 'wr']))
# todo: На следующем уроке: Методы списков, Решить задачи по спискам, Функции списков, Списочные выражения

# todo: Разобрали текстовые задачи с уравнениями в математике, дописали программу с переводом систем счислен