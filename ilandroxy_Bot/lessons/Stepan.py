# region Домашка

#Значение арифметического выражения 9**7 + 3**21 – 9 записали в системе счисления с основанием 3. Сколько цифр «2» содержится в этой записи?
'''
M = [1,2,3,4,5,6]
print(M[::-1])

# 8_10 -> 1000_2
print(int('1000', 2))

x = 8
M = []
while x > 0:
    M.append(x % 2)
    x //= 2
M.reverse()
print(M)

x = 9**7 + 3**21 - 9
M = []
while x > 0:
    M.append(x % 3)
    x //= 3
M.reverse()
print(M.count(2))


x = 9**7 + 3**21 - 9
s = ''
while x > 0:
    s += str(x % 3)
    x //= 3
s = s[::-1]
print(s.count("2"))
'''



#Значение арифметического выражения: 9**8 + 3**8 – 2 – записали в системе счисления с основанием 3. Сколько цифр «2» содержится в этой записи?
'''
x = 9**8 + 3**8 - 2
M = []
while x > 0:
    M.append(x % 3)
    x //= 3
print(M.count(2))
'''
#Значение арифметического выражения: 125 + 25**3 + 5**9 – записали в системе счисления с основанием 5. Сколько значащих нулей содержит эта запись?
'''
x = 125 + 25**3 + 5**9
M = []
while x > 0:
    M.append(x % 5)
    x //= 5
print(M.count(0))
'''
#Значение выражения 36**7 + 6**19 − 18? записали в системе счисления с основанием 6. Сколько цифр 0 содержится в этой записи?
'''
x = 36**7 + 6**19 - 18
M = []
while x > 0:
    M.append(x % 6)
    x //= 6
print(M.count(0))
'''

# endregion Домашка


# region Урок

# Тип 5 № 7917
# Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам.
#
# 1. Складываются первая и вторая, а также вторая и третья цифры исходного числа.
# 2. Полученные два числа записываются друг за другом в порядке возрастания (без разделителей).
#
# Пример. Исходное число: 348. Суммы: 3+4 = 7; 4+8 = 12. Результат: 712.
# Укажите наименьшее число, в результате обработки которого автомат выдаст число 1115.

# Вариант 1
"""
for n in range(100, 1000):
    s = str(n)

    a = int(s[0]) + int(s[1])
    b = int(s[1]) + int(s[2])

    r = str(min(a, b)) + str(max(a, b))

    if r == '1115':
        print(n)
        break
"""


# Вариант 2
'''
for n in range(100, 1000):
    M = [int(i) for i in str(n)]
    a = M[0] + M[1]
    b = M[1] + M[2]

    r = str(min(a, b)) + str(max(a, b))

    if r == '1115':
        print(n)
        break
'''
# Ответ: 296



# Тип 5 № 26949
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
#
# 1) Строится двоичная запись числа N.
# 2) К этой записи дописывается справа два нуля, если число четное, или две единицы в противном случае
#
# Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число менее 94.
# В ответе это число запишите в десятичной системе.

# вариант 1
'''
for n in range(10000, 0, -1):
    x = n

    M = []
    while n > 0:
        M.append(n % 2)
        n //= 2
    M.reverse()

    if x % 2 == 0:
        M.append(0)
        M.append(0)
    else:
        M.append(1)
        M.append(1)

    r = 0
    M.reverse()
    for i in range(0, len(M)):
        r += M[i] * 2 ** i

    if r < 94:
        print(x)
        break
'''

# вариант 2
'''
for n in range(10000, 0, -1):
    s = bin(n)[2:]  # переводим число n в строку через команду bin и отбрасываем первые два элемента

    if n % 2 == 0:
        s += '00'
    else:
        s += '11'

    r = int(s, 2)

    if r < 94:
        print(n)
        break
'''
# Ответ: 22




# Тип 5 № 17370
'''
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится двоичная запись числа N.
# 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.
# Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.
# 3. Полученное число переводится в десятичную запись.
# 4. Новое число вычитается из исходного, полученная разность выводится на экран.
#
# Пример. Дано число N = 11. Алгоритм работает следующим образом.
# 1. Двоичная запись числа N: 1011.
# 2. Удаляется первая единица и следующий за ней ноль: 11.
# 3. Десятичное значение полученного числа 3.
# 4. На экран выводится число 11 – 3 = 8.
#
# Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 100 до 3000?


M = []
for n in range(100, 3000+1):
    s = bin(n)[2:]

    s = s[1:]

    r = int(s, 2)

    res = n - r
    M.append(res)

#   print(M)

A = set(M)
print(A, len(A))
'''
# Ответ: 6



# Тип 5 № 33750
"""
# Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. Вместо последней (самой правой) двоичной цифры дважды записывается вторая слева цифра двоичной записи.
# 3. Результат переводится в десятичную систему.
#
# Пример. Дано число N=19. Алгоритм работает следующим образом:
# 1. Двоичная запись числа N: 10011.
# 2. Вторая слева цифра 0, единица в конце записи заменяется на два нуля, новая запись 100100.
# 3. Результат работы алгоритма R=36.
#
# При каком наименьшем числе N в результате работы алгоритма получится R>76?
# В ответе запишите это число в десятичной системе счисления.

for n in range(2, 10000):
    s = bin(n)[2:]

    s = s[:-1] + s[1] + s[1]

    r = int(s, 2)

    if r > 76:
        print(n)
        break
"""
# Ответ: 40




# endregion Урок


# todo: Степан = [2, 5, 14], на следующем уроке: Разбирать 6 номер turtle