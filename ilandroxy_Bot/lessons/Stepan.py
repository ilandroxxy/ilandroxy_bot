# region Домашка: ******************************************************************************

#Домашняя работа
# Тип 25 № 27855
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632;95700], числа,
# имеющие ровно шесть различных чётных натуральных делителей (при этом количество нечётных делителей может быть любым).
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def F(x):
    sett = set()
    for y in range(1, int(x  0.5) + 1):
        if x % y == 0:
            if y % 2 == 0:
                sett.add(y)
            if (x // y) % 2 == 0:
                sett.add(x // y)
            if len(sett) > 6:
                return sorted(sett)
    return sorted(sett)

for x in range(95632, 95700+1):
    sett = F(x)
    if len(sett) == 6:
        print(*sett)
# Ответ:
# #2 10 50 3826 19130 95650
# 2 26 338 566 7358 95654
# 2 4 8 23918 47836 95672
'''

# Тип 25 № 33770
# Найдите все натуральные числа, принадлежащие отрезку [106_000_000;107_000_000], у которых ровно три различных чётных делителя.
# В ответе перечислите найденные числа в порядке возрастания.
'''
def F(x):
    sett = set()
    for y in range(1, int(x  0.5) + 1):
        if x % y == 0:
            if y % 2 == 0:
                sett.add(y)
            if (x // y) % 2 == 0:
                sett.add(x // y)
            if len(sett) > 3:
                return sorted(sett)
    return sorted(sett)

for x in range(106000000, 107000000 + 1):
    sett = F(x)
    if len(sett) == 3:
        print(*sett)
# Ответ:
# 2 14566 106084178
# 2 14594 106492418
# 2 14614 106784498
# 2 14618 106842962
# Очень долго считалось
'''


# Тип 25 № 27422
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [174457;174505],
# числа, имеющие ровно два различных натуральных делителя,
# не считая единицы и самого числа.
# Для каждого найденного числа запишите эти два делителя в два соседних столбца на экране с новой
# строки в порядке возрастания произведения этих двух делителей.
# Делители в строке также должны следовать в порядке возрастания.

def F(x):
    sett = set()
    for y in range(2, int(x ** 0.5) + 1):
        if x % y == 0:
            sett.add(y)
            sett.add(x // y)
            if len(sett) > 2:
                return sorted(sett)
    return sorted(sett)

for x in range(174457, 174505 + 1):
    sett = F(x)
    if len(sett) == 2:
        print(* sett)
'''
# Ответ:
# 3 58153
# 7 24923
# 59 2957
# 13 13421
# 149 1171
# 5 34897
# 211 827
# 2 87251

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Тип 25 № 46983
'''
# Пусть M(N) — пятый по величине делитель натурального числа N без учёта самого числа и единицы.
#
# Если у числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M(N)=0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 460_000_000, для которых M(N)>0.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
            if len(dl) > 10:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(460_000_000+1, 1_000_000_000):
    dl = D(x)
    if len(dl) >= 5:
        M = dl[-5]
        if M > 0:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 41818182
# 261959
# 5
# 271
# 57500001



# Тип 25 № 39254
'''
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 500_000_000, для которых 0<M(N)<N.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
            if len(dl) > 10:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(500_000_000+1, 1_000_000_000):
    dl = D(x)
    if len(dl) >= 5:
        M = dl[0] * dl[1] * dl[2] * dl[3] * dl[4]
        if 0 < M < x:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 1008
# 1797092
# 48408867
# 1800
# 1156923


# Тип 25 № 33495
# Рассмотрим произвольное натуральное число, представим его всеми возможными способами в виде произведения двух натуральных чисел
# и найдём для каждого такого произведения разность сомножителей.
# Например, для числа 16 получим: 16=16*1=8*2=4*4, множество разностей содержит числа 15, 6 и 0.
# Найдите все натуральные числа, принадлежащие отрезку [2000000;3000000], у которых составленное
# описанным способом множество разностей будет содержать не меньше трёх элементов, не превышающих 115.
# В ответе перечислите найденные числа в порядке возрастания.

'''
def D(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            if (x // j) - j <= 115:
                dl.add((x // j) - j)
                if len(dl) > 3:
                    return sorted(dl)
    return sorted(dl)

for x in range(2000000, 3000000+1):
    dl = D(x)
    if len(dl) >= 3:
        print(x)
'''
# Ответ:
# 2053440
# 2098080
# 2328480
# 2638944

# Вариант 2
'''
for x in range(2000000, 3000001):
    k = 0
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            if (abs(x / j) - j) <= 115:
                k += 1
    if k > 2:
        print(x)
'''




# Тип 25 № 37130
'''
# Напишите программу, которая перебирает целые числа, большие 600_000, в порядке возрастания и ищет среди них такие,
# среди делителей которых есть хотя бы одно число, оканчивающееся на 7, но не равное 7 и самому числу.
# Необходимо вывести первые 5 таких чисел, и наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу.
#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число,
# затем — наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу.
# Строки выводятся в порядке возрастания найденных чисел.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            if j != 7 and j % 10 == 7:
                dl.add(j)
            if (x//j) % 10 == 7:
                dl.add(x // j)
    return sorted(dl)

k = 0
for x in range(600000+1, 1000000):
    dl = D(x)
    if len(dl) != 0:
        print(x, dl[0])
        k += 1
        if k == 5:
            break
'''
# 600001 437
# 600002 47
# 600003 1227
# 600005 217
# 600012 16667



# Тип 25 № 45259
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.
#
# Количество строк в таблице для ответа избыточно.

for x in '0123456789':
    for y in '0123456789':
        A = int(f'12345{x}7{y}8')
        if A % 23 == 0:
            print(A, A // 23)
'''
# Ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816



# Тип 25 № 47229
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.


# print(10**10)
# print(f'1?2139{9999}4')
my_dict = {}
for y in range(0, 1000):
    for x in '0123456789':
        A = int(f'1{x}2139{y}4')
        if A % 2023 == 0:
            my_dict[A] = A // 2023
for key in sorted(my_dict):
    print(key, my_dict[key])
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048


# endregion Урок: ******************************************************************************


# todo: Степан = [2, 5, 8, 14+, 15+, 16, 19, 20, 21, 23, 25.2], на следующем уроке: 16 на глубину рекурсии, 17 номер