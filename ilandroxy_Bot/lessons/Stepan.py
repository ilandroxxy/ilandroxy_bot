# region Домашка: ******************************************************************************

# Тип 17 № 37347
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, для которых произведение элементов не кратно 14,
# затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0,len(M)-1):
    for j in range(i + 1, len(M)):
        if (M[i] * M[j]) % 14 != 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Ответ: 40436496 19999
# Не понял почему тут нужен второй форик, пробовал без него
(как мы делали на уроке) - не получилось.
'''

# Тип 17 № 37354
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, у которых сумма нечётна,
# а произведение делится на 5, затем максимальную из сумм элементов таких пар. В данной задаче под парой подразумевается
# два различных элемента последовательности. Порядок элементов в паре не важен.
import collections.abc

'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    for j in range(i + 1, len(M)):
        if ((M[i] + M[j]) % 2 != 0 and (M[i] * M[j]) % 5 == 0):
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Ответ: 9082691 19995
# Ситуация аналогичная первой задаче.
'''

# Тип 17 № 37357
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, у которых сумма элементов кратна 8,
# затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    for j in range(i + 1, len(M)):
        if ((M[i] + M[j]) % 8 == 0):
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Ответ: 6243772 19992
# Ситуация аналогичная первой задаче.
'''

# Тип 24 № 27693
# Текстовый файл состоит не более чем из 10**6 символов A, B и C. Определите максимальное количество идущих подряд символов C.
'''
s = open('241.txt').readline()
s = s.replace('A', ' ').replace('B', ' ')
M = [len(i) for i in s.split()]
print(M)
print(max(M))
# Ответ: 1
'''

# Тип 24 № 27695
'''
# Текстовый файл состоит не более чем из 10**6 символов L, D и R.
# Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.

M = open('24.txt').readline()
count = 0
maxi = 0
for i in range(1, len(M)-1):
    if M[i] != M[i+1]:
        count += 1
        maxi = max(maxi, count)
    else:
        count = 1
print(maxi)
'''
# Ответ: 45


# Тип 24 № 27694
# Текстовый файл состоит не более чем из 10**6 символов A, B и C. Определите максимальную длину цепочки вида ABABAB...
# (составленной из фрагментов AB, последний фрагмент может быть неполным).
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
'''
print(open('243.txt').readline())
print(len('ABABABABABABABABABABABAB'))
# Ответ: 24
'''

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************


# Тип 24 № 35913
'''
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# Необходимо найти строку, содержащую наименьшее количество букв N (если таких строк несколько, надо взять ту, которая находится в файле раньше),
# и определить, какая буква встречается в этой строке чаще всего.
# Если таких букв несколько, надо взять ту, которая позже стоит в алфавите.

s = open('24.txt').readlines()

mini = 99999
r = ''
for x in s:
    if mini > x.count('N'):
        mini = x.count('N')
        r = x

alphabet = 'QWERTYUIOPASDFGHJKLZXCVBNM'
maxi = -99999
for a in alphabet:
    if maxi <= r.count(a):
        maxi = r.count(a)
        print(maxi, a)
'''
# Ответ: Y


# Тип 24 № 29672
'''
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
# Определите количество строк, в которых буква E встречается чаще, чем буква A.

s = open('24.txt').readlines()
count = 0
for x in s:
    if x.count('E') > x.count('A'):
        count += 1
print(count)
'''
# Ответ: 467


# Тип 24 № 35998
'''
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# В строках, содержащих менее 25 букв A, нужно определить и вывести максимальное расстояние между одинаковыми буквами в одной строке.

s = open('24.txt').readlines()
M = []
for x in s:
    if x.count('A') < 25:  # # В строках, содержащих менее 25 букв A
        M.append(x)

alphabet = 'QWERTYUIOPASDFGHJKLZXCVBNM'
maxi = 0
for x in M:
    for a in alphabet:
        maxi = max(maxi, x.rindex(a) - x.index(a))  # конец минус начало - будет длина
print(maxi)
'''
# Ответ: 1004


# Тип 24 № 33769
'''
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите символ, который чаще всего встречается в файле после двух одинаковых символов.
s = open('24.txt').readline()
M = []
for i in range(0, len(s)-2):
    if s[i] == s[i+1]:
        M.append(s[i+2])

alhabet = 'QWERTYUIOPASDFGHJKLZXCVBNM'
r = ''
maxi = 0
for a in alhabet:
    if maxi < M.count(a):
        maxi = M.count(a)
        r = a
print(r, maxi)
'''

# Тип 24 № 38602
'''
# Текстовый файл состоит из символов P, Q, R и S.
# Определите максимальное количество идущих подряд символов в прилагаемом файле, среди которых нет идущих подряд символов P.
# Для выполнения этого задания следует написать программу.

s = open('24.txt').readline()
s = s.replace('PP', ' ')
M = [len(i) for i in s.split()]
print(1+max(M)+1)
'''
# Ответ:


'''
# Текстовый файл состоит из символов A, C, D, F и O.
# Определите максимальное количество идущих подряд пар символов вида
# согласная + гласная

s = open('24.txt').readline()
sogl = 'CDF'
glas = 'AO'

count = 0
maxi = 0
r = ''
for i in range(0, len(s)-1):
    if (s[i] in sogl and s[i+1] in glas) or (s[i+1] in sogl and s[i] in glas):
        count += 1
        if maxi < count:
            maxi = count
            r += s[i]
            print(r)
    else:
        count = 0
print(maxi / 2)
'''
# Ответ: 95

# Тип 9 № 45243
# Откройте файл электронной таблицы, содержащей в каждой строке пять натуральных чисел.
# Определите количество строк таблицы, в которых квадрат суммы максимального и минимального чисел в строке больше суммы квадратов трёх оставшихся.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if (M[0] + M[4]) ** 2 > (M[1]**2 + M[2]**2 + M[3]**2):
        count += 1
print(count)
'''
# Ответ: 2640


# Тип 9 № 27527 i
# Откройте файл электронной таблицы, содержащей вещественные числа — результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Сколько раз встречалась температура, которая была ниже среднего арифметического значения округленного до десятых, но выше удвоенного минимального значения?
'''
count = 0
A = []
for s in open('9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    A += M

for x in A:
    if x < (sum(A)/len(A)) and x > min(A) * 2:
        count += 1
print(count)
'''
# Ответ: 640


# endregion Урок: ******************************************************************************


# todo: Степан = [2, 5, 8, 14+, 15+, 16, 17, 19, 20, 21, 23, 24, 25.2]
# на прошлом уроке: Продолжали работать с 24 номером и 9 номером (чуть-чуть)
# на следующем уроке: Продолжаем работать 9 номером и можно переходить к экселям