# region Домашка: ******************************************************************************

#Домашняя работа
'''
#Тип 8 № 3515
#Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке.
#Вот начало списка:
#1.ААААА
#2.ААААО
#3.ААААУ
#4.АААОА
#Сколько букв А встречается в слове, стоящем на 101-м месте от начала списка.

s = 'АОУ'
M = [0]
count = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                  temp = a + b + c + d + e
                  M.append(temp)
                  if count == 101:
                    print(count, temp, M[101], temp.count('А'), M[101].count('А'))
                  count += 1
 '''
#Ответ: 2




#Тип 12 № 26986
'''
# Дана программа для Редактора:
# НАЧАЛО
# ПОКА нашлось (49) ИЛИ нашлось (97) ИЛИ нашлось (47)
# ЕСЛИ нашлось (47)
# ТО заменить (47, 74)
# КОНЕЦ ЕСЛИ
# ЕСЛИ нашлось (97)
# ТО заменить (97, 79)
# КОНЕЦ ЕСЛИ
# ЕСЛИ нашлось (49)
# ТО заменить (49, 94)
# КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
# КОНЕЦ
# На вход приведённой ниже программе поступает строка, содержащая 40 цифр 7, 40 цифр 9 и 50 цифр 4, расположенных в произвольном порядке.
# Запишите без разделителей символы, которые имеют порядковые номера 25, 71 и 105 в получившейся строке.

s = '7' * 40 + '9' * 40 + '4' * 50
while '49' in s or '97' in s or '47' in s:
    if '47' in s:
        s = s.replace('47', '74', 1)
    if '97' in s:
        s = s.replace('97', '79', 1)
    if '49' in s:
        s = s.replace('49', '94', 1)
    exit()
print(s)
print(s[25-1], s[71-1], s[105-1])

count = 1
for x in s:
    if count == 25:
        print(x)
    if count == 71:
        print(x)
    if count == 105:
        print(x)
    count += 1


M = [s[i] for i in range(0, len(s)) if i == (25-1) or i == (71 - 1) or i == (105-1)]
print(M)
'''
#Ответ: 794


'''
# Тип 12 № 10415
# Ниже приведена программа для исполнителя Редактор.
# НАЧАЛО
# ПОКА нашлось (133) ИЛИ нашлось (881)
# ЕСЛИ нашлось (133)
# ТО заменить (133, 81)
# ИНАЧЕ заменить (881, 13)
# КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
# КОНЕЦ
# На вход этой программе подается строка, состоящая из 100 цифр; последняя цифра в строке— цифра 1, а остальные цифры— восьмёрки.
# Какая строка получится в результате применения программы к этой строке? В ответе запишите

s = '8' * 99 + '1'
while '133' in s or '881' in s:
    if '133' in s:
        s = s.replace('133', '81', 1)
    else:
        s = s.replace('881', '13', 1)
print(s)
#Ответ: 813
'''

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************
'''
def MyNOD(a, b):
    mini = min(a, b)

    r = 0
    for i in range(1, mini+1):
        if a % i == 0 and b % i == 0:
            r = i
    return r

print(MyNOD(16, 36))


def MySum(*args):
    summ = 0
    for x in args:
        summ += x
    return summ

a = 5
b = 6
c = 7
print(MySum(a, b, c, 5, 6))
'''

# Тип 23 № 18091
'''
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
#
# Сколько существует программ, для которых при исходном числе 3 результатом является число 37 и при этом траектория вычислений содержит число 18?

def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a * 2, b)

print(F(3, 18) * F(18, 37))
'''
# Ответ: 28




# Тип 23 № 18503
'''
# Исполнитель РазДваТри преобразует число на экране.
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
#
# Сколько существует программ, которые преобразуют исходное число 1 в число 15,
# и при этом траектория вычислений содержит число 10 и не содержит числа 13?

def F(a, b):
    if a > b or a == 13:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 2, b) + F(a * 3, b)

print(F(1, 10) * F(10, 15))
'''
# Ответ: 168


# Тип 16 № 6189
'''
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(1) = 1; F(2) = 1;
# F(n) = F(n – 2) * n при n > 2.
#
# Чему равно значение функции F(7)? В ответе запишите только натуральное число.


def F(n):
    if n > 2:
        return F(n - 2) * n
    if n == 1:
        return 1
    if n == 2:
        return 1

print(F(7))
'''
# Ответ: 105



# Тип 16 № 33188
'''
# Обозначим через a mod b остаток от деления натурального числа a на натуральное число b. Алгоритм вычисления значения функции F(n),
# где n — натуральное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = n + F(n − 3), если n mod 3=0, и n>0;
# F(n) = n + F(n − (n mod 3)), если n mod 3>0.
#
# Чему равно значение функции F(22)?

def F(n):
    if n == 0:
        return 0
    if n % 3 == 0 and n > 0:
        return n + F(n - 3)
    if n % 3 > 0:
        return n + F(n - (n % 3))

print(F(22))
'''
# Ответ: 106



# Тип 16 № 39245
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 900 и F(n) = 9?

def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0
for n in range(1, 900+1):
    if F(n) == 9:
        count += 1
print(count)
'''


# Тип 16 № 4653
'''
# Последовательность чисел Люка задается рекуррентным соотношением:
#
# F(1) = 2
# F(2) = 1
# F(n) = F(n–2) + F(n–1), при n > 2, где n – натуральное число.
#
# Чему равно десятое число в последовательности Люка?
# В ответе запишите только натуральное число.

def F(n):
    if n == 1:
        return 2
    if n == 2:
        return 1
    if n > 2:
        return F(n-2) + F(n-1)

print(F(10))
'''
# Ответ: 76



# endregion Урок: ******************************************************************************




# todo: Степан = [2, 5, 8, 14+, 19, 20, 21], на следующем уроке: Разбираем теорию функций, 16 и 23 номера