# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# КЕГЭ № 8158 /dev/inf 05.23 (Уровень: Базовый) (А. Рогов)
# Операнды арифметического выражения записаны в системе счисления с основанием 15.
#
# 1x51_15 − 3x2_15
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита 15-ричной системы счисления.
# Определите наибольшее значение x, при котором значение данного выражения кратно 4.
# Для найденного x вычислите частное от деления данного выражения на 4
# и запишите его в ответе в десятичной системе счисления.
# Основание системы счисления указывать не нужно.
'''
R = []
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:15]:
    A = int(f'1{x}51', 15)
    B = int(f'3{x}2', 15)
    if (A - B) % 4 == 0:
        R.append((A - B) // 4)
print(max(R))
'''
'''
print(int('1000', 2))  # 8 - 1000_2
'''


# КЕГЭ № 4963 (Уровень: Средний) (В. Шубинкин)
# Операнды арифметического выражения записаны в системах счисления с основаниями 15 и 17.
# 123x5_15 + 67y9_17
# В записи чисел переменными x и y обозначены неизвестные цифры
# из алфавитов 15-ричной и 17-ричной систем счисления соответственно.
# Определите значения x, y, при которых значение данного арифметического выражения кратно 131.
# Для найденных значений x, y вычислите частное от деления значения арифметического выражения на 131
# и укажите его в ответе в десятичной системе счисления. Если можно выбрать x, y не единственным образом,
# возьмите ту пару, в которой значение y меньше.
# Основание системы счисления в ответе указывать не нужно.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:15]:
    for y in alphabet[:17]:
        A = int(f'123{x}5', 15)
        B = int(f'67{y}9', 17)
        if (A + B) % 131 == 0:
            print(y, (A + B) // 131)
'''


# КЕГЭ № 8953 Джобс 02.06.2023 (Уровень: Базовый) (Е. Джобс)
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = 1, если n≥10000
# F(n) = F(n+3) + 7, если n<10000 и четное
# F(n) = F(n+1) − 3, если n<10000 и нечетное
# Чему равно значение выражения F(50)−F(57)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n >= 10000:  # F(n) = 1, если n≥10000
        return 1
    if n < 10000 and n % 2 == 0:  # F(n) = F(n+3) + 7, если n<10000 и четное
        return F(n+3) + 7
    if n < 10000 and n % 2 != 0:  # F(n) = F(n+1) − 3, если n<10000 и нечетное
        return F(n+1) - 3

print(F(50) - F(57))

# F(50) = F(53) + 7
# F(53) = F(54) − 3
# F(54) = F(57) + 7 - F(57)
print(7-3+7)
'''
# RecursionError: maximum recursion depth exceeded


# КЕГЭ № 1020 100 базовых задач Е. Джобс (Уровень: Базовый)
# Алгоритм вычисления функции F(n) задан следующими соотношениями:
#
# F(n) = 3 при n≤3
# F(n) = F(n//2) + 5 при четных n>3
# F(n) = F(n−1) − F(n−2) при нечетных n>3
#
# Здесь «//» обозначает деление нацело.
# Определите значение, полученное при вызове F(20).
'''
def F(n):
    if n <= 3:
        return 3
    if n > 3 and n % 2 == 0:
        return F(n//2) + 5
    if n > 3 and n % 2 != 0:
        return F(n-1) - F(n-2)

print(F(20))
'''

'''
# print(7 / 2)    # 3.5
# print(7 // 2)  # 3
# print(7 % 2)  # 1
'''


# КЕГЭ № 2152 (Уровень: Базовый)
# 1. Прибавить 4
# 2. Прибавить 10
# 3. Сделать нечётное
#
# Сколько существует программ, которые исходное число 2 преобразуют в число 27?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 4, b) + F(a + 10, b) + F(a*2+1, b)


print(F(2, 27))

# Вариант 2
def F(a, b):
    if a >= b:
        return a == b
    return F(a + 4, b) + F(a + 10, b) + F(a*2+1, b)


print(F(2, 27))
'''

# КЕГЭ № 2129 Danov2201 (Уровень: Базовый) (А. Богданов)
# 1. Прибавить 1
# 2. Прибавить 2
#
# Сколько существует программ, для которых при исходном числе 3 результатом является число 13,
# и при этом траектория вычислений не проходит через число 8.
'''
def F(a, b):
    if a > b or a == 8:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b)


print(F(3, 13))
'''


# КЕГЭ № 7093 OpenFIPI (Уровень: Базовый)
#
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
#
# Сколько существует программ, для которых при исходном числе 4 результатом является число 22
# и при этом траектория вычислений содержит число 10, но не содержит число 20?
'''
def F(a, b):
    if a > b or a == 20:  # не содержит число 20?
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 2, b) + F(a * 3, b)


print(F(4, 10) * F(10, 22))  # содержит число 10
'''

x = 4**2015 + 2**2015 - 15
n = 2
M = []
while x > 0:
    M.append(x % n)
    x //= n
M.reverse()
print(M.count(1))

# Вариант 2
print(bin(4**2015 + 2**2015 - 15).count('1'))


# endregion Урок: ******************************************************************


# Лиза = [2.1, 6.1, 8.1, 12.1, 14.1, 15.1, 16.1, 23.1]
# КЕГЭ  = []
# на следующем уроке:
