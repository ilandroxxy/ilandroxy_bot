# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 23 №10325
# 1. Прибавить 1
# 2. Прибавить 2
# Сколько существует программ, для которых при исходном числе 1 результатом является число 12
# и при этом траектория вычислений содержит число 7?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b)


print(F(1, 7) * F(7, 12))


# Вариант 2
def F(a, b):
    if a >= b:
        return a == b
    return F(a+1, b) + F(a+2, b)


print(F(1, 7) * F(7, 12))
'''
# Ответ: 104


# Тип 23 №58214
# 1. Вычти 1;
# 2. Найди целую часть от деления на 3.
# Сколько существует программ, для которых при исходном числе 67 результатом является число 5,
# и при этом траектория вычислений содержит число 33?
'''
def F(a, b):
    if a <= b:
        return a == b
    return F(a-1, b) + F(a//3, b)


print(F(67, 33) * F(33, 5))
'''
# Ответ: 20


# Тип 23 №13418
# 1. прибавь 1
# 2. сделай нечётное
# Первая из этих команд увеличивает число x на экране на 1, вторая переводит число x в число 2x+1.
# Сколько существует таких программ, которые число 1 преобразуют в число 27,
# причём траектория вычислений не содержит число 26?
'''
def F(a, b):
    if a >= b or a == 26:
        return a == b
    return F(a+1, b) + F(a*2+1, b)


print(F(1, 27))
'''
# Ответ: 13


# Тип 15 №27244
# Для какого наибольшего целого неотрицательного числа А выражение
# (x·y < 121) ∨ (y > A) ∨ (x ≥ A)
# тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?
'''
for A in range(300, -1, -1):
    k = 0
    for x in range(300):
        for y in range(300):
            if (x * y < 121) or (y > A) or (x >= A):
                k += 1
    if k == 90_000:
        print(A)
        break
'''

'''
def F(x, y, A):
    return (x*y < 121) or (y > A) or (x >= A)


R = []
for A in range(0, 1000):
    if all(F(x, y, A) for x in range(0, 100) for y in range(0, 100)):
        R.append(A)
print(max(R))


# Вариант 2
print(max([A for A in range(0, 1000) if all(((x*y < 121) or (y > A) or (x >= A)) for x in range(0, 100) for y in range(0, 100))]))
'''
# Ответ: 11


# Тип 15 №34513
# Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n.
# Для какого наименьшего неотрицательного целого числа А формула
# x&33 = 0 → (x&45≠0 → x&А ≠ 0)
# тождественно истинна (т. е. принимает значение 1 при любом неотрицательном целом значении переменной х)?
'''
def F(x, A):
    return (x&33 == 0) <= ((x&45 != 0) <= (x&A != 0))


R = []
for A in range(0, 1000):
    if all(F(x, A) for x in range(0, 10000)):
        R.append(A)
print(min(R))
'''
# Ответ: 12


# Тип 15 №35904
# Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
# Для какого наименьшего натурального числа А формула
# ДЕЛ(A, 40) ∧ (ДЕЛ(780, x) → (¬ДЕЛ(A, x) → ¬ДЕЛ(180, x)))
# тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной x)?
'''
def F(x, A):
    return (A % 40 == 0) and ((780 % x == 0) <= ((A % x != 0) <= (180 % x != 0)))


R = []
for A in range(1, 1000):
    if all(F(x, A) for x in range(1, 10000)):
        R.append(A)
print(min(R))
'''
# Ответ: 120


# Тип 15 №34535
# На числовой прямой даны три отрезка: P = [10, 40], Q = [5, 15] и R = [35, 50].
# Какова наименьшая возможная длина промежутка A, что формула
# ( (x ∈ А) ∨ (x ∈ P) ) ∨ ((x ∈ Q)→ (x ∈ R))
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x, a1, a2):
    P = 10 <= x <= 40
    Q = 5 <= x <= 15
    R = 35 <= x <= 50
    A = a1 <= x <= a2
    return (A or P) or (Q <= R)


R = []
M = [x / 10 for x in range(0 * 10, 60 * 10)]
print(M)
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2-a1)
print(min(R))
'''
# Ответ: 4.75 -> 4.80 -> 4.9 -> 5


# endregion Урок: ******************************************************************


# Лиза = [2.1, 6.1, 8.1, 12.1, 14.1, 15.1, 16.1, 23.1]
# КЕГЭ  = []
# на следующем уроке:
