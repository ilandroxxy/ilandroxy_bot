# region Домашка:


# Тип 2 № 38936
'''
# Логическая функция F задаётся выражением (x ≡ ¬y) → ((x ∧ w) ≡ (z ∧ ¬w)).
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z, w.
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x == (not (y))) <= ((x and w) == (z and (not (w))))
                if F == False:
                    print(x, y, z, w, F)
'''
# Ответ: wxyz



# 45236
'''
# Миша заполнял таблицу истинности логической функции F
#
# (not(x <= w)) or (y == z) or y
#
# но успел заполнить лишь фрагмент из трёх различных её строк, даже не указав, какому столбцу 
# таблицы соответствует каждая из переменных w, x, y, z

print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (not(x <= w)) or (y == z) or y
                if F == False:
                    print(x, y, z, w, F)

'''


#Тип 2 № 29650
#Логическая функция F задаётся выражением (w ∨ ¬x) ∧ (w ≡ ¬y) ∧ (w → z). 
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z, w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (w or (not(x))) and (w == (not(y))) and (w <= z)
                if F == True:
                    print(x, y, z, w, F)

'''

# endregion Домашка:


# region Урок:

# Теория списков
# Список (массив) - это коллекция - позволяющая хранить несколько элементов и изменять эти элементы прямо в списке.
# У каждого элемента списка есть свой порядковый номер (index), счет начинается с 0
'''
A = []  # пустой список
M = [4, 5, 6, 7]
#+i  0  1  2  3
#-i -4 -3 -2 -1

print(M[0])  # первый элемент списка
print(M[-1])  # последний элемент списка


M[0] = 99  # элементы списков можно менять, если мы знаем их индекс 
print(M)
'''

# Работа через циклы со списками
'''
M = [4, 5, 6, 7]

print(len(M))  # функция len() возвращает длину списка (кол-во элементов в нем)

for x in M:  # случай когда бежим напрямую по списку и x принимает значение элементов списка
    print(x, end=" ")
print()


for i in range(0, len(M)):  # случай когда мы пробигаем элементы списка через их индексы
    print(M[i], end=' ')
print()


for i in range(0, len(M)):  # через индексы мы можем менять элементы списков 
    M[i] = M[i] ** 2
print(M)
'''

# Функции списков
'''
M = [4, 5, 5, 4, 3, 4, 5, 6, 7]
print(len(M))  # функция len() возвращает длину списка (кол-во элементов в нем)
print(sum(M))
print(min(M))
print(max(M))

A = set(M)  # по факту мы поменяли тип данных с list() на set() множество - откинули все повторяющиеся элементы
print(A, len(A))
'''


# Методы списков
'''
M = [4, 5, 5, 4, 3]
M.append(4)
M.append(0)
M.append(5)  # добавление элемента в конец списка
print(M)

M.reverse()  # перевернули список
print(M)

M.append(1)  # по факту добавили элемент слева
M.reverse()
print(M)

print(M.count(5))  # кол-во 5 в списке M

M.sort()  # отсортировали по возрастанию
print(M)
M.reverse()  # поменяли на убывание
print(M)

print(M.index(4))  # возвращает индекс первого найденого числа

x = M.pop(3)  # забрали элемент под индексом 3 и положили его в x
print(M, x)
'''

'''
x = 8
M = []
while x > 0:
    M.append(x % 2)
    x //= 2
M.reverse()
print(M)
'''

# Тип 14 № 18497
'''
# Значение выражения 6*343**5 + 5*49**7 − 50 записали в системе счисления с основанием 7.
# Сколько цифр 6 содержится в этой записи?

x = 6*343**5 + 5*49**7 - 50
M = []
while x > 0:
    M.append(x % 7)
    x //= 7
M.reverse()
print(M, M.count(6))
'''
# Ответ: 14


# Тип 14 № 27385
'''
# Значение выражения 343**5 + 343**4 + 49**6 − 7**13 − 21 записали в системе счисления с основанием 7.
# Сколько различных цифр содержит эта запись?
#
# Пример. Запись 1222337 содержит три различные цифры: 1, 2 и 3.

x = 343**5 + 343**4 + 49**6 - 7**13 - 21
M = []
while x > 0:
    M.append(x % 7)
    x //= 7
M.reverse()
print(M)

A = set(M)
print(A, len(A))
'''
# Ответ: 4
# endregion Урок:


# todo: Екатерина = [2], на следующем уроке: разбираем списки и начало 14 номера
