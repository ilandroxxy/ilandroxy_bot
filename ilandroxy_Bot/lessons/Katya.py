# region Домашка:  ******************************************************************************

'''
#Тип 8 № 9162 Добавить в вариант
#Все 4-буквенные слова, составленные из букв М, С, Т, Ф, записаны
#в алфавитном порядке.
#Вот начало списка:
#1.ММММ
#2.МММС
#3.МММТ
#4.МММФ
#5.ММСМ
#Запишите слово, которое стоит на 138-м месте от начала списка.
s = 'МСТФ'
M = ['0']
for a in s:
    for b in s:
        for c in s:
            for d in s:
                temp = a + b + c + d
                M.append(temp)
print(M[138])
#ответ: тмтс
'''

'''
#Тип 8 № 3233 Добавить в вариант
#Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:
#1.ААААА
#2.ААААК
#3.ААААР
#4.ААААУ
#5.АААКА
#Запишите слово, которое стоит на 250-м месте от начала списка.
s = 'АКРУ'
M = ['0']
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    M.append(temp)
print(M[250])
ответ: ауурк
'''


'''
#Тип 12 № 18716
#Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 79 семёрок?
#НАЧАЛО
#ПОКА нашлось (7777) ИЛИ нашлось (3333)
#ЕСЛИ нашлось (3333)
#ТО заменить (3333, 77)
#ИНАЧЕ
#заменить (7777, 33)
#КОНЕЦ ЕСЛИ
#КОНЕЦ ПОКА
s = '7' * 79
while '7777' in s or '3333' in s:
    if '3333' in s:
        s = s.replace('3333', '77', 1)
    else:
        s = s.replace('7777', '33', 1)
print(s)
#ответ: 33777
'''

'''
#Тип 12 № 33757
#Дана программа для редактора:
#НАЧАЛО
#ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
#заменить (01, 30)
#заменить (02, 101)
#заменить (03, 202)
#КОНЕЦ ПОКА
#КОНЕЦ
#Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки.
#После выполнения данной программы получилась строка, содержащая 20 единиц, 10 двоек и 70 троек.
#Сколько единиц было в исходной строке?

for x in range(50, 51):
    for y in range(1, 100):  # 1000000 000
        for z in range(1, 100):
            s = '0' + '1' * x + '2' * y + '3' * z
            while '01' in s or '02' in s or '03' in s:
                s = s.replace('01', '30', 1)
                s = s.replace('02', '101', 1)
                s = s.replace('03', '202', 1)
            if s.count('1') == 20 and s.count('2') == 10 and s.count('3') == 70:
                print(x)
                exit()
'''



'''
#Тип 12 № 15951
#Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 98 единиц?
#НАЧАЛО
#ПОКА нашлось (1111)
#заменить (1111, 22)
#заменить (222, 1)
#КОНЕЦ ПОКА
s = '1' * 98
while '1111' in s:
    s = s.replace('1111', '22', 1)
    s = s.replace('222', '1', 1)
print(s)
#ответ: 12
'''

# endregion Домашка:  ******************************************************************************



# region Урок:  ******************************************************************************

# Примеры функций:
'''
len()
max()
print()
range()
int()
str()
tuple()
set()
list()
'''


# Методы - это функции, но направленные на определенный объект (како-то типа)
# Методы списков
'''
.append()
.reverse()
.index()
.count()
.pop()
.copy()
'''

# Методы строк
'''
.replace()
.split()
.join()
.count()
.index()
.rindex()
'''

# Мы можем создавать свои функции:
'''
def mysum(*args):
    summ = 0
    for x in args:
        summ += x
    return summ

def name(arg1, arg2, arg3, *arg):
    result = 0
    return result

def srd(x, y, z):  # функция возвращает среднее из трех чисел
    sred = mysum(a, b, c) - min(a, b, c) - max(a, b, c)
    return sred

a, b, c = 4, 5, 6
print(min(a, b, c), max(a, b, c), srd(a, b, c))

M = [3, 4, 5, 6, -6, 7]
print(min(M), max(M), sum(M))


print(mysum(3, 4, 5, 6, 7))


def Simpler(x):
    if x == 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

for i in range(1, 1000):
    if Simpler(i) == True:
        print(i, end=' ')
'''


# Тип 23 № 14281
'''
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Прибавить 2
#
# Сколько существует программ, для которых при исходном числе 1 результатом является число 11?


def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b)

print(F(1, 11))
'''
# Ответ: 5


# Тип 23 № 7315
'''
# У исполнителя три команды, которым присвоены номера:
#
# 1. прибавь 1
# 2. сделай чётное
# 3. сделай нечётное.
#
# Сколько существует программ, которые число 1 преобразуют в число 15?

def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a*2, b) + F(a*2 + 1, b)

print(F(1, 15))
'''
# Ответ: 83


# Тип 23 № 27307
'''
# Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
#
# Сколько существует программ, которые преобразуют исходное число 3 в число 62, и при этом траектория вычислений содержит число 14 и не содержит числа 59?

def F(a, b):
    if a > b or a == 59:  # и не содержит числа 59
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a * 2, b)

print(F(3, 14) * F(14, 62))  # при этом траектория вычислений содержит число 14
'''
# Ответ: 48


# Тип 16 № 4657
'''
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = 2 * G(n–1) + 5 * n, при n >1

# G(1) = 1
# G(n) = F(n–1) + 2 * n, при n >1
#
# Чему равно значение функции F(4) + G(4)?
# В ответе запишите только натуральное число.


def F(n):
    if n == 1:
        return 1
    if n > 1:
        return 2 * G(n - 1) + 5 * n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return F(n - 1) + 2 * n

print(F(4) + G(4))
'''
# Ответ: 89


# endregion Урок:  ******************************************************************************


# todo: Екатерина = [2, 5, 8, 12, 14+], на следующем уроке: Добиваем 16 и 23 номера


