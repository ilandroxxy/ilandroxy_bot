# region Домашка:  ******************************************************************************


# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# –   символ «?» означает ровно одну произвольную цифру;
# –   символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8,
# делящиеся на число 68 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 68.
'''
from fnmatch import *
for x in range(68,10**9, 68):
    if fnmatch(str(x), '12345?7?8'):
        print(x, x // 68)
'''
# 123452708 1815481
# 123453728 1815496 123454748 1815511
# 123455768 1815526 123456788 1815541


# № 7623 Досрочная волна 2023 (Уровень: Базовый)
# Исполнитель преобразует число на экране. У исполнителя есть три команды, которым обозначены латинскими буквами:
# A. Прибавить 1
# B. Умножить на 2
# C. Умножить на 3
# Программа для исполнителя – это последовательность команд.
#
# Сколько существует программ, для которых при исходном числе 2 результатом является число 25,
# и при этом траектория вычислений содержит число 15, но не содержит число 11?
'''
def F(a, b):
    if a > b or a == 11:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a*3, b)
print(F(2,15) * F(15,25))
# 12
'''

# № 7599 Досрочная волна 2023 (Уровень: Базовый)
# Исполнитель Аллегро преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
# A. Прибавить 1
# B. Прибавить 2
# C. Умножить на 3
# Сколько существует программ, для которых при исходном числе 3 результатом является число 18
# и при этом траектория вычислений содержит число 8, но не содержит число 13?
'''
def F(a,b):
    if a > b or a == 13:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1,b) + F(a+2,b) + F(a*3,b)
print(F(3, 8) * F(8, 18))
# 200
'''


#
# № 7341 (Уровень: Базовый)
# (М.Шагитов) Исполнитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
# Сколько существует программ, для которых при исходном числе 1 результатом является число 40,
# при этом траектория вычислений содержит число 10 и не содержит 20?
'''
def F(a,b):
    if a > b or a == 20:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1,b) + F(a*2,b)
print(F(1,10) * F(10,40))
#126
'''

# № 7271 OpenFIPI (Уровень: Базовый)
# Исполнитель преобразует число на экране.У исполнителя есть две команды, которым присвоены номера:
# 1. Вычти 1
# 2. Найди целую часть от деления на 2
# Сколько существует программ, для которых при исходном числе 30 результатом является число 1,
# и при этом траектория вычислений содержит число 9?
'''
def F(a,b):
    if a < b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a-1,b) + F(a//2,b)
print(F(30,9) * F(9,1))
# 322
'''
# № 7093 OpenFIPI (Уровень: Базовый)
# Исполнитель Аллегро преобразует число на экране.
#
# У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
# Сколько существует программ, для которых при исходном числе 4 результатом является число 22
# и при этом траектория вычислений содержит число 10, но не содержит число 20?
'''
def F(a,b):
    if a > b or a == 20:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1,b) + F(a+2,b) + F(a*3,b)
print(F(4,10) * F(10,22))
# 715
'''

#
# № 6797 (Уровень: Средний)
# (PRO100 ЕГЭ) Исполнитель преобразует число на экране.
#
# У исполнителя есть четыре команды, которые обозначены латинскими буквами:
#     A. Прибавить 1
#     B. Прибавить 2
#     C. Прибавить 3
#     D. Умножить на 4
# Сколько существует программ, для которых при исходном числе 38 результатом является число 68,
# при этом траектория вычислений содержит число 45 и не содержит 58?
'''
def F(a,b):
    if a > b or a == 58:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1,b) + F(a+2,b) + F(a+3,b) + F(a*4,b)
print(F(38, 45) * F(45,68))
# 12685464
'''


# № 6756 Апробация 10.03.23 (Уровень: Базовый)
# Исполнитель преобразует число на экране.
#
# У исполнителя есть две команды, которые обозначены латинскими буквами:
# А. Вычти 2
# В. Найди целую часть от деления на 2
# Сколько существует программ, для которых при исходном числе 40 результатом является число 2,
# и при этом траектория вычислений содержит число 10?
'''
def F(a,b):
    if a < b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a-2,b) + F(a//2,b)
print(F(40,10) * F(10,2))
# 40
'''


# № 7825 (Уровень: Базовый)
# (М. Ишимов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

# Среди натуральных чисел, не превышающих 108, найдите все числа, соответствующие маске 1?0?6*39,
# делящиеся на 131 без остатка.
'''
from fnmatch import *
for x in range(131, 10**8, 131):
    if fnmatch(str(x),'1?0?6*39'):
        print(x, x//131)
'''
# 1004639 7669
# 10056739 76769
# 10096039 77069
# 11026139 84169
# 13056639 99669
# 14026039 107069
# 16056539 122569
# 19056439 145469


# № 7724 (Уровень: Базовый)
# (Грачев Н.) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# Найдите все натуральные числа, не превосходящие 109, для которых выполнены все условия:
# - соответствуют маске *18??18;
# - делятся на 18 и на 1018 без остатка;
'''
from fnmatch import *
for x in range(18, 10**9, 18):
    for y in range(1018, 10**9, 1018):
        if fnmatch(str(x), '*18??18'):
            if fnmatch(str(y), '*18??18'):
                print(x, x//18, y, y//1018)
# так и не поняла, какую-то фигню сделала
'''

# № 7625 Досрочная волна 2023 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
#
# Среди натуральных чисел, не превышающих 108, найдите все числа, соответствующие маске 11??4*56,
# делящиеся на 211 без остатка.
'''
from fnmatch import *
for x in range(211, 10**8, 211):
    if fnmatch(str(x), '11??4*56'):
        print(x, x//211)
'''
# 1117456 5296
# 11034456 52296
# 11224356 53196
# 11414256 54096
# 11604156 54996
# 11794056 55896


# № 7601 Досрочная волна 2023 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# Среди натуральных чисел, не превышающих 108 , найдите все числа, соответствующие маске 12??36*1,
# делящиеся на 273 без остатка.
'''
from fnmatch import *
for x in range(273,10**8,273):
    if fnmatch(str(x), '12??36*1'):
        print(x, x//273)
'''
# 1271361 4657
# 12633621 46277
# 12663651 46387
# 12693681 46497


# № 7273 OpenFIPI (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
#
# Среди натуральных чисел, не превышающих 109, найдите все числа, соответствующие маске 12345?7?8,
# делящиеся на число 23 без остатка.
'''
from fnmatch import *
for x in range(23, 10**9, 23):
    if fnmatch(str(x), '12345?7?8'):
        print(x, x//23)
'''

# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816


# № 7095 OpenFIPI (Уровень: Базовый)
# Назовём маской числа последовательность цифр,
# в которой также могут встречаться следующие символы:– символ «?» означает ровно одну произвольную цифру;

# Среди натуральных чисел, не превышающих 10**8, найдите все числа, соответствующие маске 1234*54,
# делящиеся на 21 без остатка.
'''
from fnmatch import *
for x in range(21, 10**8, 21):
    if fnmatch(str(x), '1234*54'):
        print(x, x//21)
'''
# 1234254 58774
# 12341154 587674
# 12343254 587774
# 12345354 587874
# 12347454 587974
# 12349554 588074


# endregion Домашка:  ******************************************************************************


# region Урок:  ******************************************************************************

#
# № 8504 Апробация 17.05 (Уровень: Базовый)
# В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых хотя бы один из элементов является трёхзначным числом,
# а сумма элементов пары кратна минимальному трёхзначному элементу последовательности, оканчивающемуся на 5.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
mini = min([i for i in M if len(str(i)) == 3 and str(i)[-1] == '5'])
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if len(str(M[i])) == 3 or len(str(M[i+1])) == 3:
        if (M[i] + M[i+1]) % mini == 0:
            count += 1
            maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 13 9500



# 17 № 8475 (Уровень: Средний)
# (В. Рыбальченко) В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от -10 000 до 10 000 включительно.
# Определите количество троек элементов, в которых только 2 числа в квадрате больше,
# чем квадрат минимального трехзначного числа в последовательности, оканчивающееся на 8,
# а также в тройке есть хотя бы одно трехзначное число.
#
# В ответе запишите два числа: сначала количество найденных троек, затем максимальную из сумм элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
mini = min([i for i in M if len(str(abs(i))) == 3 and str(i)[-1] == '8'])
count = 0
maxi = 0
for i in range(0, len(M)-2):
    if len(str(abs(M[i]))) == 3 or len(str(abs(M[i+1]))) == 3 or len(str(abs(M[i+2]))) == 3:
        flag1, flag2, flag3 = False, False, False
        if M[i] ** 2 > mini ** 2:
            flag1 = True
        if M[i+1] ** 2 > mini ** 2:
            flag2 = True
        if M[i+2] ** 2 > mini ** 2:
            flag3 = True
        if flag1 + flag2 + flag3 == 2:
            count += 1
            maxi = max(maxi, M[i] + M[i+1] + M[i+2])
print(count, maxi)
'''
# Ответ: 5312 20235


# № 7718 (Уровень: Средний)
# (Грачев Н.) В файле содержится последовательность целых неотрицательных чисел, не превышающих 10000.
# Определите количество пар элементов последовательности, в которых либо сумма элементов кратна 18,
# либо произведение элементов кратно 18. В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную сумму элементов этих пар.
# В данной задаче под парой подразумевается два различных элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        flag1, flag2 = False, False
        if (M[i] + M[j]) % 18 == 0:
            flag1 = True
        if (M[i] * M[j]) % 18 == 0:
            flag2 = True
        if flag1 + flag2 == 1:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
'''
# Ответ: 120400 19971



# № 6757 Апробация 10.03.23 (Уровень: Базовый)
# Текстовый файл состоит из символов С, D, Е и F.
# Определите максимальное количество идущих подряд последовательностей символов CFE или FCE в прилагаемом файле.
# Искомая подпоследовательность должна состоять только из троек CFE, или только из троек FCE,
# или только из троек CFE или FCE в произвольном порядке их следования.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
s = s.replace('CFE', '*').replace('FCE', '*')
for x in 'CDEF':
    s = s.replace(x, ' ')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 103


# № 6094 /dev/inf 02.2023 (Уровень: Средний)
# (А. Рогов) Текстовый файл состоит не более чем из 1 200 000 символов X, Y, и Z.
# Определите максимальное количество идущих подряд пар символов вида согласная + гласная
# среди которых нет подстроки XYZY.
# Для выполнения этого задания следует написать программу.
# Примечание. Букву Y считайте всегда гласной.
'''
s = open('24.txt').readline()
s = s.replace('XYZY', 'XYZ YZY')
s = s.replace('XY', '*').replace('ZY', '*')
for x in 'XYZ':
    s = s.replace(x, ' ')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 8


# № 5955 (Уровень: Средний)
# Текстовый файл состоит из символов A, C, D, F и O.
# Определите максимальное количество идущих подряд символов, среди которых нет подстроки вида
# согласная + гласная + гласная + согласная в прилагаемом файле.



'''
import itertools
M = []
for s in itertools.product('ACDFO', repeat=4):
    if s[0] in 'CDF' and s[1] in 'AO' and s[2] in 'AO' and s[3] in 'CDF':
        slovo = ''.join(s)
        M.append(slovo)

s = open('24.txt').readline()
for x in M:
    s = s.replace(x, '*** ***')
M = [len(i) for i in s.split()]
print(max(M))
'''

'''
s = open('24.txt').readline()
s = s.replace('C', 'D').replace('F', 'D')
s = s.replace('O', 'A')
s = s.replace('DAAD', 'DAA AAD')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 599






# endregion Урок:  ******************************************************************************

# todo: Екатерина = [1, 2, 3, 5, 6, 7.1, 8, 9.1, 11, 12, 14+, 15+, 16, 17, 18, 19-21, 22, 23, 25.2]
# todo:    КЕГЭ   = [8, 12, 15]
# на прошлом уроке:
# на следующем уроке: todo: не решаем: 23, 24, 25, 17


