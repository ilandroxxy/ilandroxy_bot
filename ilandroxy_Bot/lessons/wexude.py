# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 2 №15970
# Логическая функция F задаётся выражением (x ∧ ¬y) ∨ (y ≡ z ) ∨ w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x and (not y)) or (y == z) or w
                if not F:
                    print(x, y, z, w, int(F))
'''

# Тип 2 №28677
# Логическая функция F задаётся выражением ((x → y) ∨ (y ≡ w)) ∧ ((x ∨ z) ≡ w)
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x <= y) or (y == w)) and ((x or z) == w)
                if F:
                    print(x, y, z, w, int(F))
'''


# Тип 2 №56502
# Логическая функция F задаётся выражением:
#
# ((x → y)∨(z → w))∧((z ≡ y) → (w ≡ x)).
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x <= y) or (z <= w)) and ((z == y) <= (w == x))
                if not F:
                    print(x, y, z, w, int(F))
'''


# Тип 2№39231
# Логическая функция F задаётся выражением (¬z ≡ y) → ((w ∧ ¬x) ≡ (y ∧ x)).
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((not z) == y) <= ((w and (not x)) == (y and x))
                if not F:
                    print(x, y, z, w, int(F))
'''


# Тип 2 №27260
# Логическая функция F задаётся выражением ((x ∨ ¬y) ∧ (¬z ≡ w)) → (y ∧ z)

print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x or (not y)) and ((not z) == w)) <= (y and z)
                if not F:
                    print(x, y, z, w, int(F))


# Тип 16 №5458
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 2 при n ≤ 2;
# F(n) = F(n − 1) + 2 · F(n − 2) при n > 2.
#
# Чему равно значение функции F(5)? В ответе запишите только натуральное число.
'''
def F(n):
    if n <= 2:
        return 2
    if n > 2:
        return F(n - 1) + 2 * F(n - 2)


print(F(5))  # 22
'''


# Тип 23 №9808
# Исполнитель Май16 преобразует число на экране.
# 1. Прибавить 1
# 2. Умножить на 2
# Сколько существует программ, для которых при исходном числе 2 результатом является число 31
# и при этом траектория вычислений содержит число 15 и не содержит числа 22?
'''
def F(a, b):
    if a == b:
        return 1
    elif a > b or a == 22:
        return 0
    else:
        return F(a+1, b) + F(a*2, b)


print(F(2, 15) * F(15, 31))


# Вариант 2
def F(a, b):
    if a >= b or a == 22:
        return a == b
    return F(a+1, b) + F(a*2, b)


print(F(2, 15) * F(15, 31))
'''
# Ответ: 13


# Тип 25 №61405
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.
#
# Найдите все натуральные числа, не превышающие 10**10, которые соответствуют маске 3?2258*4
# и при этом без остатка делятся на 2024.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '3?2258*4'):
        print(x)
'''
# Ответ:
# 3422584
# 352258984
# 3022582904
# 3122588744
# 3222584464
# 3322580184
# 3422586024
# 3522581744
# 3622587584
# 3722583304
# 3822589144
# 3922584864

# endregion Урок: ******************************************************************

# Лика = []
# КЕГЭ  = []
# на следующем уроке:
