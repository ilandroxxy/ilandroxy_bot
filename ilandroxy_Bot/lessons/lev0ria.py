# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Типы данных переменных
'''
a = 4  # int (integer) - целочисленные значения
print(type(2+2))  # <class 'int'>

b = 4.0  # float (число с плавающей точкой) - любые дроби
print(type(4 / 2), 4 / 2)  # <class 'float'>  (2.0)

c = '4'  # str (string) - строковый тип данных: слова, буквы, символы, тексты, ..
print(a * 5, c * 5)  # 20 44444
print('hello, ' + 'world')  # hello, world - конкатинация строк (склеивание)
print('Я читал книгу "Война и мир"')
# print('4' + 4)  # TypeError: can only concatenate str (not "int") to str

d1 = True  # bool (Boolean)  # Булева Алгебра (математическая логика)
d2 = False
print(True + True + True + False)  # 3
print(4 < 10)  # True (спрашиваем 4 меньше ли 10?)
print(int(4 < 10))  # 1
'''

# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# Может содержать неограниченное кол-во элементов разных типов данных
# Каждый элемент списка имеет свой порядковый номер - индекс
# Индексы начинаются с нуля (если слева направо) или с -1 (если справа налево)
# В списках можно не только брать элементы, но и менять их через индексы

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1


print(f"Первый элемент списка: {M[0]} \n"
      f"Последний элемент списка: {M[-1]}")

# Первый элемент списка: a
# Последний элемент списка: e

B = (1, 2, 3)  # tuple (кортеж)
# Полностью идентичен списка, кроме четвертого пункта: нельзя менять элементы

C = {1, 2, 3, 1, 2}  # set (множество)
print(C)  # {1, 2, 3}

# В множестве не может содержаться две одинаковые копии одного и того же числа

# Z {-inf, .., -1000, ..., -1, 0, 1, ..., 100, ..., +inf} - множество целых чисел
# N {1, 2, 3, ..., 1000, .., + inf}


D = {'one': 1, 'two': 2, 'three': 3}  # dict (словарь)
# В словарях элемент состоит из двух частей: ключ и значение
# Доступ к значению элемента осуществляется через ключ
print(D['one'])  # 1


M = [1, 2.0, '2', True, 2+2, 7/2, '2' * 3, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'one': 1, 'two': 2, 'three': 3}]
for elem in M:
    print(elem, type(elem))
    # 1 <class 'int'>
    # 2.0 <class 'float'>
    # 2 <class 'str'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 3.5 <class 'float'>
    # 222 <class 'str'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'one': 1, 'two': 2, 'three': 3} <class 'dict'>
'''


# Конвертация типов данных
'''
a = 4
print(a, type(a))  # 4 <class 'int'>

a = str(a)
print(a, type(a))
# ValueError: invalid literal for int() with base 10: '4.0'

a = float(a)
print(a, type(a))  # 4.0 <class 'float'>

a = int(a)
print(a, type(a))  # 4 <class 'int'>


A = [1, 2, 3, 1, 2, 3]
print(A, type(A))  # [1, 2, 3, 1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A) 
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры
'''
a = input('Введите строку: ')  # input() принимает строку с клавиатуры
print(a, type(a))  # <class 'str'>

x = int(input('Введите число: '))
print(x, type(x))
'''

# Задача вывести на экран сообщение "Сегодня облачно, а погода 24 градуса!"
'''
weather = 'облачно'
temperature = 24
print('Сегодня ', weather, ', а погода ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а погода ' + str(temperature) + ' градуса!')
print('Сегодня {}, а погода {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а погода {temperature} градуса!')
'''

# Базовая арифметика
'''
a = 7
b = 2

print(f'{a} + {b} = {a+b} \n'  # \n - переход на новую строку
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В принте есть один \n

print(f'{a} / {b} = {a/b} \n'  # 3.5 - обыкновенное вещественное деление 
      f'{a} // {b} = {a//b} \n'  # 3 - целочисленное деление (только целая часть, без округления)
      f'{a} % {b} = {a%b}')  # 1 - остаток от деления (в виде обыкновенной дроби)

print()

import math
print(math.sqrt(16))  # 4.0

print()

print(f'Возведите число {a} в степень {b}: {a} ** {b} = {a**b} \n'  # 49
      f'Возьмите квадратный корень от числа 16: {16} ** (1/2) = {16 ** (1/2)} \n'  # 4.0
      f'Возьмите кубический корень от числа 27: {27} ** (1/3) = {27 ** (1/3)} ')  # 3.0 
'''


# Пару слов про библиотеки в Python

# Список ббилиотек, которые мы будем использовать для подготовк:
'''
import turtle  # для 6 номера
import fnmatch  # для 25 номера
import itertools  # для 8, 9, 12, 24 номеров
import ipaddress  # новый 13 номер
import sys  # 16 номер

import math
import string


import math
print(math.sqrt(16))  # 4.0

import math as m
print(m.sqrt(16))  # 4.0

from math import sqrt, fabs
print(sqrt(16))  # 4.0

from math import *  # импортировать сразу все 
print(sqrt(16))  # 4.0
'''

'''
x = 4
if x % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''

'''
for x in range(0, 10):
    print(x, end=' ')  # 0 1 2 3 4 5 6 7 8 9
'''

# endregion Урок: ******************************************************************

# Лев = []
# КЕГЭ  = []
# на следующем уроке: Разбираем Условные операторы и циклы
