# region Домашка: ******************************************************************
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n >= 10000:
        return 1
    if n % 2 == 0 and n < 10000:
        return F(n + 3) + 7
    if n % 2 != 0 and n < 10000:
        return F(n + 1) - 3


print(F(50) - F(57))
'''

'''
import sys
sys.setrecursionlimit(10000)


def f(n):
    if n <= 1:
        return n
    if n > 1 and n % 3 == 0:
        return n + f(n/3)
    if n > 1 and n % 3 != 0:
        return n + f(n+3)


for n in range(1, 100):
    try:
        if f(n) > 100:
            print(n)
            break
    except Exception as e:
        print(f'Ошибка: {e} \n'
              f'При числе: {n}')
'''

'''
from functools import *

@lru_cache(None)
def f(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return 2 * f(n-2) - f(n-1) + 2
    if n > 2 and n % 2 != 0:
        return 2 * f(n-1) + f(n-2) - 2

print(f(170))
'''
# @lru_cache(None): Это декоратор, который применяется к функции f. lru_cache (Least Recently Used Cache) -
# это механизм кеширования результатов вызова функции для повышения её производительности.
# В данном случае None передается в качестве аргумента, что означает, что кеш будет неограничен
# по размеру (или ограничен только доступной памятью). Это означает, что результаты вызовов
# функции будут кешироваться и повторно использоваться при повторных вызовах с теми же аргументами,
# что может значительно ускорить выполнение функции, если она вызывается с теми же аргументами несколько раз.

'''
def F(n):
    if n == 0:
        return 1
    if n > 0:
        return 2* F(1-n) + 3*F(n-1) + 2
    if n < 0:
        return -F(-n)

# 5
print(F(1))
print(F(2))
print(F(3))
print(F(4))
print(F(5))
print(F(6))
print(F(7))
print(F(8))
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 15 №47219
# Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
# Для какого наименьшего натурального числа А формула
# (ДЕЛ(x, 2) → ¬ДЕЛ(x, 3)) ∨ (x + A ≥ 100)
# тождественно истинна (т.е. принимает значение 1) при любом натуральном значении переменной х?

# Вариант 1
'''
def F(x, A):
    return ((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100)


for A in range(1, 1000):
    flag = True
    for x in range(1, 10000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''

# Вариант 2
'''
for A in range(1, 1000):
    k = 0
    for x in range(1, 1000):
        if ((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100):
            k += 1
    if k == 999:
        print(A)
        break
'''

# Вариант 3
'''
def F(x, A):
    return ((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100)


for A in range(1, 1000):
    if all(F(x, A) for x in range(1, 10000)):
        print(A)
        break


# Вариант 3.2

def F(x, A):
    return ((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100)


R = []
for A in range(1, 1000):
    if all(F(x, A) for x in range(1, 10000)):
        R.append(A)
print(min(R))

# Вариант 3.3
print(min([A for A in range(1, 1000) if all((((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100)) for x in range(1, 10000))]))
'''


# Тип 15 №14779
# Сколько существует целых значений числа A, при которых формула
# ((x < 5) → (x2 < A)) ∧ ((y2 ≤ A) → (y ≤ 5))
# тождественно истинна при любых целых неотрицательных x и y?
'''
def F(x, y, A):
    return ((x < 5) <= (x**2 < A)) and ((y**2 <= A) <= (y <= 5))

cnt = 0
for A in range(0, 1000):
    if all(F(x, y, A) for x in range(100) for y in range(100)):
        cnt += 1
print(cnt)
'''
# Ответ: 19

# Тип 15 №34517
# Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n.
# Для какого наибольшего целого числа А формула
# х&А → (x&10 = 0 → х&3)
# тождественно истинна (т.е. принимает значение 1 при любом неотрицательном целом значении переменной x)?
'''
def F(x, A):
    return (x & A != 0) <= ((x & 10 == 0) <= (x & 3 != 0))


R = []
for A in range(0, 1000):
    if all(F(x, A) for x in range(0, 10000)):
        R.append(A)
print(max(R))
'''

# Тип 15 №40731
# На числовой прямой даны два отрезка: P = [19; 84] и Q = [4; 51].
# Укажите наименьшую возможную длину такого отрезка A, для которого формула
# (x ∈ Q) → (¬(x ∈ P) → ¬((x ∈ Q) ∧ ¬(x ∈ A)))
# тождественно истинна (т.е. принимает значение 1 при любом значении переменной х).
'''
def F(x, a1, a2):
    P = 19 <= x <= 84
    Q = 4 <= x <= 51
    A = a1 <= x <= a2
    return Q <= ((not P) <= (not(Q and (not A))))


R = []
M = [x / 10 for x in range(2 * 10, 90 * 10)]
print(M)
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)

print(min(R))  # 14.75 -> 14.8 -> 14.899 -> 15
'''
# Ответ: 15


# endregion Урок: ******************************************************************

# Лев = [2.1, 5.1, 6.1, 8.1, 12.1, 14.1, 15.1, 16.1, 23.1]
# КЕГЭ  = []
# на следующем уроке:
