# region Домашка: ******************************************************************

# КЕГЭ № 2491 (Уровень: Базовый)
#
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
# Определите количество троек, в которых хотя бы один из трёх элементов меньше, чем среднее арифметическое всех
# чисел в файле, и десятичная запись всех трёх элементов тройки содержит цифру 9. В ответе запишите два числа:
# сначала количество найденных троек, а затем – максимальную сумму элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
# todo разбор 17 номер
'''
M = [int(x) for x in open('17.txt')]
avg = sum(M) / len(M)
R = []
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    if x < avg or y < avg or z < avg:
        if all('9' in str(a) for a in [x, y, z]):
            R.append(x + y + z)
print(len(R), max(R))
'''
# Ответ: 345 17460


# КЕГЭ № 7038 Danov2303 (Уровень: Средний) (А.Богданов)
# В файле содержится последовательность целых чисел, по модулю не превышающих 10000.
# Определите количество пар, для которых выполняются следующие условия:
#
# – только один из элементов пары заканчивается на 1;
# – оба элемента пары меньше максимального среднего значения пары среди всех пар отвечающих предыдущему условию.
#
# В ответе запишите два числа: сначала количество пар отвечающих двум условиям, затем максимальный элемент из пар,
# включающих минимальный элемент таких пар. В задаче рассматриваются пары соседних элементов.
'''
M = [int(x) for x in open('17.txt')]
maxi = 0
mini = 9999999
R = 0
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if (abs(x) % 10 == 1) != (str(y)[-1] == '1'):
        maxi = max(maxi, (x + y) / 2)

cnt = 0
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if (abs(x) % 10 == 1) != (str(y)[-1] == '1'):
        if x < maxi and y < maxi:
            mini = min(mini, x, y)
            cnt += 1

for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if (abs(x) % 10 == 1) != (str(y)[-1] == '1'):
        if x < maxi and y < maxi:
            if mini in (x, y):
                R = max(R, x, y)

print(cnt, R)
'''

# КЕГЭ № 2238 (Уровень: Базовый)
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
# Определите количество троек, в которых хотя бы два из трёх элементов больше, чем среднее
# арифметическое всех чисел в файле. В ответе запишите два числа: сначала количество найденных троек,
# а затем – максимальную сумму элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
avg = sum(M) / len(M)
R = []
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    if sum([a > avg for a in [x, y, z]]) >= 2:
        R.append(x + y + z)
print(len(R), max(R))
'''

# КЕГЭ № 5491 (Уровень: Средний)
# Файл содержит последовательность целых чисел, по модулю не превышающих 10 000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество таких пар, в которых запись меньшего элемента заканчивается цифрой 3,
# а сумма квадратов элементов пары меньше, чем квадрат наименьшего из элементов последовательности,
# запись которых заканчивается цифрой 3.
# В ответе запишите два числа: сначала количество найденных пар, затем максимальную сумму квадратов элементов этих пар.

'''
M = [int(x) for x in open('17.txt')]
A = [x for x in M if abs(x) % 10 == 3]
R = []
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if abs(min(x, y)) % 10 == 3:
        if (x ** 2 + y ** 2) < min(A) ** 2:
            R.append(x ** 2 + y ** 2)
print(len(R), max(R))
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Поиска делителей
'''
import time
start = time.time()

# def divisors(x):
#     div = []
#     for j in range(1, x+1):
#         if x % j == 0:
#             div.append(j)
#     return div

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
            # div.append(j)
            # div.append(x // j)
    return sorted(set(div))


print(divisors(100_000_000))
# 24: {1, 2, 3, 4, 6, 8, 12, 24}
# 16: {1, 2, 4, 8, 16}

print(time.time() - start)  # 2.82 -> 0.0003

print(2.82 / 0.0003)  # 9400.0
'''

# Тип 25 №27854
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [110203; 110245],
# числа, имеющие ровно четыре различных чётных натуральных делителя
# (при этом количество нечётных делителей может быть любым).
# Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(110203, 110245+1):
    d = [a for a in divisors(x) if a % 2 == 0]
    if len(d) == 4:
        print(*d)
'''


# Тип 25 №39254
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N,
# не считая единицы. Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 500000000,
# для которых 0<M(N)<N. В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # не считая единицы.
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


k = 0
for x in range(500000000+1, 5000000000000):
    d = divisors(x)
    if len(d) >= 5:
        M = d[0] * d[1] * d[2] * d[3] * d[4]
        if 0 < M < x:
            print(M)
            k += 1
            if k == 5:
                break
'''
# 1008
# 1797092
# 48408867
# 1800
# 1156923


# Тип 25 №27850
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [245690; 245756] простые числа.
# Выведите на экран все найденные простые числа в порядке возрастания,
# слева от каждого числа выведите его порядковый номер в последовательности.
# Каждая пара чисел должна быть выведена в отдельной строке.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


num = 1
for x in range(245690, 245756+1):
    d = divisors(x)
    if len(d) == 2:
        print(num, x)
    num += 1
'''
# 22 245711
# 30 245719
# 34 245723
# 52 245741
# 58 245747
# 64 245753


# Задачи с масками:

# Тип 25 №55821
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# # — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**8,
# найдите все числа, соответствующие маске 12??36*1, делящиеся на 273 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 273.
'''
from fnmatch import *
for x in range(273, 10**8, 273):  # делящиеся на 273 без остатка.
    if fnmatch(str(x), '12??36*1'):
        print(x, x // 273)
'''
# 1271361 4657
# 12633621 46277
# 12663651 46387
# 12693681 46497

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Лев = [2.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
