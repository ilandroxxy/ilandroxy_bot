# region Домашка: ******************************************************************


# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************


# - это однострочный комментарий (программа не видет эту строку)

'''
- это многострочный комментарий (если нужно скрыть сразу целый блок)
'''

X = 100
# print(X, type(X))  # 100 <class 'int'>
# Переменная - это способ взаимодействия с ячейкой памяти хранящей данные

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(2+2, type(2+2))  # 4 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные числа (дроби)
print(7/2, type(7 / 2))  # 3.5 <class 'float'>

c = '5'  # str (string) - строковый тип данных для хранения символов, букв, слов, текстов, ...
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555 - при умножении строки на целое число строка дублируется
print('Hello,' + ' World!')  # Hello, World! - строки могут конкатенировать (склеиваться)
# print('2131' + 2323) - TypeError: can only concatenate str (not "int") to str


d1 = True  # bool (Boolean) - Элементы Булевой алгебры. Математическая логика.
d2 = False
print(4 < 10)  # Спрашиваю: "Четверка меньше десятки?"
'''


# Типы данных коллекций
'''
L = [1, 2, 3]  # list (список)

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'c']
# -i -5   -4   -3   -2   -1

L[2] = 'CCC'
print(L)  # ['a', 'b', 'CCC', 'd', 'c']

# - Может хранить неограниченное кол-во элементов разных типов данных
# - Каждый элемент списка имеет свой порядковый номер - индекс
# - Индексы списков ведут счет с 0 при проходе слева-направо и с -1 при проходе справа-налево
# - В отличие от кортежей элементы списка можно изменять через индексы


T = (1, 2, 3)  # tuple (кортеж)
# - Полностью аналогично спискам, но нельзя изменять его элементы

S = {1, 2, 3, 2, 3}  # set (множество)
# - В множестве не может быть копий элементов
print(S)  # {1, 2, 3}

D = {'one': 'один', 'two': 'два', 'three': 'три'}  # dict (словарь)
# Элемент словаря делится на две части: ключ и значение
# Доступ к значению элемента словаря осуществляется через его персональный ключ
print(D['two'])  # два
D['two'] = 2
print(D)  # {'one': 'один', 'two': 2, 'three': 'три'}

students = {1384296095: ('d1ch01.py', '18:00-19:00', 7200, 'Дмитрий', 4, 0, 'Tuesday')}
'''

'''
M = [2, '2', 2.0, True, 2+2, '2'+'2', 7/2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'one': 'один', 'two': 'два', 'three': 'три'}]
for x in M:
    print(x, type(x))
    # 2 <class 'int'>
    # 2 <class 'str'>
    # 2.0 <class 'float'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 22 <class 'str'>
    # 3.5 <class 'float'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'one': 'один', 'two': 'два', 'three': 'три'} <class 'dict'>
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 1, 2, 3]
print(A, type(A))  # [1, 2, 3, 1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строчку: ')  # получает ввод с клавиатуры в виде строки
print(s, type(s))  # 4536789 <class 'str'>

x = int(input('Введите целое число: '))
print(x, type(x))  # 4536789 <class 'int'>
'''

# Пример работы с f-строками
# Задача: вывести на экран строчку "Сегодня отличная погода, на улице облачно, а температура 24 градуса"
'''
weather = 'облачно'
temperature = 24
print("Сегодня отличная погода, на улице ", weather, ", а температура ", temperature, " градуса")
print("Сегодня отличная погода, на улице " + weather + ", а температура " + str(temperature) + " градуса")
print("Сегодня отличная погода, на улице {}, а температура {} градуса".format(weather, temperature))
print(f"Сегодня отличная погода, на улице {weather}, а температура {temperature} градуса")
'''


# Базовая арифметика
'''
# a = 2 - это присваивание (то есть переменная a теперь равна 2-м
# a == 2 - это сравнение (то есть я спрашиваю: "переменная а равна 2-м?")
# a != 2 - спрашиваю: "переменная а не равна 2-м?"

a = 7
b = 2
print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # каждый print() содержит в себе переход '\n'

print(f'{a} / {b} = {a / b} \n'  # 3.5 - вещественное деление (обыкновенное деление) - результат всегда float
      f'{a} // {b} = {a // b} \n'  # 3 - целочисленное деление (взятие только целой части) 
      f'{a} % {b} = {a % b}')  # 1 - остаток от деления (в виде обыкновенной дроби)

print()

print(125 // 10)  # 12
print(125 % 10)  # 5
print(4 / 2)  # 2.0

print(127 % 10)  # 7
print(-127 % 10)  # 3


print(f'Возведите число {a} в степень {b}: {a} ** {b} = {a**b}')
# Возведите число 7 в степень 2: 7 ** 2 = 49
'''

# endregion Урок: ******************************************************************


# Дмитрий = []
# КЕГЭ  = []
# на следующем уроке:
