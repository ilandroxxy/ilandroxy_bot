# region Домашка: ******************************************************************


# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************

# Тип 5 №18554
# Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1. Строится двоичная запись числа N без ведущих нулей.
# 2. Если в полученной записи единиц больше, чем нулей, то справа приписывается единица.
# Если нулей больше или нулей и единиц поровну, справа приписывается ноль.
# 3. Полученное число переводится в десятичную запись и выводится на экран.
#
# Какое наименьшее число, превышающее 80, может получиться в результате работы автомата?
'''
R = []
for n in range(1, 1000):
    s = bin(n)[2:]
    if s.count('1') > s.count('0'):
        # s += '1'
        s = s + '1'
    else:
        s = s + '0'
    r = int(s, 2)
    if r > 80:
        R.append(r)

print(min(R))
'''
# Ответ: 82


# Тип 5 №27402
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу:
# а) складываются все цифры двоичной записи числа N, и остаток от деления суммы на 2 дописывается
# в конец числа (справа). Например, запись 11100 преобразуется в запись 111001;
# б) над этой записью производятся те же действия — справа дописывается
# остаток от деления суммы её цифр на 2.
#
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N)
# является двоичной записью искомого числа R. Укажите такое наименьшее число N,
# для которого результат работы данного алгоритма больше числа 77.
# В ответе это число запишите в десятичной системе счисления.
'''
R = []
for n in range(1, 1000):
    s = bin(n)[2:]
    for _ in range(2):
        s = s + str(s.count('1') % 2)
    r = int(s, 2)
    if r > 77:
        R.append(n)
        
print(min(R))
'''
# Ответ: 19


# Тип 5 №61385
# Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. В конец двоичной записи добавляются две цифры, соответствующие
# двоичной записи остатка от деления исходного числа на 3.
# 3. В конец двоичной записи числа, полученного на предыдущем шаге,
# добавляются три цифры, соответствующие двоичной записи остатка от деления этого числа на 5.
#
# 4. Результатом работы алгоритма становится десятичная запись полученного числа R.

# Определите количество принадлежащих отрезку [1222222222; 1555555666] чисел,
# которые могут получиться в результате работы этого алгоритма.
'''
for n in range(100000, 10000000000):
    s = bin(n)[2:]
    s = s + bin(n % 3)[2:].zfill(2)
    s = s + bin(n % 5)[2:].zfill(3)
    r = int(s, 2)
'''


# Тип 5 №60247
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.

# Укажите минимальное число R, большее 151, которое может быть получено с помощью полученного алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
R = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + bin(x)[2:]
    r = int(s, 2)
    if r > 151:
        R.append(r)
print(min(R))
'''

# def convert(num, system):
#     alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
#     result = ''
#     while num > 0:
#         result += alphabet[num % system]
#         num //= system
#     return result[::-1]

'''
def convert(num, system):
    alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    result = ''
    while num > 0:
        result = alphabet[num % system] + result
        num //= system
    return result


R = []
for n in range(1, 10000):
    s = convert(n, 2)
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + convert(x, 2)
    r = int(s, 2)
    if r > 151:
        R.append(r)
print(min(R))
'''
# Ответ: 163


# Тип 5 №16381
# Автомат обрабатывает натуральное число N > 1 по следующему алгоритму.
# 1. Строится двоичная запись числа N.
# 2. Последняя цифра двоичной записи удаляется.
# 3. Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если чётным — 01.
# 4. Результат переводится в десятичную систему и выводится на экран.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 2018?
'''
for n in range(2, 10000):
    s = bin(n)[2:]
    s = s[:-1]
    if n % 2 != 0:
        s = s + '10'
    else:
        s = s + '01'
    r = int(s, 2)

    if r == 2018:
        print(n)
'''
# Ответ: 1009


# Тип 5 №16809
# Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из нового числа вычитается исходное, полученная разность выводится на экран.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 133?
'''
for n in range(0, 255+1):
    s = bin(n)[2:].zfill(8)
    s = s.replace('0', '*')
    s = s.replace('1', '0')
    s = s.replace('*', '1')
    r = int(s, 2)
    res = r - n
    if res == 133:
        print(n)
'''

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Дмитрий = [2, 5, 14, 16, 23]
# КЕГЭ  = []
# на следующем уроке:
