# region Домашка: ******************************************************************


# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************

# Тип 25 №27850
# Напишите программу, которая ищет среди целых чисел, принадлежащих
# числовому отрезку [245690; 245756] простые числа.
# Выведите на экран все найденные простые числа в порядке возрастания, слева от
# каждого числа выведите его порядковый номер в последовательности.
# Каждая пара чисел должна быть выведена в отдельной строке.
'''
def prime(x):
    if x <= 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

num = 1
for x in range(245690, 245756+1):
    if prime(x):
        print(num, x)
    num += 1
'''

'''
def divisors(x):
    div = []
    for j in range(1, x+1):
        if x % j == 0:
            div.append(j)
    return div

num = 1
for x in range(245690, 245756+1):
    if len(divisors(x)) == 2:
        print(num, x)
    num += 1
'''
# 22 245711
# 30 245719
# 34 245723
# 52 245741
# 58 245747
# 64 245753


"""
import time
start = time.time()

# def divisors(x):
#     div = []
#     for j in range(1, x+1):
#         if x % j == 0:
#             div.append(j)
#     return div

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

print(divisors(100_000_000))  # 2.837 > 0.00032

print(time.time() - start)
"""


# Тип 25 №27853
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [312614; 312651],
# числа, имеющие ровно шесть различных натуральных делителей. Для каждого найденного числа запишите
# эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(312614, 312651+1):
    d = divisors(x)
    if len(d) == 6:
        print(*d)
'''
# 1 2 4 78157 156314 312628
# 1 3 9 34739 104217 312651


# Тип 25 №27856
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632; 95650],
# числа, имеющие ровно шесть различных нечётных натуральных делителей (при этом количество четных
# делителей может быть любым). Для каждого найденного числа запишите эти шесть делителей в
# шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(95632, 95650+1):
    d = [j for j in divisors(x) if j % 2 != 0]
    if len(d) == 6:
        print(*d)
'''
# 1 3 9 10627 31881 95643
# 1 7 49 61 427 2989
# 1 5 25 1913 9565 47825


# Тип 25 №46983
# Пусть M(N) — пятый по величине делитель натурального числа N без учёта самого числа и единицы.
#
# Если у числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M(N) = 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 460000000, для которых M(N) > 0.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # без учёта самого числа и единицы
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

k = 0
for x in range(460000000+1, 10**10):
    d = divisors(x)
    if len(d) >= 5:
        M = d[-5]
        print(M)
        k += 1
        if k == 5:
            break
'''
# 41818182
# 261959
# 5
# 271
# 57500001


# Тип 25 №64910
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.
#
# Найдите все натуральные числа, не превышающие 10**10,
# которые соответствуют маске 1*4022?9 и при этом без остатка делятся на 1987.
#
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(1987, 10**10, 1987):
    if fnmatch(str(x), '1*4022?9'):
        print(x)
'''
# 1001402299
# 1108402249
# 1484402259
# 1591402209
# 1860402269
# 1967402219


# № 12932 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#     – символ «?» означает ровно одну произвольную цифру;
#     – символ «*» означает любую последовательность цифр произвольной длины;
#     в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа,
# соответствующие маске 1?2*4, делящиеся на 2024 без остатка и являющиеся полными квадратами.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 2024.
#
# Количество строк в таблице для ответа избыточно.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1?2*4'):
        if x ** 0.5 == int(x ** 0.5):  # являющиеся полными квадратами
            print(x, x // 2024)
'''
# 1024144 506
# 1327290624 655776
# 1721586064 850586


# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**7, найдите все простые числа, соответствующие маске 3?1111*.
# В ответе запишите все найденные числа в порядке возрастания.
"""
import time
start = time.time()

def prime(x):
    if x <= 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True


from fnmatch import *
for x in range(10**7):
    if fnmatch(str(x), '3?1111*'):
        if prime(x):
            print(x)

print(time.time() - start)
"""
# 311111
# 361111
# 3011117
# 3011119
# 3311117
# 3611119
# 3811117
# 3911111


#
# № 11955 (Уровень: Средний)
# (PRO100 ЕГЭ) Назовём маской числа последовательность цифр,
# в которой также могут встречаться следующие символы:
#
# символ «A» означает ровно одну произвольную чётную цифру;
# символ «B» означает любую последовательность нечётных цифр произвольной длины;
# в том числе «B» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 1010, найдите все числа,
# соответствующие маске 1A2157B4, делящиеся на 133 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 133.
'''
from fnmatch import *
for i in range(133, 10**10, 133):
    if fnmatch(str(i), "1?2157*4"):
        if str(i)[1] in '02468':
            if all(x in '13579' for x in str(i)[6:-1]):
                print(i, i // 133)
'''
# 122157574 918478
# 1021575394 7681018
# 1421575554 10688538
# 1821575714 13696058





# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************


# Дмитрий = [2, 5, 8, 9, 12, 13, 14, 15, 16, 17, 23]
# КЕГЭ  = []
# на следующем уроке:
