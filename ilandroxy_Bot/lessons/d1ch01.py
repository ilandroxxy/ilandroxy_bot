# region Домашка: ******************************************************************
'''
x = 3*5103**2020 + 3 * 729 ** 2021 - 2 * 343**2022 + 27**2023 - 4*7**2024 - 2029
M = []
while x > 0:
    M.append(x % 27)
    x //= 27
M.reverse()
print(len([x for x in M if x > 9]))
'''
# Ответ: 3488

# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************


# Теория:
# Адрес сети = IP-адрес узла & Маска сети, где & - побитовая конъюнкция

# IP адрес 194.128.208.64 состоит из 4 чисел на каждое из которых выделяется по 1 байту (то есть по 8 бит)
# В таком случае числа лежат в диапазоне от 0 до 255 (11111111)

# Маска сети имеет длину 32 бита и вид: 11111..0000 (сначала единицы, затем нули)
# 255.255.224.0  # 11111111111111111110000000000000


# Тип 13 №5367
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 194.128.208.64
# Маска: 255.255.224.0
'''
knot = '.'.join([f'{int(x):b}'.zfill(8) for x in '194.128.208.64'.split('.')])
mask = '.'.join([bin(int(x))[2:].zfill(8) for x in '255.255.224.0'.split('.')])

address = ''
for i in range(len(knot)):
    if knot[i] == '1' and mask[i] == '1':
        address += '1'
    elif knot[i] == '.' and mask[i] == '.':
        address += '.'
    else:
        address += '0'

print(knot, mask, address, sep='\n')
# 11000010.10000000.11010000.01000000
# 11111111.11111111.11100000.00000000
# 11000010.10000000.11000000.00000000

print([int(x, 2) for x in address.split('.')])
# [194, 128, 192, 0]
'''


# Тип 13 №5367
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 194.128.208.64
# Маска: 255.255.224.0
'''
print(194 & 255, 128 & 255, 208 & 224, 64 & 0)
# 194 128 192 0
'''
# Ответ: ECDA


# Тип 13 №5367
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 194.128.208.64
# Маска: 255.255.224.0
'''
from ipaddress import *
net = ip_network('194.128.208.64/255.255.224.0', 0)
print(net)  # 194.128.192.0/19, где 19 - это кол-во единиц в маске числа
print(net.netmask)  # 255.255.224.0
print(f'{net.netmask:b}')  # 11111111111111111110000000000000
'''
# Ответ: ECDA


# Тип 13 №18440
# Для узла с IP-адресом 111.81.176.27 адрес сети равен 111.81.160.0.
# Чему равен третий слева байт маски? Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'111.81.176.27/{mask}', 0)
    print(net, net.netmask)
    # 111.81.160.0/19 255.255.224.0
'''
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'111.81.176.27/{mask}', 0)
    if str(net) == f'111.81.160.0/{mask}':
        print(str(net.netmask).split('.')[2])
'''
# Ответ: 224


# Тип 13 №9363
# Для узла с IP-адресом 111.81.208.27 адрес сети равен 111.81.192.0.
# Чему равно наименьшее возможное значение третьего слева байта маски?
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'111.81.208.27/{mask}', 0)
    print(net, net.netmask)
    # 111.81.192.0/18 255.255.192.0
    # 111.81.192.0/19 255.255.224.0
'''
'''
from ipaddress import *
R = []
for mask in range(32+1):
    net = ip_network(f'111.81.208.27/{mask}', 0)
    if str(net) == f'111.81.192.0/{mask}':
        R.append(str(net.netmask).split('.')[2])
print(min(R))
'''
# Ответ: 192


# Тип 13 №63062
# IP-адресами 120.91.85.213 и 120.91.89.205 находятся в разных сетях.
# Укажите наименьшее возможное значение третьего слева байта маски этой сети.
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net1 = ip_network(f'120.91.85.213/{mask}', 0)
    net2 = ip_network(f'120.91.89.205/{mask}', 0)
    if net1 != net2:
        print(net1.netmask)
        # 255.255.248.0
        # 255.255.252.0
        # 255.255.254.0
        # 255.255.255.0
        # 255.255.255.128
        # 255.255.255.192
        # 255.255.255.224
'''
# Ответ: 248


# № 14948 (Уровень: Базовый)
# Сеть задана IP-адресом 192.168.32.128 и маской сети 255.255.255.192.
# Сколько в этой сети IP-адресов, для которых сумма единиц в двоичной записи IP-адреса чётна?
# В ответе укажите только число.
'''
from ipaddress import *
net = ip_network(f'192.168.32.128/255.255.255.192', 0)
cnt = 0
for ip in net:
    if f'{ip:b}'.count('1') % 2 == 0:
        cnt += 1
print(cnt)
'''
# Ответ: 32


# № 12947 (Уровень: Базовый)
# Сеть задана IP-адресом 203.111.195.0 и маской сети 255.255.240.0.
# Сколько в этой сети IP-адресов, в двоичной записи которых количество нулей кратно трём,
# а также содержатся три подряд идущие единицы и три подряд идущих нуля одновременно?
# В ответе укажите только число.
'''
from ipaddress import *
net = ip_network('203.111.195.0/255.255.240.0', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('0') % 3 == 0:
        if '111' in s and '000' in s:
            cnt += 1
print(cnt)
'''
# Ответ: 1043


# № 12467 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Адрес сети равен 183.192.A.0,
# где А — некоторое допустимое для записи адреса сети число, а маска сети 255.255.252.0.
#
# Определите минимальное значение А,
# для которого для всех IP-адресов этой сети в двоичной записи IP-адреса суммарное
# количество единиц в правых двух байтах больше трёх.
'''
from ipaddress import *
for A in range(0, 255+1):
    net = ip_network(f'183.192.{A}.0/255.255.252.0', 0)
    if all(f'{ip:b}'[16:].count('1') > 3 for ip in net):
        print(A)
        break
'''
# Ответ: 60

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************


# Дмитрий = [2, 5, 8, 9, 12, 13, 14, 15, 16, 17, 23]
# КЕГЭ  = []
# на следующем уроке:
