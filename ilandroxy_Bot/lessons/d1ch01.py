# region Домашка: ******************************************************************


# № 5553 (Уровень: Базовый)
# Сколько можно составить различных кодов, в составе которых встречаются
# две подряд идущие гласные, путём перестановки букв слова СОТОЧКА?

'''
from itertools import permutations
R = []
for s in permutations("СОТОЧКА"):
    slovo = ''.join(s)
    if "ОО" in slovo or "ОА" in slovo or "АО" in slovo:
        R.append(slovo)
print(len(set(R)))


R = []
s = sorted("СОТОЧКА")
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        for g in s:
                            slovo = a + b + c + d + e + f + g
                            if len(set(slovo)) == 6 and slovo.count('О') == 2:
                                if "ОО" in slovo or "ОА" in slovo or "АО" in slovo:
                                    R.append(slovo)
print(len(set(R)))
'''

# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************

'''    
Пробегаем все элементы строки num и проверяем, что все строчные элементы x лежат в наборе четных чисел 
Получается ищем все четные числа строки num и складываем их в список через генератор списков 
'''
# [x for x in num if x in '0246']


# Генератор - способ создания коллекции (list, tuple, set, dict) в одну строчку
'''
# Генераторы списков: (создаем список элементов в одну строку)
# Синтаксис генератора списка включает выражение, цикл и (при необходимости) условие.
# - выражение - то, что кладем в список (может быть действие)
# - цикл - откуда берем элементы для генератора
# - условие - при каком условии элемент кладется в список

print([x for x in range(10)])  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

print([x**2 for x in range(10)])  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

print([x**2 for x in range(10) if x % 2 == 0])  # [0, 4, 16, 36, 64]
'''

# Полезные генераторы для экзамена ЕГЭ:
'''
# 1. Взятие суммы цифр строки (8, 9, 23, 17)
s = '46783'
summa = sum([int(x) for x in s])
print(summa)  # 28

s2 = '467a8 3.'
summa = sum([int(x) for x in s2 if x.isdigit()])
print(summa)  # 28


# 2. Проверка цифр числа на четность/нечетность (8, 9, 17 номера)
# Частые условия: Кол-во, сумма, среднее арифметическое четных/нечетных чисел
s = '46783'
chet = [x for x in s if x in '02468']  # ['4', '6', '8']
chet = [x for x in s if int(x) % 2 == 0]  # ['4', '6', '8']
chet = [int(x) for x in s if x in '02468']  # [4, 6, 8]

nechet = [x for x in s if x in '13579']  # ['7', '3']
nechet = [x for x in s if int(x) % 2 != 0]  # ['7', '3']
nechet = [int(x) for x in s if x in '13579']  # [7, 3]

s2 = '467a8 3.'
chet = [int(x) for x in s if x in '02468' and x.isdigit()]  # [4, 6, 8]
nechet = [int(x) for x in s if x in '13579' and x.isdigit()]  # [7, 3]


# 3. Создание списка вещественных чисел (15 номер)
M = [x / 4 for x in range(10 * 4, 20 * 4)]  # [10.0, 10.25, 10.5, 10.75,..., 18.5, 18.75, 19.0, 19.25, 19.5, 19.75]
M = [x / 5 for x in range(10 * 5, 20 * 5)]  # [10.0, 10.2, 10.4, 10.6, 10.8, 11.0, ...,19.2, 19.4, 19.6, 19.8]

# Пример решения тревиального 15 номера
print(max([A for A in range(1, 10000) if all((A < 5 and x > 10) for x in range(1, 10000))]))


# 4. Открытие/считывание .txt файла для 17 номера
M = [int(x) for x in open('17.txt')]  # 955, 19654, 57, 19286, 445, 5049, 15584, ...,2289, 2817, 13140, 8045, 14940]

# Несколько примеров генераторов для 17 номера с доп. условиями:
# a) "а сумма элементов тройки меньше максимального элемента последовательности, оканчивающегося на 09."
A = max([x for x in M if str(x)[-2:] == '09'])

# b) "в которых сумма остатков от деления элементов на 113 равна минимальному элементу последовательности, кратному 52"
A = min([x for x in M if x % 52 == 0])

# c) "а сумма элементов тройки не больше максимального элемента последовательности, являющегося пятизначным числом, которое оканчивается на 3"
A = max([x for x in M if len(str(abs(x))) == 5 and str(x)[-1] == '3'])

# 5. Открытие/считывание .txt файла для 9 номера
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    # [19, 63, 93, 151, 12, 151, 165]
    # [181, 129, 98, 179, 173, 3, 197]
    # ...
    # [19, 161, 160, 131, 73, 66, 73]
    # [110, 74, 30, 82, 157, 138, 141]


# 6. Условия для 9 номер


# 7. Итоговый генератор для 24 номеров с .txt файлами:
s = open('24.txt').readline()
s = s.replace('E', ' ')

print(max([len(x) for x in s.split()]))
print(len([x for x in s.split() if len(x) > 12 and 'F' not in s]))

# Пример решения тревиального 24 номера
print(max([len(x) for x in open('24.txt').readline().replace('E', ' ').split()]))
'''


# № 13082 (Уровень: Базовый)
# При каком наибольшем целом A найдутся такие целые неотрицательные x и y,
# что выражение (3x+y>48)∨(x>y)∨(4x+y<A) будет ложным?
'''
def F(x, y, A):
    return (3 * x + y > 48) or (x > y) or (4 * x + y < A)


R = []
for A in range(0, 1000):
    if any(F(x, y, A) == False for x in range(100) for y in range(100)):
        R.append(A)
print(max(R))

# Вариант решения в одну строку:
print(max([A for A in range(0, 1000) if any(((3 * x + y > 48) or (x > y) or (4 * x + y < A)) == False for x in range(100) for y in range(100))]))
'''
# 60

# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# todo Добавить задачку на разбор № 8553 (Уровень: Средний)
# (В. Рыбальченко)Все шестибуквенные слова, в составе которых могут быть только русские
# буквы Н, О, Р, М, А, Л, Ь, Е записаны в алфавитном порядке и пронумерованы начиная с 1.
# Ниже приведено начало списка
#     1. АААААА
#     2. АААААЕ
#     3. АААААЛ
#     4. АААААМ
#     5. АААААН
#     6. АААААО
#     7. АААААР
#     8. АААААЬ
# Определите сколько слов находится между первым словом начинающимся на «НОРМ» и словом «НЕНОРМ» (не включая эти слова)

from itertools import product
num = 1
R1 = []
R2 = []
for s in product(sorted('НОРМАЛЬЕ'), repeat=6):
    slovo = ''.join(s)
    if slovo[:4] == 'НОРМ':
        R1.append(num)
    if slovo == 'НЕНОРМ':
        R2.append(num)
    num += 1

print(abs(R2[0] - R1[0]) - 1)

#  2 3 4 5 6 7 8 9  (9 - 2 = 7), то есть нужно отнять -1, чтобы получить 6 элементов между ними

# Ответ: 17228

# endregion Разобрать: *************************************************************


# Дмитрий = [2, 5, 8, 14, 16, 23]
# КЕГЭ  = []
# на следующем уроке:
