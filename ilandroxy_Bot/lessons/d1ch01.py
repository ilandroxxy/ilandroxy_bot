# region Домашка: ******************************************************************


# endregion Домашка: *****************************************************************


# region Урок: ******************************************************************


# Тип 16 №5490
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 1 при n ≤ 2;
# F(n) = 2 · F(n − 1) + F(n − 2) при n > 2.
#
# Чему равно значение функции F(6)? В ответе запишите только натуральное число.
'''
def F(n):
    if n <= 2:  # F(n) = 1 при n ≤ 2;
        return 1
    if n > 2:
        return 2 * F(n - 1) + F(n - 2)


print(F(6))
'''


# Тип 16 №36871
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n) = 3?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

cnt = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        cnt += 1
print(cnt)
'''


# Тип 16 №6779
# Алгоритм вычисления значений функций F(n) и G(n), где n — натуральное
# число, задан следующими соотношениями:
#
# F(1) = 1; G(1) = 1;
# F(n) = F(n – 1) – G(n – 1), G(n) = F(n–1) + G(n – 1), при n ≥ 2

# Чему равно значение величины F(5)/G(5)? В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:  # F(1) = 1
        return 1
    if n >= 2:
        return F(n - 1) - G(n - 1)
    
def G(n):
    if n == 1:
        return 1
    if n >= 2:
        return F(n-1) + G(n - 1)

print(F(5)/G(5))
'''

# Тип 16 №59694
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n)=n, при n<11;
# F(n)=n+F(n−1), если n≥11.

# Чему равно значение выражения F(2024)−F(2021)?
'''
import sys
sys.setrecursionlimit(10000)
def F(n):
    if n < 11:
        return n
    if n >= 11:
        return n + F(n-1)

print(F(2024) - F(2021))

# F(2024) = 2024 + F(2023)
# F(2023) = 2023 + F(2022)
# F(2022) = 2022 + F(2021)  -  F(2021)
print(2024 + 2023 + 2022)
'''
# 6069


'''
from functools import *

@lru_cache(None)
def f(n):
    if n < 3:
        return 2
    if n > 2 and n % 2 == 0:
        return 2 * f(n-2) - f(n-1) + 2
    if n > 2 and n % 2 != 0:
        return 2 * f(n-1) + f(n-2) - 2


print(f(170))
'''

# Тип 23 №9174
# 1. Прибавь 2
# 2. Прибавь 3
# 3. Прибавь 4
# Сколько есть программ, которые число 23 преобразуют в число 38?

# Вариант 1
'''
def F(a, b):  # a - start, b - stop
    if a > b:
        return 0
    elif a == b:
        return 2
    else:
        return F(a+2, b) + F(a+3, b) + F(a+4, b)


print(F(23, 38))


def F(a, b):  # a - start, b - stop
    if a >= b:
        return a == b  # True
    return F(a+2, b) + F(a+3, b) + F(a+4, b)


print(F(23, 38))
'''

# Тип 23 №16898
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Прибавить 3
#
# Сколько существует программ, которые преобразуют исходное число 2 в число 14
# и при этом траектория вычислений не содержит чисел 5 и 10?
'''
def F(a, b):
    if a >= b or a == 5 or a == 10:
        return a == b
    return F(a+1, b) + F(a*2, b) + F(a+3, b)


print(F(2, 14))
'''

# № 7011 (Уровень: Средний)
# A. Прибавь 2
# B. Прибавь 3
# С. Умножь на 2
# Сколько существует программ, для которых при исходном числе 2 результатом будет являться число 40,
# при этом траектория вычисления не содержит число 28, а также не содержит подпоследовательность команд BACA.
'''
def F(a, b, s: str):
    if a >= b or a == 28:
        return a == b and 'BACA' not in s
    return F(a + 2, b, s + 'A') + F(a + 3, b, s + 'B') + F(a * 2, b, s + 'C')
print(F(2, 40, ''))
'''

#
# № 13099 (Уровень: Базовый)
# A. Вычесть 1
# B. Умножить на 2
# C. Умножить на 3
# Сколько существует программ, которые преобразуют исходное число 3 в число 15
# и при этом не содержат двух команд A подряд?
'''
def F(a, b, s):
    if a > b+1:
        return 0
    if a == b:
        return 1
    if s == 'A':
        return F(a*2, b, 'B') + F(a*3, b, 'C')
    return F(a-1, b, 'A') + F(a*2, b, 'B') + F(a*3, b, 'C')

# 3 * 3 = 9 - 1 = 8 * 2 = 16 - 1 = 15

print(F(3, 15, ''))
'''


# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Дмитрий = [2.1, 16.1, 23.1]
# КЕГЭ  = []
# на следующем уроке:
