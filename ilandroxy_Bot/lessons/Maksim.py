# region Домашка: ************************************************************


# КЕГЭ № 6901 (Уровень: Средний) (Д. Статный)
# Все пятибуквенные слова, в составе которых могут быть только буквы слова БАРАШ,
# записаны в алфавитном порядке и пронумерованы начиная с 1.
#
# Ниже приведено начало списка.
# 1. ААААА
# 2. ААААБ
# 3. ААААР
# 4. ААААШ
# 5. АААБА
#
# Под каким последним номером идёт слово, в котором не более 3-х согласных
# и только одна буква повторяется дважды, а остальные не повторяются?
'''
s = sorted('БРАШ')
cnt = 0
R = []
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    n = a + b + c + d + e
                    cnt += 1
                    if "АА" in n and (n.count('Б') + n.count('Р') + n.count('Ш') <= 3):
                        if len(set(n)) == 4:
                            R.append(cnt)
print(max(R))
'''

'''
from itertools import product
cnt = 0
R = []
s = sorted('БРАШ')
for var in product(s, repeat=5):
    n = ''.join(var)
    cnt += 1
    if len([x for x in n if x in 'БРШ']) <= 3:
        if len(set(n)) == 4:
            print(cnt, n)  # ШРБАА
            R.append(cnt)
print(max(R))
'''

# КЕГЭ № 5268 (Уровень: Средний) (С. Якунин)
#
# Дмитрий составляет слова, переставляя буквы в слове АМФИБРАХИЙ.
# Сколько различных слов, содержащих ИИФАА или ААФИИ, может составить Дмитрий?
'''
from itertools import permutations
R = []
for var in permutations('АМФИБРАХИЙ'):
    slovo = ''.join(var)
    if 'ИИФАА' in slovo or 'ААФИИ' in slovo:
        R.append(slovo)
# print(len(R))
print(len(set(R)))
'''
# endregion Домашка: ************************************************************

# region Урок: ************************************************************

# Тип 16 №6234
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(1) = 1;
# F(2) = 1;
# F(n) = F(n – 2) * (n + 1) при n > 2.
# Чему равно значение функции F(8)? В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    if n > 2:
        return F(n - 2) * (n + 1)


print(F(8))
'''
# Ответ: 315


# Тип 16 №38591
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n)=1 при n=1;
# F(n)=n+F(n−1), если n чётно,
# F(n)=2×F(n−2), если n>1 и при этом n нечётно.
# Чему равно значение функции F(26)?
'''
def F(n):
    if n == 1:
        return 1
    if n % 2 == 0:
        return n+F(n-1)
    if n % 2 != 0 and n > 1:
        return 2 * F(n-2)

print(F(26))
'''
# Ответ: 4122


# Тип 16 №4656
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
# F(1) = 0
# F(n) = F(n–1) + n, при n >1
#
# G(1) = 1
# G(n) = G(n–1) * n, при n >1
# Чему равно значение функции F(5) + G(5)?
# В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:
        return 0
    if n > 1:
        return F(n-1) + n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return G(n-1) * n

print(F(5) + G(5))
'''
# Ответ: 134


# Тип 16 №36871
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n) = 3?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)


count = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        count += 1
print(count)
'''
# Ответ: 120


# № 9839 Основная волна 27.06.23 (Уровень: Базовый)
# Алгоритм вычисления значения функции
# F(n), где n — натуральное число, задан следующими соотношениями:
# F(n)= 3 при n<3;
# F(n)= 2⋅n + 5 + F(n−2), если n≥3.
# Чему равно значение выражения F(3027)−F(3023)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n < 3:
        return 3
    if n >= 3:
        return 2*n + 5 + F(n-2)


print(F(3027) - F(3023))

# F(3027) = 2*3027 + 5 + F(3025)
# F(3025) = 2*3025 + 5 + F(3023) - F(3023)
print(2*3027 + 5 + 2*3025 + 5)
'''
# Ответ: 12114

# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded


# Тип 23 №59769
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 2
# Сколько существует программ, для которых при исходном числе 4 результатом является число 19,
# и при этом траектория вычислений содержит число 15 и не содержит число 6?
'''
def F(a, b):
    if a > b or a == 6:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*2, b)


print(F(4, 15) * F(15, 19))


# Вариант 2
def F(a, b):
    if a >= b or a == 6:
        return a == b
    return F(a+1, b) + F(a+2, b) + F(a*2, b)


print(F(4, 15) * F(15, 19))
'''


# № 9790 Основная волна 20.06.23 (Уровень: Базовый)
# Исполнитель преобразует число на экране. У исполнителя есть три команды, которые обозначены латинскими буквами:
#
# А. Вычесть 1
# В. Вычесть 2
# С. Найти целую часть от деления на 3
#
# Программа для исполнителя — это последовательность команд.
# Сколько существует программ, для которых при исходном числе 19 результатом является число 3,
# при этом траектория вычислений не содержит чисел 9 и 16?
'''
def F(a, b):
    if a <= b or a == 9 or a == 16:
        return a == b
    return F(a-1, b) + F(a-2, b) + F(a // 3, b)


print(F(19, 3))
'''

# endregion Урок: ************************************************************


# Максим = [2.1, 6.1, 5.1, 8.1, 12.1, 14.1, 16.1, 23.1]
# КЕГЭ = []
# на следующем уроке: 15 номера
