# region Домашка: ************************************************************


# endregion Домашка: ************************************************************

# region Урок: ************************************************************

# Списки в Python() и генераторы списков.

# Списки могут хранить в себе неограниченное кол-во элементов
# Хронят в себе элементы различных типов данных
# Каждый элемент имеет порядковый номер - индекс
# Через индексы мы можем брать элементы списков или менять их
# Обладают широким спектром методов, для взаимодействия с данными

# Работа с индексами списков
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]}')

# Срезы в списках:
print(M[:2])  # ['a', 'b']
print(M[2:])  # ['c', 'd', 'e']
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[1:3])  # ['b', 'c']
print(M[::2])  # ['a', 'c', 'e']
print(M[::3])  # ['a', 'd']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - аналог .reverse()
# range(START, STOP-1, STEP)  - логика примерно такая же
'''

# Пробежать списки можно напрямую или через индексы:
'''
for x in M:
    print(x, end=' ')
print()

for i in range(len(M)):
    print(M[i], end=' ')
print()
'''

# Но через индексы мы так же можем и менять элементы списка
'''
for i in range(len(M)):
      M[i] = M[i] * i  # переприсваиваю новое значение на место старого
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''

# Функции списков:
'''
M = [1, 3, 6, 4, 2, 5, 5]
print(len(M))  # len() - длину списка (кол-во элементов в нем)
print(sum(M))  # sum() - сумму значений элементов списка
print(max(M))  # просто максимальный по значению элемент из списка
print(min(M))  # минимальный
print(sorted(M))  # [1, 2, 3, 4, 5, 6]
# эта функция сортирует все что угодно в алфавитном порядке,
# но результат возвращает в виде списка

print(sorted(M, reverse=True))  # [6, 5, 4, 3, 2, 1] - в обратном порядке
print(set(M))  # {1, 2, 3, 4, 5, 6} - убирает копии элементов


# Часто в ЕГЭ пишут "сколько различных значений будет выведено на экран?"
L = [0, 1, 0, 1, 2, 1, 2, 3, 0, 2, 1, 3, 2, 2, 3, 2, 3, 1]
print(len(set(L)))  # 4
print(set(L))  # {0, 1, 2, 3}
'''


# Методы списков (Методы - это те же функции, но только для одного типа данных)
'''
M = [0, 1, 0, 2, 3, 1, 4, 2, '1', 1, 1.0, 2, 3, '1', 4, 1, 2, 4]

print(M.count(1))  # 5 - возвращает кол-во вхождений элемента
print(M.count('1'))  # 2 - надо учитывать тип данных

print(M.index('1'))  # 8 - выводит индекс первого найденного элемента

M.append('100')  # добавляет новый элемент в конец списка
M.append('101')

M.reverse()  # Разворачивает все элементы списка

# M.sort()  # Сортирует по алфавиту/возрастанию, но sorted() - удобнее

a = 5
b = a  # сдлеали копию переменной

A = [1]
B = A  # это не копия списка - тут будет связь между ними
A.clear()
print(A, B)  # B тоже очистилось

A = [1]
B = A.copy()  # теперь B реально сделал копию списка А
A.clear()
print(A, B)  # [] [1] 
'''

# Введите список чисел с клавиатуры:
'''
n = int(input('Введите кол-во элементов списка: '))
M = []
for i in range(n):
    x = int(input(f'x{i}: '))
    M.append(x)
    print(M)
'''

# Генераторы списков

# Есть список, сравните суммы четных и нечетных элементов
'''
import random
M = [random.randint(0, 100) for x in range(10)]
chet = [x for x in M if x % 2 == 0]
nechet = [x for x in M if x % 2 != 0]
if sum(chet) > sum(nechet):
    print('Четных больше', M)
elif sum(chet) == sum(nechet):
    print('Равны', M)
else:
    print('Нечетных больше', M)
'''
'''
L = [x**2 for x in range(2, 10+1) if x % 2 == 0]
# генератор состоит из трех частей:
# что кладем | откуда это берем | при каком условии
print(L)
'''

'''
M = [int(x) for x in input().split() if x.isdigit()]
# .split() - это метод строк, который разбивает строку на список
# Если .split() принимает пустой аргумент, то разбиение идет по пробелам
print(M)
'''
'''
M = [x for x in input().split(',')]
print(M)
'''

# Открываем .txt файл для 17-го номера
'''
M = [int(x) for x in open('17.txt')]
print(M)
'''

# endregion Урок: ************************************************************


# todo: Максим = [2.1]
# на прошлом уроке:
# на следующем уроке:
