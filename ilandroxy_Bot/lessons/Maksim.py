# region Домашка: ************************************************************

# КЕГЭ № 7846 Danov2304 (Уровень: Базовый) (А.Богданов)
# На числовой прямой даны два отрезка: P = [13; 19] и Q = [17; 23].
# Укажите наибольшую возможную длину такого отрезка A, что формула
# ¬(¬(x ∈ P) → (x ∈ Q)) → ((x ∈ A) →(¬(x ∈ Q)→(x ∈ P)))
#
# тождественно истинна, то есть принимает значение 1 при любых x.
'''
def F(x, a1, a2):
    P = 13 <= x <= 19
    Q = 17 <= x <= 23
    A = a1 <= x <= a2
    return (not((not P) <= Q)) <= (A <= ((not Q) <= P))

R = []
M = [x / 5 for x in range(10 * 5, 25 * 5)]
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)
print(int(max(R)))
'''
# endregion Домашка: *********************************************************

# region Урок: ************************************************************

'''
# M = [53, 79, 73, 56, 53, 237]
# M.count(237) - кол-во вхождений элемента в список/строку
print(len(str(237)))
print(sum([int(x) for x in str(237)]))
'''

# Тип 9 №56537
# В каждой строке электронной таблицы записаны шесть натуральных чисел.
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
# — в строке есть как повторяющиеся, так и неповторяющиеся числа;
# — среднее арифметическое всех неповторяющихся чисел строки меньше,
# чем среднее арифметическое всех повторяющихся чисел этой строки.
#
# При вычислении средних значений каждое число учитывается столько раз, сколько оно встречается в строке.
# В ответе запишите число — количество строк, для которых выполнены эти условия.
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    copied = [x for x in M if M.count(x) > 1]
    not_copied = [x for x in M if M.count(x) == 1]
    if len(copied) > 0 and len(not_copied) > 0:  # — в строке есть как повторяющиеся, так и неповторяющиеся числа;
        if (sum(not_copied) / len(not_copied)) < (sum(copied) / len(copied)):
            count += 1
print(count)
'''
# Ответ: 1770


# Тип 9 №28117
# Найдите количество суток, в которых среднее значение температуры не превышало 20°С.
'''
count = 0
for s in open('9.txt'):
    M = [float(x) for x in s.replace(',', '.').split()]
    # ValueError: could not convert string to float: '13,7'
    if (sum(M) / len(M)) <= 20:
        count += 1
print(count)
'''
# Ответ: 30


# Тип 9 №35898
# Электронная таблица содержит результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Определите, сколько раз за время измерений результат очередного измерения оказывался ниже результата
# предыдущего на 2 и более градусов.
'''
count = 0
A = []
for s in open('9.txt'):
    A += [float(x) for x in s.replace(',', '.').split()]

for i in range(len(A)-1):
    x, y = A[i], A[i+1]
    if (A[i] - A[i+1]) >= 2:
        count += 1
print(count)
'''
# Ответ: 458


# Тип 25 №60267
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2157*4,
# делящиеся на 2024 без остатка. В ответе запишите в первом столбце таблицы все найденные
# числа в порядке возрастания, а во втором столбце — соответствующие им результаты
# деления этих чисел на 2024.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1?2157*4'):
        print(x, x // 2024)
'''
# Ответ:
# 142157664 70236
# 1021575544 504731
# 1121571264 554136
# 1221577104 603546
# 1321572824 652951
# 1421578664 702361
# 1521574384 751766
# 1621570104 801171
# 1721575944 850581
# 1821571664 899986
# 1921577504 949396


# № 12932 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#     – символ «?» означает ровно одну произвольную цифру;
#     – символ «*» означает любую последовательность цифр произвольной длины;
#     в том числе «*» может задавать и пустую последовательность
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2*4,
# делящиеся на 2024 без остатка и являющиеся полными квадратами.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 2024.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1?2*4'):
        if (x ** 0.5) == int(x ** 0.5):
            print(x, x // 2024)
'''
# Ответ:
# 1024144 506
# 1327290624 655776
# 1721586064 850586


# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**7, найдите все простые числа, соответствующие маске 3?1111*.
# В ответе запишите все найденные числа в порядке возрастания.
"""
import time
start = time.time()

'''
def divisors(x):
    div = []
    for j in range(1, x+1):
        if x % j == 0:
            div.append(j)
    return div
'''


def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))

# 24: {1, 2, 3, 4, int(24 ** 0.5), 6, 8, 12, 24} - четное кол-во делителей (без целого квадратного корня)
# Зная один элемент сомножителя, можем найти второй: 24 // 4 == 6, 24 // 6 = 4
# 16: {1, 2, int(16 ** 0.5), 8, 16} - нечетное кол-во делителей

from fnmatch import *
for x in range(10**7):
    if fnmatch(str(x), '3?1111*'):
        if len(divisors(x)) == 2:
            print(x)

end = time.time()
print(end-start)  # Старая: 16.6, новая: 5.03
"""

# endregion Урок: ************************************************************

# Максим = [2.1, 6.1, 5.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 23.1, 25.1]
# КЕГЭ = []
# на следующем уроке:
