
# region Домашка: ************************************************************


# endregion Домашка: ************************************************************

# region Урок: ************************************************************

X = 5  # переменная - это способ хранения данных
# Типы данных переменных
'''
a: int = 5   # int (integer) - целочисленный
print(a * 4)

b: str = '5'  # str (string) - строчный тип данных: буквы, символы, строчные цифры, предложения,...
print(b * 4)  # строка дублируется 4 раза

c: float = 5.0  # float (число с плавающей точкой) - все вещественные числа (дроби)
print(7 / 2)  # 3.5

d1: bool = True  # bool (Boolean) - Булева алгебра логики (математическая логика)
d2: bool = False
print(4 < 10)  # True
'''

# Типы данных коллекций
'''
A: list = [1, 2, 3]  # list (списки)
A[1] = '5'  # В списках можно менять элементы через индексы
print(A)  # [1, '5', 3]
A = []  # пустой список

B: tuple = (1, 2, 3)  # tuple (кортеж)
B = ()  # пустой кортеж
# Основное отличие от списков - менять элементы нельзя

C: set = {1, 2, 3, 1, 2, 3}  # set (множество)
C = set()  # пустое множество
print(type(C))
print(C)  # {1, 2, 3} - в множествах не может быть копий, они удаляются

D: dict = {1: 'один', 2: 'два', 3: 'три'}

D[4] = 'четыре'  # {1: 'один', 2: 'два', 3: 'три', 4: 'четыре'}
D[4] = '444'  # {1: 'один', 2: 'два', 3: 'три', 4: '444'}
print(D)
D = {}  # пустой словарь

print(D[2])  # два
print(D.keys())  # dict_keys([1, 2, 3])
print(D.values())  # dict_values(['один', 'два', 'три'])
'''

'''
L = [2, '2', 2.0, True, 3+4, '3'*4, 7/2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: 'один', 2: 'два', 3: 'три'}]
for x in L:
    print(x, type(x))
'''

# Конвертация типов данных:
'''
a = 5
print(a, type(a))

a = float(a)
print(a, type(a))

a = str(a)
print(a, type(a))  # из строки в int перевод нужно делать аккуратнее, могут быть лишние символы

a = float(a)
print(a, type(a))

a = int(a)
print(a, type(a))


A = [1, 2, 3, 1, 2, 3]
print(A, type(A))

A = set(A)
print(A, type(A))  # set - уберет всех клонов

A = tuple(A)
print(A, type(A))

A = list(A)
print(A, type(A))
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')  # input() - принимает на вход строку
print(type(s))

x = int(input('Введите число: '))
print(type(x))
'''

# Ввод с клавиатуры списка
'''
n = int(input('Введите длину списка: '))
M = []
for i in range(n):
    M.append(int(input(f'Введите {i}-ое число: ')))
print(M)

# Вариант 2
print([int(i) for i in input('Введите числа через пробел: ').split() if i.isdigit()])
'''

# Работа с print() через f-строки
'''
# Задача: вывести на экран "Сегодня, прекрасная погода, облачно, но 28 градусов!"
weather = 'облачно'
temperature = 28
print('Сегодня, прекрасная', weather, ', облачно, но', temperature, 'градусов!')
print('Сегодня, прекрасная ' + weather + ', облачно, но ' + str(temperature) + ' градусов!')
# TypeError: can only concatenate str (not "int") to str
print('Сегодня, прекрасная {}, облачно, но {} градусов!'.format(weather, temperature))
print(f'Сегодня, прекрасная {weather}, облачно, но {temperature} градусов!')
'''


# Найдите сумму цифр строки:
'''
s = input('Введите строку: ')
print(sum([int(i) for i in s if i.isdigit()]))
'''

# Базовая арифметика:
'''
a = 7
b = 2
print(f'{a} + {b} = {a+b}\n'
      f'{a} - {b} = {a-b}\n'
      f'{a} * {b} = {a*b}')
print()  # в каждом print() есть 1 штука '\n'
# деление
print(f'{a} / {b} = {a/b} - обычное вещественное деление, то есть результат будет float().\n'
      f'{a} // {b} = {a//b} - целочисленное деление, отбрасывает остаток полностью.\n'
      f'{a} % {b} = {a%b} - взятие остатка от деления (в виде обыкновенной дроби).')

x = 16
x = x // 2  # 8
x //= 2  # 4
print(x)
'''

# Проверим является ли х четным числом:
'''
if x % 2 == 0:
      print('YES')
else:
      print('NO')


print(f'\n\n'
      f'Возведем {a} в степень {b}: {a} ** {b} = {a**b}\n'
      f'Возьмем квадратный корень от 16: {16} ** (1/2) = {16 ** (1/2)}\n'
      f'Возьмем кубический корень от 27: {27} ** (1/3) = {27 ** (1/3)}')


from math import sqrt
print(sqrt(16))
'''


# region Про комментирование строк
"""
'''
print('Сегодня я читал "Война и Мир"')
'''
"""
# endregion Про комментирование строк


# endregion Урок: ************************************************************


# todo: Максим = []
# на прошлом уроке: Провели первый урок по базовой теории, даже рассмотрели задачу с суммой цифр строки.
# на следующем уроке: Поговорить про условные операторы и подключение библиотек к проекту
