# region Домашка: ************************************************************


#
# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**7, найдите все простые числа, соответствующие маске 3?1111*.
#
# В ответе запишите все найденные числа в порядке возрастания.
'''
import time
start = time.time()

def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

from fnmatch import *
for x in range(10**7):
    if fnmatch(str(x), '3?1111*'):
        if len(divisors(x)) == 2:
            print(x)

print(time.time() - start)
'''


# КЕГЭ № 2588 (Уровень: Базовый) (А.Н. Носкин)
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [190201; 190260],
# числа, имеющие ровно 4 различных чётных делителя.
# В ответе для каждого найденного числа запишите два его наибольших чётных делителя в порядке убывания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


for x in range(190201, 190260):
    D = [t for t in divisors(x) if t % 2 == 0]
    if len(D) == 4:
        print(*D[-2:])
        # F = D[::-1]
        # print(*F[:2:])
'''

# сумму значений разрядов
# сумма цифр числа
'''
num = '1324145214>'
summa = sum([int(x) for x in str(num) if x.isdigit()])
print(summa)
'''

# КЕГЭ № 3901 Джобс 14.05.2022 (Уровень: Базовый)
#
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите 5 минимальных чисел, больших 700000, которые кратны 13
# и не подходят ни под одну из трех масок: *0??3*, *4??2 и *1*.
# Найденные числа запишите в порядке возрастания, справа от каждого найденного числа укажите сумму значений разрядов.

'''
from fnmatch import *
k = 0
for x in range(700011, 10**10, 13):
    if (not fnmatch(str(x), '*0??3*')) and (not fnmatch(str(x), '*4??2')) and (not fnmatch(str(x), '*1*')):
        print(x, sum([int(i) for i in str(x) if i.isdigit()]))
        k += 1
        if k == 5:
            break
'''
# endregion Домашка: *********************************************************

# region Урок: ************************************************************


# КЕГЭ № 5736 (Уровень: Средний) (Д. Тараскин)
# Программа перебирает числа больше 10**9 и выбирает из них числа-палиндромы,
# у которых наибольший делитель (отличный от 1 и самого числа) кратен 7.
# Выведите первые 5 чисел, которые выберет программа, и для каждого числа выведите наибольший делитель.
'''
def divisors(x):
    div = []
    for j in range(2, int(x ** 0.5)+1):  # таким образом исключу 1 и само число
        if x % j == 0:
            div += [j, x // j]
            # div.append(j)
            # div.append(x // j)
    return sorted(set(div))


k = 0
for x in range(10**9+1, 10**10):
    if str(x) == str(x)[::-1]:  # проверка на палиндром
        div = divisors(x)
        if max(div) % 7 == 0:
            print(x, max(div))
            k += 1
            if k == 5:
                break
'''


# КЕГЭ № 706 Джобс 16.11.2020 (Уровень: Базовый)
# Напишите программу, которая ищет среди целых чисел,
# принадлежащих числовому отрезку [6638225; 6638322], простые числа.
# Выведите все найденные простые числа в порядке возрастания,
# слева от каждого числа выведите его номер по порядку.
'''
def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


num = 1
for x in range(6638225, 6638322+1):
    if len(divisors(x)) == 2:
        print(num, x)
        num += 1
'''


# Тип 25 №27856
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632; 95650],
# числа, имеющие ровно шесть различных нечётных натуральных делителей
# (при этом количество четных делителей может быть любым).
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
''''
def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


for x in range(95632, 95650+1):
    div = [n for n in divisors(x) if n % 2 != 0]
    if len(div) == 6:
        print(*div)
'''

# Тип 25 №33104
# Назовём нетривиальным делителем натурального числа его делитель,
# не равный единице и самому числу. Например, у числа 6 есть два нетривиальных делителя: 2 и 3.
# Найдите все натуральные числа, принадлежащие отрезку [289123456; 389123456]
# и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.

# 16: {1, 2, 4, 8, 16} - Если у числа есть целый квадратный корень, то кол-во делителей нечетное
# 24: {1, 2, 3, 4, 6, 8, 12, 24} - Иначе делителей четное кол-во

'''
def divisors(x):
    div = []
    if (x ** 0.5) == int(x ** 0.5):
        for j in range(2, int(x ** 0.5)+1):
            if x % j == 0:
                div += [j, x // j]
    return sorted(set(div))


for x in range(289123456, 389123456+1):
    div = divisors(x)
    if len(div) == 3:
        print(x, max(div))
'''

#
# № 12932 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
#  – символ «?» означает ровно одну произвольную цифру;
#  – символ «*» означает любую последовательность цифр произвольной длины;
#  в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2*4,
# делящиеся на 2024 без остатка и являющиеся полными квадратами.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 2024.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1?2*4'):
        if (x ** 0.5) == int(x ** 0.5):
            print(x, x // 2024)
'''


# Тип 25 №36038
# Пусть M — сумма минимального и максимального натуральных делителей целого числа,
# не считая единицы и самого числа. Если таких делителей у числа нет, то считаем значение M равным нулю.
#
# Напишите программу, которая перебирает целые числа, большие 452021,
# в порядке возрастания и ищет среди них такие, для которых значение M при делении на 7 даёт в остатке 3.
# Вывести первые 5 найденных чисел и соответствующие им значения M.
'''
def divisors(x):
    div = []
    for j in range(2, int(x ** 0.5)+1):  # не считая единицы и самого числа.
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


k = 0
for x in range(452021+1, 10**9):
    div = divisors(x)
    if len(div) >= 2:
        M = div[0] + div[-1]
        if M % 7 == 3:
            print(x, M)
            k += 1
            if k == 5:
                break
'''


# Тип 25 №35999
# Найдите все натуральные числа N, принадлежащие отрезку [200000000; 400000000],
# которые можно представить в виде N=2**m·3**n, где m — чётное число, n — нечётное число.
# В ответе запишите все найденные числа в порядке возрастания.
'''
for m in range(0, 30+1, 2):
    for n in range(1, 31+1, 2):
        N = 2**m * 3**n
        if 200000000 <= N <= 400000000:
            print(N)
'''
# endregion Урок: ************************************************************

# Максим = [2.1, 6.1, 5.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 23.1, 25.1]
# КЕГЭ = []
# на следующем уроке:
