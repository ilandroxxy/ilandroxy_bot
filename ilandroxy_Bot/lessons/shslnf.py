

# region Домашка: ***************************************************************


# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

x = 5  # Переменная - это способ хранить и обращаться к данным
print(type(x))  # <class 'int'>
# print() - функция вывода результата на экран
# type() - возвращает тип данных переменных

# Типы данных переменных:
'''
a = 5  # int (integer) - целочисленные значения

b = 5.0  # float (число с плавающей точкой) - вещественное число (дробь)
print(type(7 / 2))  # <class 'float'>

c = '5'  # str (string) - строковые значения: символы, буквы, слова, текст ..
print(a * 4, c * 4)  # 20 5555

d1 = True  # bool (Boolean) - Булевой алгебры 
d2 = False
print(4 < 10)  # 4 меньше 10?  # True
'''

# Типы данных коллекций (последовательностей)
# Коллекция - хранит несколько значений (неограниченной длины)
'''
A = [1, 2, 3]  # list (Список)
# Хранит в себе неограниченное кол-во элементов, разных типов данных
# Каждый элемент списка имеет свой порядковый номер - индекс
# Индексы считаются слева-направо начиная с нуля или справа-налево начиная с -1
# Через индексы мы можем изменять элементы списка

B = (1, 2, 3)  # tuple (Кортеж)
# Полностью аналогичен спискам, кроме: нельзя изменять элементы кортежа

C = {1, 2, 3, 1, 2, 3}  # set (Множество)
# Элементы не могут повторяться, то есть копии будут удалены
print(C)  # {1, 2, 3}

D = {1: 'one', 2: 'two', 'three': 3}  # dict (словарь)
# Элементы словаря состоят из двух частей: ключ и значение
# Доступ к значению элемента осуществляется через ключ
print(D[1])  # one
print(D['three'])  # 3
print(D.keys())  # dict_keys([1, 2, 'three'])
print(D.values())  # dict_values(['one', 'two', 3])
print(D.items())  # dict_items([(1, 'one'), (2, 'two'), ('three', 3)])

for key, value in D.items():
    print(key, value)
    # 1 one
    # 2 two
    # three 3
'''

'''
M = [2, 2.2, '2', True, 2+3, 7/2, '2' * 4, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: 'one', 2: 'two', 'three': 3}]
for elem in M:
    print(elem, type(elem))
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 1, 2, 3]
print(A, type(A))  # [1, 2, 3, 1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
x = input('Введите строку: ')  # вводит строчное значение с клавиатуры
print(x, type(x))  # <class 'str'>

x = int(input('Введите число: '))
print(x, type(x))  # <class 'int'>
'''


# Форматирование вывода функции print() через f-строку
'''
# Выведите строку: "Сегодня отличная погода, облачно, но температура 24 градуса!"
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print("Сегодня отличная погода, ", weather, ", но температура ", temperature, " градуса!")
print("Сегодня отличная погода, " + weather + ", но температура " + str(temperature) + " градуса!")
print("Сегодня отличная погода, {}, но температура {} градуса!".format(weather, temperature))
print(f"Сегодня отличная погода, {weather}, но температура {temperature} градуса!")
'''

# Базовая арифметика:
'''
a = 7
b = 2

print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b} ')

print()  # в функции print() есть символ '\n'

print(f'{a} / {b} = {a/b} - вещественное деление (их результат всегда будет float()) \n'
      f'{a} // {b} = {a//b} - целочисленное деление (берем целую часть без округлений) \n'
      f'{a} % {b} = {a%b} - остаток от деления (от обыкновенной дроби) ')

print()

print(f'Возведите число {a} в степень {b}: {a} ** {b} = {a**b}')
'''

# endregion Урок: ***************************************************************


# todo: Саяд = []
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:


