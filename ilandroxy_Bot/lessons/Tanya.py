


# Про циклы:
# В питоне всего два цикла: while и for

# while (цикл с условием) - то есть он выполняет тело цикла, только если условие ИСТИННО
# сценарии: 1) пока условие выполняется, 2) Бесконечный цикл
'''
x = [1, 2, 3, 4, 5]

i = 0
while i < len(x):
    print(x[i])
    i += 1

print()
j = 0
while j <= 10: # [0, 10]
    print(j)
    j += 1
print()


# бесконечный Уравнение
i = 4
print(i < 10) # True

password = 'qwerty'
while True:
    pas = input()
    pas = pas.lower()
    if pas == password:
        break
    print("Пароль неверный, попробуйте снова!")

print("Welcome!")
'''

# for (цикл с повторением действий)
# сценарии: 1) повтори n раз, 2) пробеги от n до m
'''
#    0  1  2  3  4
s = [1, 2, 3, 4, 5]  # list()

for i in s:
    print(i)  # прямой перебор

for i in range(0, len(s)):  # [0, 5) - 0, 1, 2, 3, 4
    print(s[i])  # перебор элементов по индексам
'''




# Разбор номера 2
# Тип 2 № 15814
# Логическая функция F задаётся выражением (x ≡ ( w ∨ y)) ∨ ((w → z ) ∧ (y → w)).
# Дан частично заполненный фрагмент, содержащий неповторяющиеся строки таблицы истинности функции F.
# Определите, какому столбцу таблицы истинности соответствует каждая из переменных x, y, z, w.

for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ( (x == (w or y)) or ((w <= z) and (y <= w)) )
                if F == False:
                    print(x, y, z, w)


# Теория:
'''
Python
(not(z))   ¬z    - отрицание (инверсия)
w or y     w ∨ y - дизъюнкция (логическое сложение)
x and y    x ∧ y - конъюнкция (логическое умножение)
y <= w     y → w - импликация
y == z     y ≡ z - тождество

Приоритет операций: отрицание > конъюнкция > дизъюнкция > импликация
'''



