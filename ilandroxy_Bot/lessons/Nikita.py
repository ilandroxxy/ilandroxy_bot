# region Домашка: ********************************************************

# endregion Домашка: ********************************************************


# region Урок: ********************************************************


# № 5660 Вариант 09.01.23 (Уровень: Базовый)
# (А. Игнатюк) Компьютер по имени Иннокентий преобразует число N
# из промежутка [100; 200], которое он преобразует по следующим правилам и получает число R:
#
# 1) Строится запись числа N в двоичной системе счисления
# 2) Если количество цифр в двоичной записи числа N четно, то справа к этому записи дописывается 10
# 3) Если количество цифр в двоичной записи числа N нечетно, то к этой записи слева дописывается 11
# 4) Число переводиться из двоичную систему счисления в десятичную систему счисления
# 5) Данные действия выполняются для полученного числа ещё раз
#
# Полученное значение является искомым значением числа R.
#
# Найдите количество чисел N, для которых результат работы компьютера будет четным
'''
M = []
for n in range(100, 200+1):

    s = bin(n)[2:]
    if len(s) % 2 == 0:
        s += '10'
    else:
        s = '11' + s
    r = int(s, 2)

    s = bin(r)[2:]
    if len(s) % 2 == 0:
        s += '10'
    else:
        s = '11' + s
    r2 = int(s, 2)

    if r2 % 2 == 0:
        M.append(n)
print(len(M))
'''
# Ответ: 87


# № 5662 Вариант 09.01.23 (Уровень: Базовый)
# (Е. Джобс) Необходимо сохранить изображение размером 960 на 512 пикселей.
# Известно, что каждый пиксель может быть окрашен в один из 1200 цветов.
# Для кодирования цвета каждого пикселя используется одинаковое количество бит,
# коды пикселей записываются в файл один за другим без промежутков.
# После кодирования информации о цветах пикселей изображение сжимают.
# Исходный файл изображения больше, чем сжатый, на 35%.
# Какое минимальное целое количество Кбайт необходимо выделить для хранения сжатого изображения?
'''
pixels = 960 * 512
Colors = 1200  # 1024 <= 1200 <= 2048
i = 11
I = pixels * i  # бит

# x - сжатый => 100%
# I - исходный => 135%
proc = I / 135
print((proc * 100) / (2 ** 13))  # 488.8888888888889
'''
# Показать ответ: 489



# № 5664 Вариант 09.01.23 (Уровень: Базовый)
# (А. Игнатюк) В каждой строке электронной таблицы содержится 3 натуральных числа.
# Необходимо найти количество строк, где хотя бы одно любое произведение двух чисел оканчивается на 4.
'''
import itertools
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    # if (M[0] * M[1]) % 10 == 4 or (M[0] * M[2]) % 10 == 4 or ...
    if any((A[0] * A[1]) % 10 == 4 for A in itertools.permutations(M, 2)):
        count += 1
print(count)
'''
# Ответ: 965



# № 5669 Вариант 09.01.23 (Уровень: Средний)
# (М. Ишимов) Операнды арифметического выражения записаны в системе счисления с основанием 16:
#
# 8569x_16 + 12x48_16
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита 16-ричной системы счисления.
# Определите наибольшее значение x, при котором у значения данного арифметического выражения,
# записанного в 8-ричной системе счисления, не встречается более двух чётных цифр.
#
# Для найденного значения x запишите результат выражения в восьмеричной системе счисления.
# Основание системы счисления указывать не нужно.
'''
ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
# print(int('234234', 45))  # ValueError: int() base must be >= 2 and <= 36, or 0

def my_any_system(x, n):
    M = []
    while x > 0:
        M.append(ALPHABET[x % n])
        x //= n
    M.reverse()
    return ''.join(M)

for x in ALPHABET[:16]:
    A = int(f'8569{x}', 16)
    B = int(f'12{x}48', 16)
    R = A + B
    N = my_any_system(R, 8)
    chet = [ALPHABET.index(i) for i in N if ALPHABET.index(i) % 2 == 0]
    if len(chet) <= 2:
        print(N)
'''
# Ответ: 2275735


# № 5672 Вариант 09.01.23 (Уровень: Базовый)
# (М. Ишимов) В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 10 000 включительно.
# Определите количество пар последовательности, в которых оба числа не меньше всех чисел последовательности,
# которые кратны 73. Гарантируется, что такой элемент в последовательности есть.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
A = [i for i in M if i % 73 == 0 and i > 0]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if all(M[i] >= x for x in A) and all(M[i+1] >= x for x in A):
        count += 1
        maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 161 19678


# № 5677 Вариант 09.01.23 (Уровень: Средний)
# (А. Игнатюк) В текстовом файле дана последовательность латинских букв.
# Необходимо найти в этой последовательности самую длинную подстроку, состоящую из комбинации DAD,
# при этом первый и последний элементы могут быть неполными. Например ADDADDADDADD.
#
# В ответе укажите количество символов, составляющих наибольшую длину подходящей подстроки.

s = open('24.txt').readline()
print(s)
print(len('DADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDA'))
print(len('DDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDA')) # win
print(len('ADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDA'))
# Ответ: 99


# endregion Урок: ********************************************************


# todo:   Никита   = [1, 2, 3, 4, 5, 6, 7, 8, 9.1, 11, 12, 13, 14+, 15+, 16, 17, 18, 19-21, 23, 24+, 25.2, 26.1]
# todo: Никита КЕГЭ = [5, 8, 15, 17, 24]
# на прошлом уроке: Прорешивали вариант Джобса от 09.03.2023, номера: 5, 7, 9, 13, 14, 17, 24
# на следующем уроке:  Дома доделать вариант Джобса от 09.03.2023, все номера кроме: 5, 7, 9, 13, 14, 17, 24
