# region Домашка: ********************************************************



# endregion Домашка: ********************************************************


# region Урок: ********************************************************

# 4. КЕГЭ № 5677 Вариант 09.01.23 (Уровень: Средний) (А. Игнатюк) В текстовом файле дана последовательность
# латинских букв. Необходимо найти в этой последовательности самую длинную подстроку, состоящую из комбинации DAD,
# при этом первый и последний элементы могут быть неполными. Например ADDADDADDADD.
#
#
# В ответе укажите количество символов, составляющих наибольшую длину подходящей подстроки.
# Файлы к заданию: 24.txt
'''
s = open('24.txt').readline()
s = s.replace('DAD', '***').replace('AD', '11').replace('DA', '22').replace('D', '3')
s = s.replace('A', ' ').replace('B', ' ').replace('C', ' ').replace('F', ' ').replace('E', ' ')
print(max([len(i) for i in s.split() if '222' not in i and '111' not in i or '33' not in i]))
'''
# Ответ: 99



# 3. КЕГЭ № 7094 OpenFIPI (Уровень: Базовый)
# Текстовый файл состоит из символов A, C, D, F и U. Определите максимальное количество идущих подряд пар символов вида
# CA DA FA CU DU FU
# согласная + гласная в прилагаемом файле.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
s = s.replace('CA', '*').replace('DA', '*').replace('FA', '*').replace('CU', '*').replace('DU', '*').replace('FU', '*')
s = s.replace('A', ' ').replace('D', ' ').replace('C', ' ').replace('F', ' ').replace('U', ' ')
print(max([len(i) for i in s.split()]))
'''
# Ответ: 173



# № 888 Джобс 25.12.2020 (Уровень: Сложный) Рассмотрим произвольное натуральное число, представим его всеми
# возможными способами в виде произведения двух натуральных чисел и найдём для каждого такого произведения разность
# сомножителей. Например, для числа 18 получим: 18 = 18*1 = 9*2 = 6*3, множество разностей содержит числа 17,
# 7 и 3. Подходящей будем называть пару сомножителей, разность между которыми не превышает 110. Найдите все
# натуральные числа, принадлежащие отрезку [1000000; 1500000], у которых есть не менее трёх подходящих пар
# сомножителей. В ответе перечислите найденные числа в порядке возрастания, справа от каждого запишите наибольший из
# всех сомножителей, образующих подходящие пары.
'''
def F(n):
    d = set()  # складываем разности сомножителей
    d2 = set()  # складываем сами сомножители
    for j in range(1, int(n ** 0.5)+1):
        if n % j == 0:
            if (n // j) - j <= 110:
                d.add((n // j) - j)
                d2.add(j)
                d2.add(n // j)
    return d, d2


for n in range(1000000, 1500000+1):
    dl, dl2 = F(n)
    if len(dl) >= 3:
        print(n, max(dl2))
'''
# Показать ответ:
# 1113840 1105
# 1179360 1134
# 1208844 1148
# 1422720 1248
# 1499400 1275


#
# № 1392 (Уровень: Средний) Обозначим через F целую часть среднего арифметического всех натуральных делителей целого
# числа, кроме единицы и самого числа. Если таких делителей у числа нет, то считаем значение F равным нулю. Напишите
# программу, которая перебирает целые числа, большие 550000, в порядке возрастания и ищет среди них такие,
# для которых значение F при делении на 31 даёт в остатке 13.
#
# Выведите первые 5 найденных чисел в порядке возрастания и справа от каждого числа – соответствующее значение F.
'''
def D(n):
    d = set()
    for j in range(2, int(n ** 0.5)+1):
        if n % j == 0:
            d.add(j)
            d.add(n // j)
    return d

count = 0
for n in range(550000+1, 1000000000):
    dl = D(n)
    if len(dl) > 0:
        F = sum(dl) // len(dl)
        if F % 31 == 13:
            print(n, F)
            count += 1
            if count == 5:
                break
'''
# Показать ответ:
# 550032 28285
# 550040 49117
# 550046 28905
# 550050 19419
# 550066 35725


# № 6061 (Уровень: Средний)
# (А. Игнатюк) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
#
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.

# Среди натуральных чисел, не превышающих 10**7, найдите все числа, удовлетворяющие маске 34?8*9 имеющие более 4
# простых делителей (не равных самому числу и 1). В ответ в порядке возрастания выпишите подходящие числа и их
# наибольшие простые делители.

# print(10**7)
# print('34?8**9')
'''
import itertools

def Simpler(x):
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

def D(n):
    d = set()
    for j in range(2, int(n ** 0.5) + 1):
        if n % j == 0:
            if Simpler(j) == True:
                d.add(j)
            if Simpler(n // j) == True:
                d.add(n // j)
    return d

M = []
for l in range(0, 2+1):  # перебираем длины звездочек
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    for y in '0123456789':
        A = int(f'34{y}8{x}9')
        dl = D(A)
        if len(dl) > 4:
            R.append([A, max(dl)])

for x in sorted(R):
    print(*x)
'''

# Показать ответ:
# 3408699 107
# 3418989 157
# 3428139 131
# 3428679 79
# 3438799 53
# 3468969 79
# 3488199 173
# 3488709 233


# endregion Урок: ********************************************************


# todo: Никита = [2, 3, 4, 5, 6, 7, 8, 9.1, 11, 12, 13, 14+, 15+, 16, 17, 18, 19-21, 23, 24+, 25.2]
# на прошлом уроке: Разобрали задачи 24 номера с домашки и прорешивали 25 номера КЕГЭ
# на следующем уроке:
