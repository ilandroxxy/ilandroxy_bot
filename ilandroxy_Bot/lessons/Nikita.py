# Тип 5 № 10407
# Автомат получает на вход четырёхзначное число. По этому числу строится новое число по следующим правилам.
# 1.Складываются отдельно первая и вторая цифры, вторая и третья цифры, а также третья и четвёртая цифры.
# 2.Из полученных трёх чисел выбираются два наибольших и записываются друг за другом в порядке неубывания без разделителей.
# Пример. Исходное число: 9575. Суммы: 9+5 = 14; 5+7 = 12; 7+5=12. Наибольшие суммы: 14, 12. Результат:1214.
# Укажите наибольшее число, при обработке которого автомат выдаёт результат 1515.
'''
for i in range(1000,10000):
    temp = i
    M = []
    while i > 0:
        M.append(i % 10)
        i //= 10
#       i = i // 10
    M.reverse()

    a = M[0] + M[1]
    b = M[1] + M[2]
    c = M[2] + M[3]
    A = [a, b, c]


    x2 = max(A)
    x1 = sum(A) - max(A) - min(A)
    res = str(x1) + str(x2)
    #res = int(res)
    if res == '1515':
        print(temp)
'''
#ответ 9696



# Тип 6 № 39235
# Определите, сколько существует различных целых значений переменной s, при вводе которых данная программа выведет число 256.
# Для Вашего удобства программа представлена на четырёх языках программирования.
'''
count = 0
for i in range(-1000,1000):
    s = i
    s = 3 * (s // 10)
    n = 1
    while s < 221:
            s = s + 13
            n = n * 2
    if n == 256:
        count += 1
print(count)
'''


# Тип 22 № 14781
# Ниже на пяти языках программирования записан алгоритм.
# Получив на вход число x, этот алгоритм печатает два числа: a и b.
# Укажите наименьшее из таких чисел x, при вводе которого алгоритм печатает сначала 2, а потом 4.
'''
for i in range(0,100000):
    x = i
    a = 0; b = 0
    while x > 0:
        if x % 2 == 0:
            a += 1
        else:
            b += x % 10
        x = x//10
    if a == 2 and b == 4:
        print(i, a, b)
        break
'''


# Тип 12 № 27013
'''

Дана программа для Редактора:

НАЧАЛО
ПОКА нашлось (11)
ЕСЛИ нашлось (112)
ТО заменить (112, 6)
ИНАЧЕ заменить (11, 3)
КОНЕЦ ПОКА
КОНЕЦ

Исходная строка содержит десять единиц и четыре двойки, других цифр нет, точный порядок расположения единиц и двоек неизвестен.
 Какую наибольшую сумму цифр может иметь строка, которая получится после выполнения программы?

'''
'''
s = '1'*10 +'2'*4
while '11' in s:
    if '112' in s:
        s = s.replace('112', '6',1)
    else:
        s = s.replace('11', '3',1)
print(s)
'''

#Тип 6 № 35464
#Определите, при каком наименьшем введённом значении переменной s программа выведет число 11.
'''
for i in range(1,1000):
    s = i
    s = 10*s + 5
    n = 1
    while s < 2021:
        s = s + 2*n
        n = n + 1
    if n == 11:
        print(i)
        break
'''
#ответ 191


#Тип 22 № 18568
#Ниже на пяти языках программирования записан алгоритм, который вводит натуральное число x, выполняет преобразования, а затем выводит одно число.
# Укажите наименьшее возможное значение x, при вводе которого алгоритм выведет число 18.
'''
for i in range(1, 10000):
    x = i
    a = 0;
    b = 10
    while x > 0:
        d = x % 9
        if d > a: a = d
        if d < b: b = d
        x = x // 9
    if (a * b) == 18:
        print(i)
        break
'''
#ответ 33

#Строится двоичная запись числа N.

#Удаляется первая слева единица и все следующие непосредственно за ней нули.
# Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.

#Полученное число переводится в десятичную запись.

#Новое число вычитается из исходного, полученная разность выводится на экран.

#Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 100 до 3000?
'''
Result = []
for n in range(100,3001):
    temp = n
    N = []
    while n > 0:
        N.append(n % 2)
        n //= 2
    N.reverse()

    del N[0]

    r = 0
    N.reverse()
    for i in range(0, len(N)):
        r += N[i] * 2 ** i

    res = temp - r
    if res not in Result:
        Result.append(res)

print(len(Result))
'''



#Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 85 идущих подряд цифр 9? В ответе запишите полученную строку.

#НАЧАЛО

#ПОКА нашлось (666) ИЛИ нашлось (999)

#ЕСЛИ нашлось (666)

#ТО заменить (666, 9)

#ИНАЧЕ заменить (999, 6)

#КОНЕЦ ЕСЛИ

#КОНЕЦ ПОКА

#КОНЕЦ

'''
s = '9' * 85
while ('666' in s) or ('999' in s):
    if '666' in s:
        s = s.replace('666', '9', 1)
    else:
        s = s.replace('999', '6', 1)
print(s)
'''
#ответ 699
'''
#НАЧАЛО
#ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>3)
#ЕСЛИ нашлось (>1)
#ТО заменить (>1, 22>)
#КОНЕЦ ЕСЛИ
#ЕСЛИ нашлось (>2)
#ТО заменить (>2, 2>)
#КОНЕЦ ЕСЛИ
#ЕСЛИ нашлось (>3)
#ТО заменить (>3, 1>)
#КОНЕЦ ЕСЛИ

s = '>' + '1' * 10 + '2' * 20 + '3' * 30
while ('>1' in s) or ('>2' in s ) or ('>3' in s):
    if '>1' in s:
        s = s.replace('>1','22>',1)
    if '>2' in s:
        s = s.replace('>2','2>',1)
    if '>3' in s:
        s = s.replace('>3','1>',1)
print(s.count('1') + s.count('2')*2)
'''




#При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.

#На вход программе подается натуральное число nn, а затем nn различных натуральных чисел.
# Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке,
# не меняя их порядок.
'''
n = int(input())
l = []
for i in range(n):
    num = int(input())
    l.append(num)
for i in l:
    if i != min(l) and i != max(l):
        print(i)
'''
#Тип 5 № 18582
#1.Строится двоичная запись числа N без ведущих нулей.

#2.Если в полученной записи единиц больше, чем нулей, то справа приписывается единица. Если нулей больше или нулей и единиц поровну, справа приписывается ноль.

#3.Полученное число переводится в десятичную запись и выводится на экран.

'''
for n in range(1, 100):
    temp = n
    N = []
    while n > 0:
        N.append(n % 2)
        n //= 2
        N.reverse()
    while N[0] == 0:
        del N[0]
    if N.count(1) > N.count(0):
        N.append(1)
    if N.count(0) >= N.count(1):
        N.append(0)

    r = 0
    N.reverse()
    for i in range(len(N)):
        r += N[i] * 2 ** i
        if r > 100:
            print(r)
            break
'''


'''
#Тип 14 № 25846 Добавить в вариант
#Значение арифметического выражения: 9**8·3**20 − 3**10 − 3— записали в системе счисления с основанием 3.
# Сколько цифр 2 содержится в этой записи?
x = 9 ** 8 * 3**20 - 3**10 - 3
N = []
while x > 0:
    N.append(x % 3)
    x //= 3
    N.reverse()
print(N.count(2))
'''

#Тип 8 № 16037
#Вася составляет 5-буквенные слова, в которых есть только буквы З, И, М, А, причём в каждом слове есть ровно одна гласная буква и она встречается ровно 1 раз.
# Каждая из допустимых согласных букв может встречаться в слове любое количество раз или не встречаться совсем.
# Словом считается любая допустимая последовательность букв, не обязательно осмысленная.
# Сколько существует таких слов, которые может написать Вася?
'''
s = 'ЗИМА'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if temp.count('А')== 1 and temp.count('И')== 0 or temp.count('А')== 0 and temp.count('И')== 1:
                        count += 1
print(count)
'''
'''  
#Тип 8 № 3515 Добавить в вариант
#Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке.
#Вот начало списка:
#1.ААААА
#2.ААААО
#3.ААААУ
#4.АААОА
#Сколько букв А встречается в слове, стоящем на 101-м месте от начала списка.
s = 'АОУ'
M = []
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    M.append(temp)
'''
'''
#Тип 8 № 9361
#Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово.
#В качестве кодовых слов Игорь использует 5-буквенные слова, в которых есть только буквы П, И, Р, причём буква П появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем.
#Сколько различных кодовых слов может использовать Игорь?
s = 'ПИР'
M =[]
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if temp.count('П') == 1:
                        M.append(temp)
                        print(len(M))
'''
''''''
#Тип 8 № 16439 Добавить в вариант
#Михаил составляет 6-буквенные коды.
#В кодах разрешается использовать только буквы А, Б, В, Г, при этом код не может начинаться с гласной и не может содержать двух одинаковых букв подряд.
#Сколько различных кодов может составить Михаил?
'''
s = 'АБВГ'
s1 = 'А'
s2 = 'БВГ'
count = 0
for a in s2:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        temp = a + b + c + d + e + f
                        if 'АА' not in temp and 'ББ' not in temp and 'ВВ' not in temp and 'ГГ' not in temp:
                            count += 1
                        print(count)
'''


'''  Тип 2 № 16878
# Операции Математической логики
# отрицание (инверсия): ¬y  <---->  (not(y))
# логическое умножение (конъюнкция):  x ∧ y   <---->  x and y
# логическое сложение (дизъюнкция): x ∨ y  <---->  x or y
# импликация: x → y  <---->  x <= y
# тождество: x ≡ y  <---->  x == y
# Логическая функция F задаётся выражением (x≡¬y)→(z≡(y∨w))
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x == (not(y))) <= (z == (y or w))
                if F == False:
                    print(x, y, z, w, F)
'''

# Тип 2 № 27287
'''
# Логическая функция F задаётся выражением ((¬z ∨ w) ∧ (¬x ≡ y))→(x∧z).
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z, w.

print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (((not(z)) or w) and ((not(x)) == y)) <= (x and z)
                if not(F):
                    print(x, y, z, w, F)
'''

# 37341
'''
#В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности,
# разность которых четна и хотя бы одно из чисел делится на 19, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен
f = open("17.txt", 'r')
M = [int(i) for i in f]
count = 0
maxi = 0
k = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] - M[j]) % 2 == 0 and (M[i] % 19 == 0 or M[j] % 19 == 0):
            count += 1
            if maxi < M[i] + M[j]:
                maxi = M[i] + M[j]
        k += 1

print(count, maxi, k)
'''

'''
import math  # подключаем библиотеки 
x = math.factorial(5)
print(x)

print(math.factorial(6))


import math as m  # переименовываем вызов библиотеки 
print(m.pow(4, 2))


from math import gcd, lcm  # подключаем определенные функции из библиотеки 
print(gcd(24, 12))


from math import *  # Сразу вся библиотека будет подключена в проект (все ее функции)
print(sqrt(16))
'''

# # Тип 24 № 47228
# # Текстовый файл состоит из символов A, C, D, F и O.
#
# # Определите максимальное количество идущих подряд пар символов вида
# #
# # согласная + гласная.
# #
# # Для выполнения этого задания следует написать программу.

'''
import random
M = ['A', 'O', 'C', "D", "F"]
N = 'AOCDF'
s = ''
for i in range(0, 1000000):
    s += random.choice(N)

print(s)


#f = open('24.txt', 'r')
#s = f.readline()
print(s)

s1 = 'AO'
s2 = 'CDF'
count = 0
MaxCount = 0
for i in range(0, len(s)-1):
    if (s[i] in s1 and s[i+1] in s2) or (s[i] in s2 and s[i+1] in s1):
        count += 1
        if MaxCount < count:
            MaxCount = count
    else:
        count = 0
print(MaxCount)
'''

# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 12 Направо 90]
# Направо 30
# Повтори 3 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией,
# заданной данным алгоритмом: Повтори 4 [Вперёд 12 Направо 90]
#
# и находиться вне области, ограниченной линией, заданной данный



import turtle as t
t.shape('turtle')
t.shapesize(0.5)
t.color('blue')
t.left(90)

n = 20
m = 240
x = 160

for i in range(12+1):
    if i % 2 == 0:
        t.forward(m)
        t.right(90)
        t.forward(n)
        t.right(90)
    if i % 2 != 0:
        t.forward(m)
        t.left(90)
        t.forward(n)
        t.left(90)
#t.forward(m)



'''


t.color('red')
for i in range(4):
    t.forward(n)
    t.right(90)
t.right(30)
t.color('green')
for i in range(3):
    t.forward(x)
    t.right(60)
    t.forward(x)
    t.right(120)
'''

t.getscreen().mainloop()




































