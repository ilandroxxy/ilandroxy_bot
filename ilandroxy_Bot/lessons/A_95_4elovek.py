# region Домашка: ************************************************************


# endregion Домашка: ************************************************************


# region Урок: ******************************************************************


# Теория списков (list) в пайтон

# Список - это тип коллекции (последовательности) который, может:
# - Хранить в себе неограниченное кол-во элементов, разных типов данных
# - Каждый элемент списка имеет порядковый номер - индекс
# - Индексы могут считаться слева-направо начиная с нуля или справа-налево начиная с -1
# - В списках можно менять элемент списка через его индекс (в других последовательностях нельзя).
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]}')
'''

# Перебираем элементы списка через циклы:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

for x in M:  # пробежим все элементы списка М по переменной х
    print(x, end=' ')  # a b c d e
print()

for i in range(0, len(M)):  # len(M) - длина списка М (кол-во элементов в нем)
    # print(i, end=' ')  # 0 1 2 3 4
    print(M[i], end=' ')  # a b c d e
print()

for i in range(0, len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''


# Срезы списков:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

print(M[:3])   # ['a', 'b', 'c']
print(M[2:])  # начиная со второго индекса и все, что справа  ['c', 'd', 'e']
print(M[1:3])  # ['b', 'c']
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[::2])  # ['a', 'c', 'e']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a']

M.reverse()  # развернуть список в обратном порядке - то есть M[::-1]
print(M)  # ['e', 'd', 'c', 'b', 'a']
'''


# Функции списков:
'''
M = [4, 6, 7, 3, 4]

print(len(M))
print(sum(M))  # сумма всех элементов списка
print(max(M))
print(min(M))
print(sorted(M))  # [3, 4, 4, 6, 7]
print(sorted(M, reverse=True))  # [7, 6, 4, 4, 3]
# Функция sorted() работает со всеми последовательностями, но результат возвращает в виде списка

print(set(M))   # убирает копии элементов {3, 4, 6, 7}
# "Сколько различных элементов есть в списке?", "Каждая буква должна использоваться один раз"
print(len(set(M)))  # кол-во различных элементов списка М, через множество 
'''


# Методы списков:
# Методы - это функции работающие с определенными типами данных (объектами)
'''
M = [4, 6, 7, 3, 4]

print(M.count(4))  # 2 - выводит кол-во вхождений элемента в список
print(M.index(4))  # 0 - выводит индекс первого найденного элемента

M.append(8)  # добавляет новый элемент в конец списка
print(M)  # [4, 6, 7, 3, 4, 8]

M += [1, 2, 3]  # если нужно добавить сразу несколько элементов в конец списка
print(M)  # [4, 6, 7, 3, 4, 8, 1, 2, 3]

M = [9, 9, 9] + M  # если нужно будет добавить элементы слева к списку
print(M)  # [9, 9, 9, 4, 6, 7, 3, 4, 8, 1, 2, 3]

M.sort()  
print(M)  # [1, 2, 3, 3, 4, 4, 6, 7, 8, 9, 9, 9]

M.reverse() 
print(M)  # [9, 9, 9, 8, 7, 6, 4, 4, 3, 3, 2, 1]
'''

# Генераторы списков
'''
M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x ** 2 for x in range(10)]
print(M)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]

import random
M = [random.randint(0, 100) for x in range(10)]
print(M)  # рандомим 10 чисел в диапазоне от 0 до 100
chet = [x for x in M if x % 2 == 0]
nechet = [x for x in M if x % 2 != 0]
print(chet, nechet)
'''

# Введите список чисел с клавиатуры
'''
M = []
n = int(input('Введите длину списка: '))
for i in range(n):
    x = int(input('x: '))
    M.append(x)
print(M)
'''

'''
M = [int(x) for x in input('Введите числа через пробел: ').split()]
print(M)  # [45, 67, 87, 98]
'''

# Как считать числа из .txt файла в список для 17-го номера:
'''
M = [int(x) for x in open('17.txt')]
print(M)
'''

# endregion Урок: ***************************************************************


# todo: Сева = [2.1, 6.1]
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
