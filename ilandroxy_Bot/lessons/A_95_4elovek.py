# region Домашка: ************************************************************


# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

# Тип 6 №52177
# В начальный момент Черепаха находится в начале координат и
# направлена вверх (вдоль положительного направления оси ординат).
# Черепаха выполнила следующую программу:
#
# Повтори 4 [Вперёд 6 Направо 90 Вперёд 6 Налево 90 Вперёд 6 Направо 90]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области,
# ограниченной линией, полученной при выполнении данной программы.
# Точки, расположенные на линии, не учитывать.
'''
import turtle as t
t.left(90)
l = 20
t.speed(100)

# Повтори 4 [Вперёд 6 Направо 90 Вперёд 6 Налево 90 Вперёд 6 Направо 90]
for i in range(4):
    t.forward(6*l)
    t.right(90)
    t.forward(6*l)
    t.left(90)
    t.forward(6*l)
    t.right(90)

t.up()
for x in range(0, 20):
    for y in range(-7, 15):
        t.goto(x*l, y*l)
        t.dot(3, 'red')
t.done()
'''


# Теория строковых типов данных
'''
s = 'asbdasbdbasbd'
print(type(s))  # <class 'str'>

# Индексы считаются слева направо начиная с нуля и с шагом +1
# Или справа налево начиная с -1 и шагом -1
print(f'Первый элемент строки: {s[0]}\n'
      f'Второй элемент строки: {s[1]}\n\n'
      f'Последний элемент строки: {s[-1]}')
'''

# Серзы строк - взятие подстроки от строки
'''
s = 'asbdasbdbasbd'
print(s[:4])  # 'asbd'  - все, что слева до 4-го индекса (не включая)
print(s[4:])  # 'asbdbasbd' - все, что справа от 4-го индекса (включая)
print(s[3:7])  # 'dasb'
print(s[:])  # 'asbdasbdbasbd' - все элементы
print(s[::-1])  # 'dbsabdbsadbsa' - все элементы в обратном порядке, аналог метода .reverse()
'''

# Функции строк
'''
s = 'asbdasbdbasbd'
print(len(s))  # 13 - функция len() - возвращает длину строки (кол-во элементов строки)
print(max(s))
print(min(s))
print(sorted(s))  # ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'd', 'd', 'd', 's', 's', 's']  # отсортировал по алфавиту
print(sorted(s, reverse=True))  # ['s', 's', 's', 'd', 'd', 'd', 'b', 'b', 'b', 'b', 'a', 'a', 'a'] # по убыванию
print(set(s))   # {'b', 'a', 'd', 's'}

# Сколько различных элементов было в результате
print(len(set(s)))  # 4
'''

# Методы строк (те же функции, только вызываются через . )
'''
s = 'asbdasbdbasbd'

print(s.count('a'))  # 3 - кол-во вхождений элемента
print(s.index('a'))  # 0 - возвращает индекс первого вхождения
print(s.rindex('a'))  # 9 - возвращает индекс последнего вхождения

s.replace('a', '*')
print(s)  # asbdasbdbasbd

s = s.replace('a', '*')
print(s)  # *sbd*sbdb*sbd

s = s.replace('*', '+', 2)
print(s)  # +sbd+sbdb*sbd

x = '234324'
print(x.isdigit())  # True

ip = '213.34.67.189'
IP = ip.split('.')
print(IP)  # ['213', '34', '67', '189']

IP2 = [int(x) for x in ip.split('.')]
print(IP2)  # [213, 34, 67, 189]

new_ip = ','.join(IP)
print(new_ip)  # '213,34,67,189'
'''


# endregion Урок: ***************************************************************


# todo: Сева = [2.1, 6.1]
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
