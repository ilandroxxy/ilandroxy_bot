
# region Домашка:  **************************************************

# Тип 5 №  17324
# Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1. Строится двоичная запись числа N.
# 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.
# Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.
# 3. Полученное число переводится в десятичную запись.
# 4. Новое число вычитается из исходного, полученная разность выводится на экран.
#  Сколько разных значений будет показано на экране автомата при последовательном
# вводе всех натуральных чисел от 10 до 1000?
'''
my_set = set()
for n in range(10, 1000+1):
    s = bin(n)[2:]

    s = s[1:]  # 2.Удаляется первая слева единица

    r = int(s, 2)

    my_set.add(n - r)
print(len(my_set))
'''
# Ответ: 7



# Тип 5 № 28681
# Автомат обрабатывает натуральное число N (128 ≤ N ≤ 255) по следующему алгоритму:
#
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из исходного числа вычитается полученное, разность выводится на экран.

# Какое число нужно ввести в автомат, чтобы в результате получилось 105?
'''
for n in range(128, 255+1):
    s = bin(n)[2:]

    s = s.replace('1', '*')
    s = s.replace('0', '1')
    s = s.replace('*', '0')

    r = int(s, 2)

    if (n - r) == 105:
        print(n)
'''
# Ответ: 180



# Тип 5 №16809
# Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
#
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из нового числа вычитается исходное, полученная разность выводится на экран.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 133?
'''
for n in range(0, 255+1):
    s = bin(n)[2:]

    while len(s) < 8:
        s = '0' + s

    s = s.replace('1', '*')
    s = s.replace('0', '1')
    s = s.replace('*', '0')

    r = int(s, 2)

    if (r - n) == 133:
        print(n)
'''
# Ответ: 61


# Тип 15 № 15803
# На числовой прямой задан отрезок A. Известно, что формула
# ((x ∈ A) → (x**2 ≤ 100)) ∧ ((x**2 ≤ 64) → (x ∈ A))
# тождественно истинна при любом вещественном x. Какую наибольшую длину может иметь отрезок A?
'''
def F(x, a1, a2):
    A = a1 <= x <= a2
    return (A <= (x**2 <= 100)) and ((x**2 <= 64) <= A)

M = [i/2 for i in range(-100*2, 100*2)]
R = []
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2-a1)
print(max(R))
'''
# Ответ: 20

# endregion Домашка: **************************************************


# region Урок:  **************************************************

# Тип 26 № 35915
# В текстовом файле записан набор натуральных чисел, не превышающих 10**9.
# Гарантируется, что все числа различны. Необходимо определить, сколько в наборе таких пар нечётных чисел,
# что их среднее арифметическое тоже присутствует в файле, и чему равно наибольшее из средних арифметических таких пар.
#
# Первая строка входного файла содержит целое число N — общее количество чисел в наборе.
# Каждая из следующих N строк содержит одно число.
#
# В ответе запишите два целых числа: сначала количество пар, затем наибольшее среднее арифметическое.
'''
def binary_search(lst, key):
    lst = sorted(lst)
    left = 0
    right = len(lst) - 1

    while left <= right:
        mid = (left + right) // 2

        if lst[mid] < key:
            left = mid + 1
        elif lst[mid] > key:
            right = mid - 1
        else:
            return True
    return False


numbers = [int(i) for i in open('26.txt')]
N = numbers[0]
del numbers[0]

count = 0
maxi = 0
for i in range(0, len(numbers)):
    for j in range(i+1, len(numbers)):
        if numbers[i] % 2 != 0 and numbers[j] % 2 != 0:
            sred = (numbers[i] + numbers[j]) // 2
            # if sred in numbers:
            if binary_search(numbers, sred):
                count += 1
                maxi = max(maxi, sred)
                print(count, maxi)
'''
# Ответ: 14 679730035


# № 6925 (Уровень: Сложный)
# (Д. Статный) Откройте файл электронной таблицы, содержащей в каждой строке шесть неотрицательных целых чисел.
# Определите количество строк таблицы, содержащих числа, для которых выполнено только одно из условий:
# – в строке только одно число повторяется дважды, а остальные не повторяются;
# – в строке среднее арифметическое чётных чисел отличается от среднего арифметического нечётных чисел более чем на 50.
# В ответе запишите только число.
# *Среднее арифметическое для 0 чисел принять равным нулю.
'''
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    flag1, flag2 = False, False
    if len(set(M)) == 5:
        flag1 = True

    chet = [x for x in M if x % 2 == 0]
    if len(chet) == 0:
        sred_chet = 0
    else:
        sred_chet = sum(chet) / len(chet)

    nechet = [x for x in M if x % 2 != 0]
    if len(nechet) == 0:
        sred_nechet = 0
    else:
        sred_nechet = sum(nechet) / len(nechet)

    if abs(sred_nechet - sred_chet) > 50:
        flag2 = True

    if flag1 + flag2 == 1:
        count += 1
print(count)
'''
'''
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    flag1 = False
    flag2 = False
    if len(set(M)) == len(M)-1:
        flag1 = True
    chet = [i for i in M if i % 2 == 0]
    nechet = [i for i in M if i % 2 != 0]

    try:
        sred_chet = sum(chet) / len(chet)
        sred_nechet = sum(nechet) / len(nechet)

        if abs(sred_nechet - sred_chet) > 50:
            flag2 = True
    except ZeroDivisionError:
        if (sum(M) / len(M)) > 50:
            flag2 = True

    if flag1 + flag2 == 1:
        count += 1
print(count)
'''


'''
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    R1 = []
    R2 = []
    for x in M:
        if x % 2 == 0:
            R1.append(x)
        else:
            R2.append(x)

    try:
        sred1 = sum(R1) / len(R1)
        sred2 = sum(R2) / len(R2)

        if ((abs(sred1 - sred2) > 50) and (len(set(M)) != 5)) or ((abs(sred1 - sred2) <= 50) and (len(set(M)) == 5)):
            count += 1
    except ZeroDivisionError:
        if (sum(M) / len(M)) > 50:
            count += 1
print(count)
'''
# Ответ: 862


# № 6900 (Уровень: Базовый)
# На выполнение Редактору дана следующая программа:
s = '32' * 30 + '1' * 38 + '2' * 4
# ПОКА нашлось(33) ИЛИ нашлось(11) ИЛИ нашлось(22)
#    ЕСЛИ нашлось(33)
#       ТО заменить(33,12)
#    ЕСЛИ нашлось(11)
#       ТО заменить(11,32)
#    ЕСЛИ нашлось(22)
#       ТО заменить(22,31)

# На вход программе поступает строка, содержащая 38 цифр 1, 34 цифры 2 и 30 цифр 3, расположенных в произвольном порядке.
#
# Какая максимальная сумма цифр строки может быть получена в результате работы приведённой выше программы?
'''
def Summa(x):
    summ = 0
    while x > 0:
        summ += x % 10
        x //= 10
    return summ
M = []

s = '32' * 30 + '1' * 38 + '2' * 4
while '33' in s or '11' in s or '22' in s:
    if '33' in s:
        s = s.replace('33', '12', 1)
    if '11' in s:
        s = s.replace('11', '32', 1)
    if '22' in s:
        s = s.replace('22', '31', 1)
    M.append(s)
r = int(max(M))
print(Summa(r))


s = '32' * 30 + '1' * 38 + '2' * 4 + '>'
while '33' in s or '11' in s or '22' in s:
    if '33' in s:
        s = s.replace('33', '12', 1)
    if '11' in s:
        s = s.replace('11', '32', 1)
    if '22' in s:
        s = s.replace('22', '31', 1)
print(sum([int(i) for i in s if i.isdigit()]))
'''
# Показать ответ: 253


#
# № 6904 (Уровень: Базовый)
# (Д. Статный) Логическая функция F задаётся выражением
# ¬(((x→y∧w)∧(z→x∨y))≡w).
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какой столбец в таблице каждой переменной в выражении.
'''
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                # F = (not(((x <= y and w) and (z <= x or y)) == w))
                F = (not (((x <= (y and w)) and (z <= (x or y))) == w))
                if F == True:
                    print(x, y, z, w)
'''

s = open('24.txt').readline()
for x in '0123456789QWERTYUIOPSFGHJKLZXCVBNM':
    s = s.replace(x, '*')
print(s)
print(len('A*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************'))
print(len('D*******************************************************************************************************************************************************************************************************************************************************************************A'))

# Ответ: 273


# ********************************************** *** * ***** *****D************ *********

# endregion Урок:  **************************************************




# Татьяна решить номер 5672
# todo: Татьяна РЕШУ = [1, 2, 3, 4, 5, 6, 7, 8, 9.1, 10, 11, 12, 13, 14+, 15+, 16, 17, 18, 19-21, 22, 23, 24, 25]
# todo: Татьяна КЕГЭ = [5, 8, 24, 25]
# на прошлом уроке: Посмотрели 5, 15 номера с домашнего варианта, порешали 26 номера с прошлого урока и начали решать вариант Джобс 27.03
# на следующем уроке: # todo: