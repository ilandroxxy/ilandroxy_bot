
# region Домашка:  **************************************************

# № 37361
'''
M = [int(i) for i in open('papka/171.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i + 1, len(M)):
        if (M[i] + M [j]) % 126 == 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Answer: 397339 19908
'''

# № 37355
'''
M = [int(i) for i in open('papka/172.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] + M[j]) % 7 == 0:
            count +=1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Answer: 7142586 19992
'''

# № 37371
'''
M = [int(i) for i in open('papka/173.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] - M[j]) % 60 == 0:
            count += 1
            maxi = max(maxi, M[i] - M[j])
print(count, maxi)
# Answer: 832722 9960
'''

# № 45251
'''
M = [int(i) for i in open('papka/107_17.txt')]
L = []
for j in range(0, len(M)):
    if M[j] % 21 == 0:
        L.append(M[j])
x = min(L)
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if M[i] % x == 0 or M[i + 1] % x == 0:
        count += 1
        maxi = max(maxi, M[i] + M[i + 1])
print(count, maxi)
#Answer: 126 171120
'''

# № 37359
'''
M = [int(i) for i in open('papka/175.txt')]
count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] + M[j]) % 117 == 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Answer: 427120 19890
'''

# endregion Домашка: **************************************************



# region Урок:  **************************************************

# Тип 9 № 47213
# Откройте файл электронной таблицы, содержащей в каждой строке шесть натуральных чисел.

# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
# — в строке только одно число повторяется ровно два раза, остальные числа различны;
# — среднее арифметическое неповторяющихся чисел строки не больше суммы повторяющихся чисел.
#
# В ответе запишите только число.
'''
s = open('9.txt').read()
print(s)
'''

'''
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    if len(set(M)) == 5:  # — в строке только одно число повторяется ровно два раза, остальные числа различны;
        copy = sum(M) - sum(set(M))
        summ = 2 * copy
        sred = (sum(M) - summ) / 4
        if sred <= summ:  # — среднее арифметическое неповторяющихся чисел строки не больше суммы повторяющихся чисел.
            count += 1
print(count)
'''
# Ответ: 2241

# [20, 66, 82, 40, 10, 66]
# {20, 66, 82, 40, 10}

# sum([]) = sum({}) = 66

# sum = 66 * 2
# sred ((20 + 82 + 40 + 10 + 66 + 66) - 2*66) / 4
# if sred <= sum



# Тип 9 № 45243 i
# Откройте файл электронной таблицы, содержащей в каждой строке пять натуральных чисел.
# Определите количество строк таблицы, в которых квадрат суммы максимального и минимального чисел в строке больше суммы квадратов трёх оставшихся.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if (M[0] + M[4]) ** 2 > (M[1] ** 2 + M[2] ** 2 + M[3] ** 2):
        count += 1
print(count)

count = 0
for s in open('9.txt').readlines():
    M = sorted([int(i) for i in s.split()])
    if (M[0] + M[4]) ** 2 > (M[1] ** 2 + M[2] ** 2 + M[3] ** 2):
        count += 1
print(count)
'''


# Тип 9 № 28117 i
# Откройте файл электронной таблицы, содержащей вещественные числа — результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.

# Найдите количество суток, в которых среднее значение температуры не превышало 20 °С.
'''
count = 0
for s in open('9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    if (sum(M) / len(M)) <= 20:
        count += 1
print(count)
'''
# Ответ: 30


# Тип 9 № 27406
# Откройте файл электронной таблицы, содержащей вещественные числа — результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Найдите разность между максимальным значением температуры и её средним арифметическим значением.
# В ответе запишите только целую часть получившегося числа.
'''
# Вариант 1
A = []
for s in open('9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    A += M
print(max(A) - (sum(A) / len(A)))

# Вариант 2
A = [float(i) for i in open('9.txt').read().replace(',', '.').split()]
print(max(A) - (sum(A) / len(A)))
'''
# Ответ: 14


# Тип 24 № 27693
# Текстовый файл состоит не более чем из 10**6 символов A, B и C. Определите максимальное количество идущих подряд символов C.
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
'''
s = open('24.txt').readline()
print(len(s))
count = 1
max_count = 0
for i in range(0, len(s)-1):
    if s[i] == 'C' and s[i+1] == 'C':
        count += 1
        max_count = max(max_count, count)
    else:
        max_count = max(max_count, count)
        count = 1
print(max_count)
'''

# Тип 24 № 27687 i
# Текстовый файл состоит не более чем из 106 символов X, Y и Z.
# Определите длину самой длинной последовательности, состоящей из символов Y. Хотя бы один символ Y находится в последовательности.
#
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

# Вариант 1
'''
s = open('24.txt').readline()
count = 1
max_count = 0
for i in range(0, len(s)-1):
    if s[i] == 'Y' and s[i+1] == 'Y':
        count += 1
        max_count = max(max_count, count)
    else:
        max_count = max(max_count, count)
        count = 1
print(max_count)
'''

# Вариант 2
'''
s = open('24.txt').readline()
s = s.replace('X', ' ').replace('Z', ' ')
M = [len(i) for i in s.split()]
print(M)
print(max(M))
'''

# Вариант 3
'''
print(max([len(i) for i in open('24.txt').readline().replace('X', ' ').replace('Z', ' ').split()]))
'''

# Вариант 4
'''
s = open('24.txt').readline()
print(s)
print(len('YYYYYYYYYY'))
'''


# Тип 24 № 45258 i
# Текстовый файл состоит из символов A, B и C.
# Определите максимальное количество идущих подряд пар символов AB или CB в прилагаемом файле.
# Искомая подпоследовательность должна состоять только из пар AB, или только из пар CB, или только из пар AB и CB в произвольном порядке следования этих пар.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
s = s.replace('AB', '*').replace('CB', '*')
s = s.replace('A', ' ').replace('C', ' ').replace('B', ' ')
M = [len(i) for i in s.split()]
print(M)
print(max(M))
'''
# Ответ: 65


# Тип 24 № 27694 i
# Текстовый файл состоит не более чем из 10;;6 символов A, B и C.
# Определите максимальную длину цепочки вида ABABAB... (составленной из фрагментов AB, последний фрагмент может быть неполным).
#
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
'''
s = open('24.txt').readline()
print(s)
print(len('ABABABABABABABABABABABAB'))
'''
# Ответ: 24



# Тип 24 № 37159
# Текстовый файл состоит не более, чем из 107 строчных букв английского алфавита.
# Найдите максимальную длину подстроки, в которой символы «a» и «d» не стоят рядом.
#
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
'''
s = open('24.txt').readline()
s = s.replace('ad', ' ').replace('da', ' ')
M = [len(i) for i in s.split()]
print(M)
print(1+max(M)+1)
'''
# BBBBadBBBBBadBB

# BBxzzyBBBBBxzzyBB


# Тип 24 № 27421
# Текстовый файл состоит не более чем из 10**6 символов X, Y и Z.
# Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.
#
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
'''
s = open('24.txt').readline()
count = 1
max_count = 0
for i in range(0, len(s)-1):
    if s[i] != s[i+1]:
        count += 1
        max_count = max(max_count, count)
    else:
        max_count = max(max_count, count)
        count = 1
print(max_count)
'''
# Ответ: 35


# endregion Урок:  **************************************************


# todo: Татьяна = [2, 5, 8, 9.1, 12, 14+, 15+, 16, 17, 23, 24.1, 25.2]
# на прошлом уроке: Плюс 10 минут долг. Разбирали 9 номера и  24 номера первую часть.
# на следующем уроке: Продолжать разбирать вторую часть 24 номера на строки. Добить 9 номер, если понадобится.