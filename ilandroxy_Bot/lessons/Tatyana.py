
# region Домашка:  **************************************************



# endregion Домашка: **************************************************


# region Урок:  **************************************************

# № 6742
# Апробация 10.03.23 (Уровень: Базовый) Для хранения произвольного растрового изображения размером 320 на 512
# пикселей отведено 120 Кбайт памяти без учёта размера заголовка файла. При кодировании цвета каждого пикселя
# используется одинаковое количество бит, при этом для каждых 2 бит цвета дописывается дополнительный бит контроля
# чётности. Коды пикселей записываются в файл один за другим без промежутков. Какое максимальное количество цветов
# можно использовать в изображении?
'''
# I = pixels * i
pixels = 320 * 512
I = 120 * (2 ** 13)  # бит
i = I / pixels
i = (i / 3) * 2
print(f'Бит информации: {i}')  # убрали третий бит дополнительной чётности
N = 2 ** i
print(f'Кол-во цветов: {N}')
# Показать ответ: 16
'''

#
# № 6746 Апробация 10.03.23 (Уровень: Базовый)
# При регистрации в компьютерной системе каждому объекту присваивается идентификатор, состоящий из 318 символов и
# содержащий только десятичные цифры и символы из 5000-символьного специального алфавита. В базе данных для хранения
# каждого идентификатора отведено одинаковое и минимально возможное целое число байт. При этом используется
# посимвольное кодирование идентификаторов, все символы кодируются одинаковым и минимально возможным количеством бит.

# Определите объём памяти (в Кбайт), необходимый для хранения 8192 идентификаторов.
# В ответе запишите только целое число — количество Кбайт.
'''
symbols =318
alphabet = 10 + 5000
# alphabet = 2 ** i
# 2**12 < 5010 < 2**13  -> i = 13
i = 13  # бит на 1 символ
bit = symbols * i  # бит информации на 1 идентификатор
byte = round(bit / 8)  # если есть остаток, то округляем вверх - лучше делать вручную

Kbyte = (8192 * byte) // (2**10)
print(f'Кол-во Кбайт на все 8192 идентификатора = {Kbyte} Кбайт')
'''
# Показать ответ: 4136



# № 6749 Апробация 10.03.23 (Уровень: Базовый)
# Значение арифметического выражения
#
# 2 * 729**1021 - 2 * 243**1022 + 81**1023 - 2 * 27**1024 - 1025
#
# записали в системе счисления с основанием 3.
# Определите количество значащих нулей в записи этого числа.
'''
x = 2 * 729**1021 - 2 * 243**1022 + 81**1023 - 2 * 27**1024 - 1025
M = []
while x > 0:
    M.append(x % 3)
    x //= 3
M.reverse()
print(M.count(0))
'''
# Показать ответ: 1021


# № 6747 Апробация 10.03.23 (Уровень: Базовый)
# Какая строка получится в результате применения приведённой ниже программы к строке,
# состоящей из 104 идущих подряд цифр 7? В ответе запишите полученную строку.
'''
s = '7' * 104
while '33333' in s or '777' in s:
    if '33333' in s:
        s = s.replace('33333', '7', 1)
    else:
        s = s.replace('777', '3', 1)

print(s)
'''
# Показать ответ: 33


# № 6750 Апробация 10.03.23 (Уровень: Базовый)
# Для какого наибольшего целого неотрицательного числа А выражение

# (x + y ≤ 32) ∨ (y ≤ x + 4) ∨ (y ≥ A)

# тождественно истинно (т.е. принимает значение 1) при любых целых положительных х и y?
'''
def F(x, y, A):
    return (x + y <= 32) or (y <= x + 4) or (y >= A)

for A in range(0, 1000):
    if all(F(x, y, A) for x in range(0, 100) for y in range(0, 100)):
        print(A)
'''
# Показать ответ: 19



# № 6756 Апробация 10.03.23 (Уровень: Базовый)
# У исполнителя есть две команды, которые обозначены латинскими буквами:
#
# А. Вычти 2
# В. Найди целую часть от деления на 2
#
# Сколько существует программ, для которых при исходном числе 40 результатом является число 2,
# и при этом траектория вычислений содержит число 10?
'''
def F(a, b):
    if a < b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a-2, b) + F(a // 2, b)

print(F(40, 10) * F(10, 2))

# Вариант 2
def F(a, b):
    if a <= b:
        return int(a == b)
    else:
        return F(a-2, b) + F(a // 2, b)

print(F(40, 10) * F(10, 2))
'''
# Показать ответ: 40


# № 6757 Апробация 10.03.23 (Уровень: Базовый)
# Текстовый файл состоит из символов С, D, Е и F.
# Определите максимальное количество идущих подряд последовательностей символов CFE или FCE в прилагаемом файле.
# Искомая подпоследовательность должна состоять только из троек CFE, или только из троек FCE,
# или только из троек CFE или FCE в произвольном порядке их следования.
# Для выполнения этого задания следует написать программу.

'''
s = open('files/24_6757.txt').readline()
s = s.replace('CFE', '*').replace('FCE', '*')
s = s.replace('E', ' ').replace('F', ' ').replace('C', ' ').replace('D', ' ')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Показать ответ: 103



# № 6758 Апробация 10.03.23 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

# — символ «?» означает ровно одну произвольную цифру;
#
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 2*5443?1, делящиеся на 23 без остатка.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

M = [i for i in range(0, 10)]
M.append('')

R = []
for x in M:
    for y in range(0, 10):
        r = int(f'2{x}5443{y}1')
        if r % 23 == 0:
            R.append([r, r//23])

for x in sorted(R):
    print(*x)

# 22544301 980187
# 23544341 1023667
# 24544381 1067147
# 28544311 1241057
# 29544351 1284537

A = [1, 2, 3, 4]
B = [1, 2, 2]
print(max(A, B))
x = ''
s = f'123{x}456'
print(s)

# endregion Урок:  **************************************************


# todo: Татьяна = [2, 3, 5, 8, 9.1, 12, 14+, 15+, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# на прошлом уроке: Разобрали 18 номер все типы задач.
# на следующем уроке: