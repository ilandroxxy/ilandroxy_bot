# region Домашка:  **************************************************
'''
#48395 задание 14
for x in '0123456789ab':
    a = int(f'28{x}2', 18)
    b = int(f'93{x}5', 12)
    if (a + b) % 133 == 0:
        print((a + b) //133)
        break
'''

'''
#33186
x = 343**5 - 7**9 + 48
M = []
while x > 0:
    M.append (x % 7)
    x //=7
M.reverse()
print(M.count(6))
'''

'''
#29653 задание 5
for n in range (10, 10000):
    s = bin(n)[2:]
    s = str(s)
    for _ in range(2):
        s += str(s.count('1') % 2)
    r = int(s, 2)
    if r > 170:
        print(n)
        break
'''

'''
#15101
for n in range(1000, 10000):
    s = str(n)
    M = [int(i) for i in s]
    a = M[0] + M[1]
    b = M[1] + M[2]
    c = M[2] + M[3]
    x = str(a + b + c - max(a, b, c) - min(a, b, c))
    y = str(max(a, b, c))
    r = x + y
    if r == '1215':
        print(n)
        break
'''

'''
#10380
for n in range(1000, 10000):
    s = str(n)
    M = [int(i) for i in s]
    a = M[0] + M[1]
    b = M[1] + M[2]
    c = M[2] + M[3]
    x = str(a + b + c - max(a, b, c) - min(a, b, c))
    y = str(max(a, b, c))
    r = x + y
    if r == '1517':
        print(n)
'''

# Тип 5 № 18075
'''
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1) Строится двоичная запись числа N.
#
# 2) К этой записи дописываются справа ещё два разряда по следующему правилу:
#
#  а) находится остаток от деления на 2 суммы двоичных разрядов N, полученный результат дописывается в конец двоичной последовательности N.
#
#  б) пункт а повторяется для вновь полученной последовательности.
#
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R.
# Укажите минимальное число R, которое превышает 123 и может являться результатом работы алгоритма.
# В ответе это число запишите в десятичной системе.


for n in range(1, 1000):
    s = bin(n)[2:]

    for _ in range(2):
        summ = s.count('1')
        s += str(summ % 2)
        # 0 1 0 1 0 1 2 2
        # summ = s.count('1') + s.count('2') * 2

    # for _ in range(2):
    #     M = [int(i) for i in s]
    #     s += str(sum(M) % 2)

    r = int(s, 2)

    if r > 123:
        print(r)
        break
'''
# Ответ: 126


# s = '12345'
# M = [int(i) for i in s]
# print(M)
# print(sum(M))
#
# print(sum([int(i) for i in '82']))


# endregion Домашка: **************************************************


# region Урок:  **************************************************

# Тип 5 № 28681
'''
# Автомат обрабатывает натуральное число N (128 ≤ N ≤ 255) по следующему алгоритму:
#
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из исходного числа вычитается полученное, разность выводится на экран.
#
# Пример. Дано число N = 131. Алгоритм работает следующим образом:
# 1. Восьмибитная двоичная запись числа N: 10000011.
# 2. Все цифры заменяются на противоположные, новая запись: 01111100.
# 3. Десятичное значение полученного числа: 124.
# 4. На экран выводится число: 131 – 124 = 7.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 105?


for n in range(128, 256):  # Автомат обрабатывает натуральное число N (128 ≤ N ≤ 255)
    s = bin(n)[2:]

    # a = ''
    # for i in s:
    #     if i == '0':
    #         a += '1'
    #     else:
    #         a += '0'
    # print(s, a)

    s = s.replace('1', '*')
    s = s.replace('0', '1')  # 2. Все цифры заменяются на противоположные, новая запись: 01111100.
    s = s.replace('*', '0')

    if n - int(s, 2) == 105:
        print(n)
'''
# Ответ: 180


# Теория строк str (string)
'''
s = '654321'
# i  012345

print(s[1])

for x in s:
    print(x, end="")
print()

for i in range(0, len(s)):
    print(s[i], end="")
print()


M = [1, 2, 3]
print(M.count(1) + M.count(2) * 2 + M.count(3) * 3)
'''

# Срезы (строк и списков)
'''
s = '654321'
print(s[3])  # выведи третий по индексу элемент строки
print(s[3:6])  # взял подстроку из строки
print(s[:3])
print(s[3:])
print(s[::])
print(s[::2])
print(s[::-1])  # развернул строку в обратном порядке - аналог reverse()

print(s[:3:2])
print(s)

# Заменить "3" на "*"
s = s[:3] + '*' + s[4:]
print(s)
'''


# Методы строк
'''
s = '    65432145 4nriejgOE IPJKFвш аовшШЩКУЕЩШК     '

print(len(s))  # длина строки

print(s.count('4'))
print(s.index('4'), s.rindex('4'))  # выводим индексы первого и последнего вхождения элемента в строку

print(s.upper())
print(s.lower())
s = s.strip()  # удалил лишние пробелы слева и справа


s = s.replace('4', '*')
print(s)

s = s.replace('*', '***', 1)
print(s)

ip = '192.43.54.244'
M = ip.split('.')  # разбивает строку через определенный символ на список строк
print(M)

ip = '192 43   54      244'
M = ip.split()  # разбивает строку через определенный символ на список строк
print(M)

# A = [int(i) for i in input().split() if int(i) % 2 == 0]
# print(A)


B = ['123', '213', '53', '233']
ip = '..'.join(B)
print(ip)
'''


#
# Ниже приведена программа для исполнителя Редактор.
# НАЧАЛО
# ПОКА нашлось (133) ИЛИ нашлось (881)
#   ЕСЛИ нашлось (133)
#     ТО заменить (133, 81)
#       ИНАЧЕ заменить (881, 13)
#   КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
# КОНЕЦ
#
# На вход этой программе подается строка, состоящая из 100 цифр; последняя цифра в строке — цифра 1,
# а остальные цифры — восьмёрки. Какая строка получится в результате применения программы к этой строке?
# В ответе запишите полученную строку.
'''
s = '8' * 99 + '1'
while '133' in s or '881' in s:
    if '133' in s:
        s = s.replace('133', '81', 1)
    else:
        s = s.replace('881', '13', 1)

print(s)
'''
# Ответ: 813

# endregion Урок:  **************************************************


# todo: Татьяна = [2, 5, 14+], на следующем уроке: Разбираем 8, 12 номера