
# region Домашка:  **************************************************

# Тип 7 № 27378
#  Для проведения эксперимента создаются изображения,
#  содержащие случайные наборы цветных пикселей. Размер изображения  — 640 x 480 пк,
#  при сохранении изображения каждый пиксель кодируется одинаковым числом битов, все коды пикселей записываются подряд,
#  методы сжатия не используются. Размер файла не должен превышать 280 Кбайт, при этом 40 Кбайт
#  необходимо выделить для служебной информации.
#  Какое максимальное количество различных цветов и оттенков можно использовать в изображении?
'''
pixels = 640 * 480
I = 280 # Kbyte >> bit
info = 40
x = I - info
bit = x * (2**13)
# i = bit / pixels
i = 6
N = 2 ** i
print(N)
# answer: 64
'''
# Тип 7 № 27538
#  Для проведения эксперимента записывается звуковой фрагмент в формате квадро (четырёхканальная запись)
#  с частотой дискретизации 32 кГц и 32-битным разрешением. Результаты записываются в файл, сжатие данных не производится;
#  дополнительно в файл записывается служебная информация, необходимая для эксперимента,
#  размер полученного файла 97 Мбайт. Затем производится повторная запись этого же фрагмента в формате моно
#  (одноканальная запись) с частотой дискретизации 16 кГц и 16-битным разрешением.
#  Результаты тоже записываются в файл без сжатия и со служебной информацией, размер полученного файла 7 Мбайт.
#  Объём служебной информации в обоих случаях одинаков. Укажите этот объём в мегабайтах.
#  В ответе укажите только число (количество Мбайт), единицу измерения указывать не надо.
'''
audio1 = 4 * 32 * 1000 * 32
audio2 = 1 * 16 * 1000 * 16
proportion = audio1 // audio2
print(proportion)
# Далее составляю систему уравнений и решаю. Искомое число обозначаю за x.
# Answer: 1
'''

# Тип 11 № 6330
# Для регистрации на сайте некоторой страны пользователю требуется придумать пароль.
# Длина пароля  — ровно 6 символов.
# В качестве символов могут быть использованы десятичные цифры и 27 различных букв местного алфавита,
# причём все буквы используются в двух начертаниях: как строчные, так и прописные (регистр буквы имеет значение!).
# Под хранение каждого такого пароля на компьютере отводится одинаковое и минимально возможное целое количество байтов.
# При этом используется посимвольное кодирование, и все символы кодируются одинаковым и минимально возможным количеством битов.
# Определите объём памяти, который используется для хранения 55 паролей. (Ответ дайте в байтах.)
'''
alphabet = 10 + 2 * 27 # 64
i = 6
password = 6 * i
#byte = password / 8
print(5*55)
#Answer: 275
'''

# Тип 11 № 33090
# При регистрации на сервере каждый пользователь получает уникальный персональный код, состоящий из 19 символов,
#  каждый из которых может быть одной из 26 заглавных латинских букв или одной из 10 цифр.
#  При этом в базе данных сервера формируется запись, содержащая этот код и дополнительную информацию о пользователе.
#  Для представления кода используют посимвольное кодирование, все символы кодируют
#  одинаковым минимально возможным количеством битов, а для кода в целом выделяется минимально возможное целое количество байт.
#
# Для хранения данных о 40 пользователях потребовалось 2800 байт.
# Сколько байт выделено для хранения дополнительной информации об одном пользователе?
# В ответе запишите только целое число  — количество байтов.
'''
symbols = 19
alphabet = 26 + 10
i = 6
code = 19 * i
#byte = code / 8
byte = 15
info = 2800 - byte * 40
print(info // 40)
# Answer: 55
'''

# endregion Домашка: **************************************************


# region Урок:  **************************************************

# № 7601 Досрочная волна 2023 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**8 ,
# найдите все числа, соответствующие маске 12??36*1, делящиеся на 273 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 273.

# print(10**8)
# print('12??36*1')
'''
import itertools
M = []
for l in range(0, 1+1):  # перебираем длину маски - "звездочка"
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in M:
    for y in range(0, 10):
        for z in range(0, 10):
            r = int(f'12{y}{z}36{x}1')
            if r % 273 == 0:
                R.append([r, r // 273])

for x in sorted(R):
    print(*x)
    
import itertools                      # импортируем модуль itertools
M = []                                 # создаем пустой список M
for l in range(0, 1+1):                # перебираем длину маски - "звездочка"
    for s in itertools.product('0123456789', repeat=l):   # генерируем все возможные комбинации цифр с повторениями и заданной длины
        s = ''.join(s)                 # объединяем список цифр в строку
        M.append(s)                   # добавляем строку в список M

R = []                                 # создаем пустой список R
for x in M:                            # перебираем все элементы списка M
    for y in range(0, 10):             # перебираем все цифры от 0 до 9
        for z in range(0, 10):         # перебираем все цифры от 0 до 9
            r = int(f'12{y}{z}36{x}1') # создаем число по определенной формуле, используя текущие значения x, y, и z
            if r % 273 == 0:            # проверяем, делится ли число на 273
                R.append([r, r // 273]) # добавляем в список R пару (число, результат деления числа на 273)

for x in sorted(R):                    # сортируем список R по возрастанию чисел
    print(*x)                          # выводим пары на экран
'''
# Показать ответ:
# 1271361 4657
# 12633621 46277
# 12663651 46387
# 12693681 46497


# № 7273 OpenFIPI (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
#
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа,
# соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 23.
'''
for y in range(10):
    for z in range(10):
        A = int(f'12345{y}7{z}8')
        if A % 23 == 0:
            print(A, A // 23)
'''
# Показать ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816


# № 7013 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# - символ «?» означает ровно одну произвольную цифру;
#
# - символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Найдите все натуральные числа, не превосходящие 10**9, для которых выполнены все условия:
# - соответствуют маске *31*65?;
# - делятся на 31 и 2031 без остатка;
# - количество делителей числа является результатом любой степени двойки

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# справа от каждого числа их частное от деления на 2031.

# print(10**9)
# print('31****65?')
'''
import itertools

def Divisors(x):
    dl = set()
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)  # x = j * (x // j)
    if any(len(dl) == 2 ** i for i in range(1, 25)):  # len(dl) - количество делителей числа x
        return True
    return False


M = []
for l in range(0, 4+1):
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = {}
for x in M:
    for y in M:
        for z in range(10):
            r = int(f'{x}31{y}65{z}')
            if r < 10**9:
                if r % 31 == 0 and r % 2031 == 0:
                    if Divisors(r):
                        R[r] = r // 2031
                        # R.append([r, r // 2031])

for x in sorted(R):
    print(x, R[x])
'''
# Показать ответ:
# 53831655 26505
# 333126651 164021
# 512313657 252247
# 647931651 319021
# 831966654 409634


# № 6210 (Уровень: Средний)
# (Н. Сафронов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
# Например, маске 123*4?5 соответствуют числа 123405 и 12300425. Найдите все натуральные числа, не превосходящие 107, для которых выполняются одновременно все условия:
# • соответствуют маске *2?2*;
# • являются палиндромами;
# • делятся на число 53 без остатка;
# • количество делителей больше 30.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а во втором столбце — сумму делителей.

# print(10**7)
# print('****2?2')
'''
def Divisors(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
    return sorted(dl)

import itertools
M = []
for l in range(0, 4+1):
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = {}
for x in M:
    for y in range(10):
        for z in M:
            r = int(f'{x}2{y}2{z}')
            if r <= 10**7:
                if r % 53 == 0:
                    if str(r) == str(r)[::-1]:
                        dl = Divisors(r)
                        if len(dl) > 30:
                            R[r] = sum(dl)
                            print(r, sum(dl))

for x in sorted(R):
    print(x, R[x])


print(10**7)
print('24282824')
'''
# Ответ:
# 212212 508032
# 2527252 5588352
# 4282824 13789440
# 4626264 11787120
# 8125218 19595520
# 8824288 19908504


# endregion Урок:  **************************************************


# todo: Татьяна = [1, 2, 3, 4, 5, 6, 7, 8, 9.1, 10, 11, 12, 13, 14+, 15+, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# на прошлом уроке: Посмотрели задачи 17, 24, 5, 12 с Досрочного экзамена 2023 года
# на следующем уроке: