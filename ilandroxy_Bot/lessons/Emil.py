# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

def is_prime(x: int):
    """
    Стандартная функция проверки простых чисел
    :param x: Любое целое число
    :return: Булевое значение True - если простое, False - если составное
    """
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

'''
print(is_prime.__doc__)
print(help(is_prime))

print(help('sd'.isalnum))
'''

# alphabet = 'ABEC234.D'
# print(alphabet.isalnum())


# № 5630 (Уровень: Средний)
# (М. Ишимов) Исполнитель Редактор получает на вход строку цифр и преобразовывает её.
# Дана программа для Редактора:
#
# ПОКА нашлось(>1) ИЛИ нашлось(>3) ИЛИ нашлось(>2)
#    ЕСЛИ нашлось(>1)
#       ТО заменить(>1, 1>)
#    ЕСЛИ нашлось(>3)
#       ТО заменить(>3, >2)
#    ЕСЛИ нашлось(>2)
#       ТО заменить(>2, >1)

# На вход приведённой выше программе поступает строка, начинающаяся с символа «>»,
# а затем содержащая 16 цифр «1», n цифр «2» и 16 цифр «3», расположенных в произвольном порядке.
#
# Определите наименьшее значение n, при котором сумма числовых значений цифр строки,
# получившейся в результате выполнения программы, является простым числом.


'''
def is_prime(x: int):
    """
    Стандартная функция проверки простых чисел
    :param x: Любое целое число
    :return: Булевое значение True - если простое, False - если составное
    """
    for j in range(2, x):
        if x % j == 0:
            return False
    return True



for n in range(1, 1000):
    s = '>' + '1' * 16 + '2' * n + '3' * 16

    while '>1' in s or '>3' in s or '>2' in s:
        if '>1' in s:
            s = s.replace('>1', '1>', 1)
        if '>3' in s:
            s = s.replace('>3', '>2', 1)
        if '>2' in s:
            s = s.replace('>2', '>1', 1)

    summ = sum([int(i) for i in s if i.isdigit()])

    if is_prime(summ):
        print(n)
        break
'''
# Показать ответ: 5



# № 5632 (Уровень: Средний)
# (М. Ишимов) Операнды арифметического выражения записаны в системе счисления с основанием 21.
#
# 32yxA_21 + 16y18_21
#
# В записи чисел переменными х и у обозначены две неизвестные цифры из алфавита 21-ричной системы счисления.
# Определите наименьшее значение х, при котором значение данного арифметического выражения кратно 12_10 при любом
# нечётном значении у. Для найденного значения х вычислите частное от деления значения
# арифметического выражения на 12_10 при у = 7 и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления в ответе указывать не нужно.
'''
from string import digits, ascii_uppercase
ALPHABET = digits + ascii_uppercase

alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:21]:
    if all((int(f'32{y}{x}A', 21) + int(f'16{y}18', 21)) % 12 == 0 for y in alphabet[1:21:2]):
        print((int(f'32{7}{x}A', 21) + int(f'16{7}18', 21)) // 12)
'''
# Показать ответ: 71524


#
# № 5633 (Уровень: Базовый)
# (М. Ишимов) Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
#
# Для какого наименьшего натурального числа А формула
#
# (ДЕЛ(x, 3) → ¬ДЕЛ(x, 17)) \/ ¬(A < 190 - x)
#
# тождественно истинна (т.е. принимает значение 1) при любом натуральном значении переменной х?
'''
def F(x, A):
    return ((x % 3 == 0) <= (x % 17 != 0)) or (not(A < (190 - x)))

for A in range(1, 1000):
    if all(F(x, A) for x in range(1, 1000)):
        print(A)
        break
'''
'''
def F(x, A):
    return ((x % 3 == 0) <= (x % 17 != 0)) or (not(A < (190 - x)))

for A in range(1, 1000):
    flag = True
    for x in range(1, 1000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''
# Показать ответ: 139


# № 5634 (Уровень: Базовый)
# (М. Ишимов) Алгоритм вычисления значения функции
# F(n), где n – натуральное число, задан следующими соотношениями:
# F(n)=1 при n=1;
# F(n)= F(n-1) + n*F(n-1), если n>1.
# Чему равно значение выражения F(5997)/F(5995)?
'''
print(5997 * 5997 + 5997)
'''
# Показать ответ: 35970006




# № 5640 (Уровень: Средний)
# (М. Ишимов) Исполнитель преобразует число на экране.
#
# У исполнителя есть две команды, которые обозначены латинскими буквами:
# A. Вычти 4
# B. Вычти сумму цифр числа

# Сколько существует программ, для которых при исходном числе 36 результатом является число 2,
# и при этом траектория вычислений содержит число 14?
'''
def f(x, y):
    if x < y:
        return 0
    if x == y:
        return 1
    else:
        return f(x - 4, y) + f(x - sum([int(i) for i in str(x)]), y)

print(f(36, 14) * f(14, 2))


def f(x, y):
    if x <= y:
        return x == y
    return f(x - 4, y) + f(x - sum([int(i) for i in str(x)]), y)

print(f(36, 14) * f(14, 2))
'''
# Показать ответ: 7


#
# № 5642 (Уровень: Средний)
# (М. Ишимов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, больших 500 000, найдите 5 наименьших чисел у которых есть
# ровно три соответствующих маске *1?3 делителя.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им максимальные делители, не считая самого числа.
'''
from fnmatch import *
def Divisors(x):
    divisors = set()
    count = 0  # кол-во делителей, которые соответствуют маске
    for j in range(2, int(x**0.5)+1):  # не считая самого числа.
        if x % j == 0:
            divisors.add(j)
            if fnmatch(str(j), '*1?3'):
                count += 1
            divisors.add(x // j)
            if fnmatch(str(x // j), '*1?3'):
                count += 1
    return sorted(divisors), count

k = 0
for x in range(500_000+1, 10**10):
    divisors, count = Divisors(x)
    if count == 3:
        print(x, max(divisors))
        k += 1
        if k == 5:
            break
'''
# Показать ответ
# 500786 250393
# 501963 167321
# 503006 251503
# 503217 167739
# 506142 253071


# endregion Урок: ******************************************************************


# todo: Эмиль = []
# на прошлом уроке: Добивали 9-ые номера и начали говорить про 25-ые.
# на следующем уроке:  #todo: разобрать 25 номера с делителями
