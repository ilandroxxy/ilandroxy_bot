# region Домашка: ***************************************************************

# Все пятибуквенные слова, составленные из букв С, У, М, К, А, записаны
# в алфавитном порядке и пронумерованы начиная с 1.
# Ниже приведено начало списка.
# 1. ААААА
# 2. ААААК
# 3. ААААМ
# 4. ААААС
# 5. ААААУ
# 6. АААКА
# Под каким номером стоит слово КУМАС?
'''
s = sorted('СУМКА')
k = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    slovo = a + b + c + d + e
                    if slovo == 'КУМАС':
                        print(k)
                    k += 1
'''
# Ответ: 1179

# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

# № 8417 (Уровень: Базовый)
# Ярослав составляет коды из букв, входящих в слово ЯРОСЛАВ.
# Код должен состоять из 5 букв, буквы в коде не должны повторяться,
# согласных в коде должно быть больше, чем гласных, две гласные буквы нельзя ставить рядом.
# Сколько кодов может составить Ярослав?
'''
s = 'ЯРОСЛАВ'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    slovo = a + b + c + d + e
                    if len(slovo) == len(set(slovo)):  # буквы в коде не должны повторяться / все буквы различны
                        sogl = [x for x in slovo if x in 'РСЛВ']
                        glas = [x for x in slovo if x in 'ЯОА']
                        if len(sogl) > len(glas):
                            if all(pair not in slovo for pair in 'АО ОА ЯО ОЯ АЯ ЯА'.split()):
                                print(slovo)
                                count += 1
print(count)
'''
# Ответ: 1224

'''
# set() - убирает копии элементов
# len() - возвращает длину списка (кол-вол его элементов)
# all() - возвращает True, только если все содержимое будет True
print('АО ОА ЯО ОЯ АЯ ЯА'.split())  # ['АО', 'ОА', 'ЯО', 'ОЯ', 'АЯ', 'ЯА']
'''

#
# № 11298 (Уровень: Базовый)
# (М. Ишимов) Все 6-буквенные слова, составленные из букв А, О, Ж, П, Ю, З,
# записаны в алфавитном порядке и пронумерованы.
# Вот начало списка:
# 1. АААААА
# 2. АААААЖ
# 3. АААААЗ
# 4. АААААО
# 5. АААААП
# 6. АААААЮ
# Сколько существует слов в списке с чётными номерами, которые
# начинаются с буквы А и содержат не менее двух букв З?
'''
s = sorted('АОЖПЮЗ')
k = 1
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        slovo = a + b + c + d + e + f
                        if k % 2 == 0:  # слов в списке с чётными номерами
                            if a == 'А':  # начинаются с буквы А
                                if slovo.count('З') >= 2:  # содержат не менее двух букв З
                                    count += 1
                        k += 1
print(count)
'''
# Ответ: 513


# № 9369 Джобс 10.06.23 (Уровень: Средний)
# Результат выражения 27Ax23_16 + 8yE5D2_16 кратен 5, где х и y – цифры обозначенной системы счисления.
# Укажите максимальное значение суммы x и y, когда это возможно.
# В качестве ответа приведите десятичную запись полученной суммы.
'''
alphabet = sorted('0123456789AQWERTYUIOPSDFGHJKLZXCVBNM')
R = []
for x in alphabet[:16]:
    for y in alphabet[:16]:
        A = int(f'27A{x}23', 16)  # перевод из 16-ой в 10-ную систему счисления
        B = int(f'8{y}E5D2', 16)
        if (A+B) % 5 == 0:
            R.append(alphabet.index(x) + alphabet.index(y))
print(max(R))
'''
# Ответ: 29


# № 8658 (Уровень: Базовый)
# (М. Шагитов) Входным параметром алгоритма является натуральное число N.
# На основании этого числа алгоритм строит новое число R, следующим образом:
#
# 1. Строится восьмеричная запись числа N.
# 2. Затем эту запись обрабатывают по следующим правилам:
# а) Если число N делится на 7, к записи добавляются две последние
# цифры в восьмеричной системе.
# б) Если число N на 7 не делится, остаток от деления умножается на 7,
# переводится в восьмеричную систему и добавляется к концу числа.
# 3. Получившаяся запись представляет собой восьмеричное представление искомого числа R.
# Результат переводится в десятичную систему и выводится на экран.

# Установите количество чисел R, которые меньше 3000,
# и могут быть получены путем обработки числа N.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')


def my_convert(x, n):
    s = ''
    while x > 0:
        s += alphabet[x % n]  # 1. Строится восьмеричная запись числа N.
        x //= n
    s = s[::-1]
    return s


count = 0
for n in range(1, 10000):

    s = my_convert(n, 8)  # Строится восьмеричная запись числа N.

    if n % 7 == 0:  # Если число N делится на 7
        s += s[-2:]  # то добавляются две последние цифры в восьмеричной системе.
    else:  # Если число N на 7 не делится
        x = (n % 7) * 7  # остаток от деления умножается на 7
        s += my_convert(x, 8)  # переводится в восьмеричную систему и добавляется к концу числа.

    r = int(s, 8)  # Результат переводится в десятичную систему
    if r < 3000:
        count += 1

print(count)
'''
# Ответ: 93


# endregion Урок: ***************************************************************


# Анастасия = [1.1, 2.1, 3.1, 4.1, 5.1, 7.1, 8.1, 11.1, 12.1, 14.1]
# КЕГЭ  = []
# на следующем уроке:
