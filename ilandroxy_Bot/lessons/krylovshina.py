# region Домашка: ***************************************************************

# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

'''
import turtle as t
t.left(90)
l = 20
k = 15

# Повтори 2 [Вперёд 7 Направо 60 Вперёд 12 Направо 120]
for _ in range(2):
    t.forward(7*l)
    t.right(60)
    t.forward(12*l)
    t.right(120)

# Поднять хвост
t.up()

# Вперёд 7 Направо 60
t.forward(7*l)
t.right(60)

# Опустить хвост
t.down()

# Повтори 2 [Вперёд 5 Направо 120 Вперёд 10 Направо 60]

t.done()
'''


# Список (list)
# Могут хранить в себе неограниченное кол-во элементов
# Элементы могут быть в разных типа данных
# У каждого элемента списка, есть порядковый номер - индекс
# Через индексы мы можем брать элементы или менять их

# Работа с индексами элементов списка
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]}')

# Берем элементы списка через циклы или индексы
for x in M:
    print(x, end=' ')  # a b c d e
print()

for i in range(len(M)):
    print(M[i], end=' ')  # a b c d e
print()

# Через индексы можно изменять элементы списков
for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''

# Срезы списков
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[2:])  # ['c', 'd', 'e']
print(M[:2])  # ['a', 'b']
print(M[1:3])  # ['b', 'c']
print(M[1], M[3])
print(M[2:4])  # ['c', 'd']
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[::])  # ['a', 'b', 'c', 'd', 'e']
print(M[::2])  # ['a', 'c', 'e']
print(M[::3])  # ['a', 'd']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - это аналог метода .reverse() 
# range(START, STOP, STEP)
'''

# Функции списков:
'''
M = [1, 5, 2, 3, 6, 4, 6]
print(len(M))  # функция len() - возвращает длину списка (кол-во элементов в нем)
print(sum(M))  # функция sum() - возвращает сумму числовых значений
print(max(M))
print(min(M))
print(sorted(M))   # [1, 2, 3, 4, 5, 6, 6] Сортирует элемента списка по порядку возрастания
print(sorted(M, reverse=True))  # [6, 6, 5, 4, 3, 2, 1] По убыванию
# Функция sorted принимает любую коллекцию, но возвращает именно список

print(set(M))  # {1, 2, 3, 4, 5, 6}
# тип данных множество - удаляет копии значений 
'''

# Методы списков (Метод - это функция направленная на объект/тип данных)
'''
M = [1, 2, 3, 3, 2, 21, 32, 3, 21, 3, 1, 31, 4]

print(M.count(3))  # 4 - кол-во найденных элементов внутри списка
print(M.count('3'))  # 0

print(M.index(3))  # 2 - возвращает индекс первого вхождения элемента

M.append('100')  # положить элемент в конец списка!
M.append('101')
print(M)

M.reverse()  # развернуть элементы списка

# M.sort()  # отсортировать элементы списка 
'''


# Генераторы списков:
'''
print(len([x for x in M if '3' in str(x)]))
# Сколько троек было в списке (именно цифры)
'''
# что берем | откуда берем | при каком условии берем
'''
M = [x**2 for x in range(10) if x % 2 == 0]
print(M)
'''

'''
import random
M = [random.randint(0, 100) for x in range(10)]
print(M)

# Сумма каких элементов больше: четных или нечетных?

chet = [x for x in M if x % 2 == 0]
nechet = [x for x in M if x % 2 != 0]
print(chet)
print(nechet)

if sum(chet) > sum(nechet):
    print('Четных больше!')
elif sum(chet) < sum(nechet):
    print('Нечетных больше!')
else:
    print('Суммы равны')
'''

'''
M = [int(x) for x in open('17.txt')]
print(M)
'''
# endregion Урок: ***************************************************************


# todo: Анастасия = [1.1, 2.1, 3.1, 4.1, 5.1, 7.1, 11.1, 12.1, 13.1, 14.1]
# todo:  КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке: Списки и строки
