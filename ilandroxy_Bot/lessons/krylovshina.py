# region Домашка: ***************************************************************
'''
n = int(input())
M = []
for x in range(1, n+1):
    M.append(x)
print(M)
'''

# Вариант 2
'''
print([x for x in range(1, int(input())+1)])
'''

'''
def Divisors(x):
    divisors = []
    for j in range(1, x+1):
        if x % j == 0:
            divisors.append(j)
    return divisors


D = Divisors(345567678)
D = Divisors(345567678)
D = Divisors(345567678)
D = Divisors(345567678)
D = Divisors(345567678)

print(D)
'''

# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

# Строковый тип данных в Python().

# Работа с индексами списков
'''
M = 'abcde'

print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]}')

# Срезы в списках:
print(M[:2])  # 'ab' 
print(M[2:])  # 'cde'
print(M[:])  # 'abcde'
print(M[1:3])  # 'bc'
print(M[::2])  # 'ace'
print(M[::3])  # 'ad'
print(M[::-1])  # 'edcba' - аналог .reverse()
# range(START, STOP-1, STEP)  - логика примерно такая же
'''

# Пробежать списки можно напрямую или через индексы:
'''
M = 'abcde'

for x in M:
    print(x, end=' ')
print()

for i in range(len(M)):
    print(M[i], end=' ')
print()
'''
# Менять элементы строки через индексы НЕЛЬЗЯ!


# Функции строк:
'''
M = '1364255'
print(len(M))  # len() - длину строки (кол-во элементов в нем)
print(max(M))  # просто максимальный по значению элемент из списка
print(min(M))  # минимальный
print(sorted(M))  # ['1', '2', '3', '4', '5', '5', '6']
# эта функция сортирует все что угодно в алфавитном порядке,
# но результат возвращает в виде списка

print(sorted(M, reverse=True))  # ['6', '5', '5', '4', '3', '2', '1'] - в обратном порядке
print(set(M))  # {'2', '6', '4', '5', '3', '1'} - убирает копии элементов


# Часто в ЕГЭ пишут "сколько различных значений будет выведено на экран?"
L = 't4r64tyr64tr64tr46tr'
print(len(set(L)))  # 5
print(set(L))  # {'r', 't', '4', 'y', '6'}
'''

# Методы строк
'''
s = '4522323767289'

print(s.count('2'))  # 4 - возвращает кол-во вхождений элемента в строку
print(s.index('2'))  # 2 - возвращает индекс первого найденного элемента
print(s.rindex('2'))  # 10 - возвращает индекс крайнего правого элемента

print(s.isdigit())  # True

weather = 'облачно'
print('Сегодня {} погода!'.format(weather))

# s = '4522323767289'
s = s.replace('7', '*')  # заменил все символы '7'
print(s)  # 4522323*6*289

s = s.replace('2', '+', 3)
print(s)  # 45++3+3*6*289

# Есть строка чисел, как нам вытащить из нее "двузначные"

s = '123.45.78.9'
ip = s.split('.')
print(ip)  # ['123', '45', '78', '9']
IP = [int(x) for x in s.split('.')]
print(IP)  # [123, 45, 78, 9]


new_s = ','.join(ip)  # '123,45,78,9' - склеивает список строк в одну общую строку
print(new_s)
'''

# Ввод списка целых чисел с клавиатуры
'''
M = [int(x) for x in input('Введите числа через пробел: ').split() if x.isdigit()]
print(M)
'''

# Если функции sum() нет, то как посчитать сумму цифр строки
'''
print(sum([int(x) for x in '213456786543rghnkruje' if x.isdigit()]))
'''

# endregion Урок: ***************************************************************


# todo: Анастасия = [1.1, 2.1, 3.1, 4.1, 5.1, 7.1, 11.1, 12.1, 13.1, 14.1]
# todo:  КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке: Списки и строки
