# region Домашка: ***************************************************************

# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом:
#
# 1. Строится троичная запись числа N.
# 2. К этой записи дописываются разряды по следующему правилу.
# Если сумма троичных разрядов кратна 3, слева дописывается 20, иначе 10.
# 3. Полученная таким образом запись является троичной записью искомого числа R.
#
# Укажите максимальное значение N, после обработки которого
# с помощью этого алгоритма получается число R, меньшее чем 100.
'''
def my_convert(number, system):
    alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    result = ''
    while number > 0:
        result += alphabet[number % system]
        number //= system
    result = result[::-1]
    return result


R = []
for n in range(1, 10000):
    s = my_convert(n, 3)
    # summ = s.count('1') + s.count('2') * 2
    summ = sum([int(x) for x in s if x.isdigit()])
    if summ % 3 == 0:
        s = '20' + s
    else:
        s = '10' + s
    r = int(s, 3)
    if r < 100:
        R.append(n)

print(max(R))  # 18
'''


# Входным параметром алгоритма является натуральное число N.
# На основании этого числа алгоритм строит новое число R, следующим образом:
#
# 1. Строится восьмеричная запись числа N.
# 2. Затем эту запись обрабатывают по следующим правилам:
# а) Если число N делится на 7, к записи добавляются две последние цифры в восьмеричной системе.
# б) Если число N на 7 не делится, остаток от деления умножается на 7,
# переводится в восьмеричную систему и добавляется к концу числа.
# 3. Получившаяся запись представляет собой восьмеричное представление искомого числа R.
# Результат переводится в десятичную систему и выводится на экран.

# Установите количество чисел R, которые меньше 3000, и могут быть получены путем обработки числа N.
'''
def my_convert(number, system):
    alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    result = ''
    while number > 0:
        result += alphabet[number % system]
        number //= system
    result = result[::-1]
    return result


R = []
for n in range(1, 10000):  # числа с 1 до 7ми при переводе в 8-ную систему имеют длину меньше 2-х, что является ошибкой
    s = my_convert(n, 8)
    if n % 7 == 0:
        if len(s) > 1:
            s += s[-2] + s[-1]  # к записи добавляются две последние цифры в восьмеричной системе
    else:
        x = (n % 7) * 7  # остаток от деления умножается на 7
        s = s + my_convert(x, 8)  # переводится в восьмеричную систему и добавляется к концу числа
    r = int(s, 8)
    if r < 3000:
        R.append(r)

print(len(R))  # 93
'''


# Операнды арифметического выражения записаны в системе счисления с основанием 22.

# 18x89957_22 + 80x33_22 + 521x6_22
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита 22-ричной системы счисления.
# Определите наименьшее значение x, при котором значение данного арифметического выражения кратно 21.
# Для найденного значения x вычислите частное от деления значения арифметического выражения на 21
# и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления указывать не нужно.
'''
R = []
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:22]:
    A = int(f'18{x}89957', 22)
    B = int(f'80{x}33', 22)
    C = int(f'521{x}6', 22)
    if (A + B + C) % 21 == 0:
        R.append((A + B + C) // 21)
        
print(min(R))  # 162947670
'''


# Тип 14 №48388
# Операнды арифметического выражения записаны в системах счисления с основаниями 12 и 14:
#
# x231y_12 + 78x98y_14
#
# В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры.
# Определите значения x и y, при которых значение данного арифметического выражения будет наименьшим
# и кратно 99. Для найденных значений x и y вычислите частное от деления значения арифметического
# выражения на 99 и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления в ответе указывать не нужно.
'''
R = []
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:12]:
    for y in alphabet[:12]:
        A = int(f'{x}231{y}', 12)
        B = int(f'78{x}98{y}', 14)
        if (A + B) % 99 == 0:
            R.append((A + B) // 99)

print(min(R))  # 41428
'''


# Тип 14 №48381
# Числа M и N записаны в системе счисления с основанием 14 соответственно.
#
# M = 8x12x_14, N = 8x542_14
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита четырнадцатеричной системы счисления.
# Определите наименьшее значение натурального числа A, при котором существует такой x, что M + A кратно N.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for A in range(1, 1000):
    for x in alphabet[:14]:
        M = int(f'8{x}12{x}', 14)
        N = int(f'8{x}542', 14)
        if (M + A) % N == 0:
            print(A)  # 801
            exit()
'''
# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

# Тип 16 №29664
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:

# F(1) = 1;
# F(n) = n + F(n − 2), если n — нечётно, и n > 1;
# F(n) = n * F(n − 1), если n — чётно.
#
# Чему равно значение функции F(60)?
'''
def F(n):
    if n == 1:
        return 1
    if n > 1 and n % 2 != 0:
        return n + F(n - 2)
    if n % 2 == 0:
        return n * F(n - 1)

    
print(F(60))  # 54000
'''


# Тип 16 №60258
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = n при n > 2024;
# F(n) = n * F(n + 1), если n ≤ 2024.
# Чему равно значение выражения F(2022) / F(2024)?
'''
def F(n):
    if n > 2024:
        return n
    if n <= 2024:
        return n * F(n + 1)


print(F(2022) / F(2024))  # 4090506
'''


# Тип 16 №57423
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = n, если n ≥ 2025,
# F(n) = n + F(n + 2), если n < 2025.
# Чему равно значение выражения F(2022) − F(2023)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n >= 2025:
        return n
    if n < 2025:
        return n + F(n+2)


print(F(2022) - F(2023))  # 2024
'''


# endregion Урок: ***************************************************************


# Анастасия = [2.1, 5.1, 6.1, 8.1, 12.1, 14.1, 16.1]
# КЕГЭ  = []
# на следующем уроке:
