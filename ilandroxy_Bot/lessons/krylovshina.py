# region Домашка: ***************************************************************

# endregion Домашка: ************************************************************


# region Урок: ******************************************************************

# Задача гроб статград
'''
import turtle as t
t.left(90)
t.speed(100)
l = 20
k = 15

t.begin_fill()
for _ in range(4):
    t.forward(k * l)
    t.right(90)
    t.forward(k * l)
    t.left(90)
    t.forward(k * l)
    t.right(90)
t.end_fill()

canvas = t.getcanvas()
count = 0
for x in range(-100*l, 100*l, l):
    for y in range(-100*l, 100*l, l):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item[0] == 5:
            count += 1
print(count)

t.done()
'''

import useful
print(useful.OrelReshka())

# Список библиотек, которые будут на экзамене 100%
# Своя библиотека, чужая с инета библиотека, встроенная в Python

import turtle  # помогает решать 6 номер
import itertools  # помогает решать 8, 9, 17, 24
import fnmatch  # помогает решать 25 номер
import ipaddress  # помогает решать новый 13 номер

import functools
import sys  # могут помогать решать 16 номер
import os

import math  # библиотека храящая в себе функции из математики


# Как общаться и запускать библиотеки
'''
import math  # можно через math. посмотреть все содержимое, но везде придется таскать с собой math
print(math.sqrt(16))

import math as m  # можно через сокращенное имя. посмотреть все содержимое, но зато имя корткое
print(m.sqrt(16))

from math import sqrt, pow, factorial  # можно импортировать только нужные нам функции
print(sqrt(16))

from math import *  # импортировал сразу все функции, но не могу подглядеть 
print(factorial(5))
'''


# Тип 25 №47229
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4,
# делящиеся на 2023 без остатка. В ответе запишите в первом столбце таблицы все найденные числа
# в порядке возрастания, а во втором столбце — соответствующие им результаты деления этих чисел на 2023.
'''
from fnmatch import *
for x in range(2023, 10**10+1, 2023):
    if fnmatch(str(x), '1?2139*4'):
        print(x, x//2023)
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048


# Тип 16 №47220
# Алгоритм вычисления значения функции F(n),
# где n — натуральное число, задан следующими соотношениями:

# F(n) = 1 при n = 1;
# F(n) = n * F(n−1), если n>1.
#
# Чему равно значение выражения F(2023) / F(2020)?

# увеличиваем глубину рекурсии
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n * F(n-1)

print(F(2023) / F(2020))
'''
# Ответ: 8266912626


# Тип 6 №56534
# В начальный момент Черепаха находится в начале координат и направлена вверх
# (вдоль положительного направления оси ординат).
# Черепаха выполнила следующую программу (x в тексте программы— некоторое натуральное число):
#
# Повтори 3 [Вперёд 7 Направо 90]
# Вперёд 8
# Повтори 3 [Налево 90 Вперёд 5]
#
# Определите, сколько различных точек с целочисленными координатами будет находиться на линиях,
# полученных при выполнении данной программы.
'''
import turtle as t
t.left(90)
t.speed(100)
l = 20

# Повтори 3 [Вперёд 7 Направо 90]
for i in range(3):
    t.forward(7 * l)
    t.right(90)

# Вперёд 8
t.forward(8 * l)

# Повтори 3 [Налево 90 Вперёд 5]
for i in range(3):
    t.left(90)
    t.forward(5 * l)

t.up()
for x in range(-2, 10):
    for y in range(-10, 10):
        t.goto(x*l, y*l)
        t.dot(2, 'red')
t.done()
'''

# endregion Урок: ***************************************************************


# todo: Анастасия = [1.1, 2.1, 3.1, 4.1, 5.1, 7.1, 11.1, 12.1, 13.1, 14.1]
# todo:  КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке: Списки и строки
