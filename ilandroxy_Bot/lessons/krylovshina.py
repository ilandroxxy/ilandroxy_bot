# region Домашка: ***************************************************************
'''
s = '>' + '1' * 11 + '2' * 12 + '3' * 30
while '>1' in s or '>2' in s or '>3' in s:
    if '>1' in s:
        s = s.replace('>1', '22>', 1)
    if '>2' in s:
        s = s.replace('>2', '222>', 1)
    if '>3' in s:
        s = s.replace('>3', '1>', 1)

    summa = 0
    for x in s:
        if x.isdigit():
            summa += int(x)
    print(summa)

    print(sum(int(x) for x in s if x.isdigit()))

    break
'''

# Сумма цифр строки s = '123>45
'''
print(sum(int(x) for x in s if x.isdigit()))  # 15
'''


'''
s= '1' * 95 + '7'* 31
while '1111' in s:
    s=s.replace('1111', '7', 1)
    s=s.replace ('77', '1', 1)
print(s)
'''


# Дана программа для исполнителя Редактор:
#
# ПОКА нашлось(555) ИЛИ нашлось(888)
#    заменить(555, 8)
#    заменить(888, 55)
# КОНЕЦ ПОКА

# Известно, что начальная строка состоит более чем из 300 цифр 8
# и не содержит других символов. В ходе работы алгоритма получилась строка,
# содержащая одну цифру 5 и одну цифру 8.
# Укажите минимальную возможную длину входной строки.
'''
for n in range(301, 1000):
    s = '8' * n  # Исходная строка (входной строки)

    while '555' in s or '888' in s:
        s = s.replace('555', '8', 1)
        s = s.replace('888', '55', 1)
    # print(s)  # Получившееся строка
    if s.count('8') == 1 and s.count('5') == 1:
        print(n)
        break
'''
# endregion Домашка: ************************************************************


# region Урок: ******************************************************************


# 8 Кбайт = 8 * 2**13 бит

# Тип 7 №18078
# Какой минимальный объём памяти (в Кбайт) нужно зарезервировать,
# чтобы можно было сохранить любое растровое изображение размером 640 на 320 пикселей
# при условии, что в изображении могут использоваться 64 различных цвета?
# В ответе запишите только целое число, единицу измерения писать не нужно.


# Вес картинки в бит = все пиксели * на i
# I = pixels * i (i - это бит на один пиксель)
'''
# colors = 2 ** i   # 64 = 2 ** i
i = 6
I = (640 * 320 * i) / (2**13)
print(I)  # 1228800 бит или 150 Кбайт
'''
# Ответ: 150


# Тип 7 №27404
# Для хранения произвольного растрового изображения размером 128×320
# пикселей отведено 20 Кбайт памяти без учёта размера заголовка файла.
# Для кодирования цвета каждого пикселя используется одинаковое количество бит,
# коды пикселей записываются в файл один за другим без промежутков.
# Какое максимальное количество цветов можно использовать в изображении?
'''
pixels = 128 * 320
I = 20 * 2**13  # бит
print(I / pixels)
i = 4
colors = 2**i
print(colors)
'''
# Ответ: 16


# Тип 7 №59740
# Сколько секунд потребуется модему, передающему сообщения со скоростью 15872 бит/с,
# чтобы передать цветное растровое изображение размером 1023×768 пикселей,
# при условии, что цвет каждого пикселя кодируется 3 байтами.

# 1 байт = 2**3 бит
'''
i = 3 * 2**3  # бит
I = 1023 * 768 * i
print(I / 15872)
'''
# 1188


# Тип 11 №5237
# При регистрации в компьютерной системе каждому пользователю выдаётся идентификатор,
# состоящий из 10 символов, первый и последний из которых — одна из 18 букв,
# а остальные — цифры (допускается использование 10 десятичных цифр).

# Каждый такой идентификатор в компьютерной программе записывается минимально возможным
# и одинаковым целым количеством байт (при этом используют посимвольное кодирование;
# все цифры кодируются одинаковым и минимально возможным количеством бит,
# все буквы также кодируются одинаковым и минимально возможным количеством бит).
#
# Определите объём памяти, отводимый этой программой для записи 25 идентификаторов.
# Ответ дайте в байтах.
'''
symbols1 = 2   # pixels
alphabet1 = 18  # colors = 2 ** i
i1 = 5

bit1 = symbols1 * i1
print(bit1 / 8)  # 1.25
byte1 = 2  # в данном месте всегда округялется вверх

symbols2 = 8
alphabet2 = 10
i2 = 4

bit2 = symbols2 * i2
print(bit2 / 8)  # 4.0
byte2 = 4

print((byte2 + byte1) * 25)
'''
# Тогда 25 идентификаторов занимают 6·25 = 150 байт


# Тип 11 №13624
# При регистрации в компьютерной системе каждому пользователю выдаётся пароль, состоящий из 15 символов
# и содержащий только символы из 62 - символьного набора, содержащего
# все латинские буквы (заглавные и строчные) и десятичные цифры.   # 62 = 26 + 26 + 10
#
# В базе данных для хранения сведений о каждом пользователе отведено
# одинаковое минимально возможное целое число байт. При этом используют посимвольное кодирование паролей,
# все символы кодируют одинаковым минимально возможным количеством бит. Кроме, собственно, пароля,
# для каждого пользователя системе хранятся дополнительные сведения, для чего выделено целое число байт;
# одно и то же для всех пользователей.
#
# Для хранения сведений о 20 пользователях потребовалось 780 байт.
# Сколько байт выделено для хранения дополнительных сведений об одном пользователе?
# В ответе запишите только целое число – количество байт.
'''
symbols = 15
alphabet = 62  # colors = 2 ** i
i = 6  # бит на один символ

bit = symbols * i
print(bit / 8)  # 11.25
byte = 12

I = 780 / 20  # I = допы + id
print(I - byte)
'''
# Ответ: 27

# 1 бит
# 1 байт = 8 бит = 2**3 бит
# 1 Кбайт = 1024 байта = 2**13 бит
# 1 Мбайт = 1024 Кбайт = 2**23 бит

# Тип 7 48455
# Музыкальный фрагмент был записан в формате квадро (четырёхканальная запись),
# оцифрован с частотой дискретизации 44 кГц и разрешением 16 бит и сохранён без использования сжатия данных.
# Получился файл размером 160 Мбайт.
#
# Затем тот же фрагмент был записан в формате моно
# с разрешением 8 бит и тоже сохранён без сжатия, при этом получился файл размером 10 Мбайт.

# С какой частотой дискретизации проводилась вторая запись? В ответе укажите целое число — частоту в кГц,
# единицу измерения писать не нужно.

# вес файла = кол-во каналов * частотой дискретизации * разрешением * время
# I (бит) = a (шт) * b (Гц) * c (бит) * t (сек)
'''
# t = I / (a * b * c)
t = (160 * 2**23) / (44000 * 4 * 16)
print(t)

# b = I / (a * t * c)
b = (10*2**23) / (1 * 8 * t)
print(b)  # 22000 # Гц
'''
# Ответ: 22

# endregion Урок: ***************************************************************


# Анастасия = [2.1, 5.1, 6.1, 8.1, 12.1, 14.1, 16.1, 17.1, 23.1]
# КЕГЭ  = []
# todo на следующем уроке: разобрать вариант на след. уроке https://kompege.ru/variant?kim=25037026
