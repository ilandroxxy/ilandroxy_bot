
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 8 № 3811
# Все 5-буквенные слова, составленные из букв Е, Ж, И, записаны в алфавитном порядке и пронумерованы.

# Вот начало списка:
# 1. ЕЕЕЕЕ
# 2. ЕЕЕЕЖ
# 3. ЕЕЕЕИ
# 4. ЕЕЕЖЕ
#
# Запишите слово, которое стоит под номером 238.

# Вариант 1
'''
s = sorted('ЕЖИ')
i = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    slovo = a + b + c + d + e
                    if i == 238:
                        print(slovo)
                    i += 1
'''

# Вариант 2
'''
from itertools import product
i = 1
for s in product(sorted('ЕЖИ'), repeat=5):
    slovo = ''.join(s)
    if i == 238:
        print(slovo)
    i += 1
'''


# Тип 8 № 17328
# Герасим составляет 7-буквенные коды из букв Г, Е, Р, А, С, И, М.
# Каждую букву нужно использовать ровно 1 раз,
# при этом нельзя ставить подряд две гласные или две согласные.
# Сколько различных кодов может составить Герасим?

# Вариант 1
'''
from itertools import permutations
count = 0
for s in permutations('ГЕРАСИМ', 7):  # Каждую букву нужно использовать ровно 1 раз
    slovo = ''.join(s)
    if all(pair not in slovo for pair in 'ЕА АЕ ЕИ ИЕ АИ ИА ГР РГ ГС СГ ГМ МГ РС СР СМ МС МР РМ'.split()):
        print(slovo)
        count += 1
print(count)
'''

# Вариант 2
'''
s = 'ГЕРАСИМ'
s1 = 'ЕАИ'
s2 = 'ГРСМ'
count = 0
for a in s2:
    for b in s1:
        for c in s2:
            for d in s1:
                for e in s2:
                    for f in s1:
                        for g in s2:
                            slovo = a + b + c + d + e + f + g
                            if len(set(slovo)) == len(slovo):  # Каждую букву нужно использовать ровно 1 раз
                                count += 1
print(count)
'''

# print({1, 2, 3, 1, 2, 3, 1, 2, 3, 4})
# M = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4]
# print(M)  # [1, 2, 3, 1, 2, 3, 1, 2, 3, 4]
# print(set(M))  # {1, 2, 3, 4}


# Тип 8 № 10500
# Шифр кодового замка представляет собой последовательность из пяти символов,
# каждый из которых является цифрой от 1 до 5.
# Сколько различных вариантов шифра можно задать, если известно,
# что цифра 1 встречается ровно три раза, а каждая из других допустимых цифр
# может встречаться в шифре любое количество раз или не встречаться совсем?
'''
from itertools import product
count = 0
for s in product('12345', repeat=5):
    temp = ''.join(s)
    if temp.count('1') == 3:
        count += 1
print(count)
'''


# Методы строк .split() и .join()
'''
id = '128.231.43.100'
print(id)
nums_id = id.split('.')  # разбивает строку на список строк через символ разделения
print(nums_id)  # ['128', '231', '43', '100']

new_id = ','.join(nums_id)  # склеивает список строк в строку (обратное действие к .split())
print(new_id)
'''


# Тип 8 № 58240
# Сколько существует различных пятизначных чисел,
# записанных в девятеричной системе счисления,
# в записи которых цифры следуют слева направо в убывающем порядке?

# Вариант 1
'''
from itertools import product
count = 0
for s in product('012345678', repeat=5):
    temp = ''.join(s)
    if temp == ''.join(sorted(temp, reverse=True)):
        if len(set(temp)) == len(temp):
            if temp[0] != '0':
                count += 1
print(count)
'''
# Ответ: 126


# Эксперементальное решение 1-го номера
'''
from itertools import permutations

table = '12 14 18 21 23 32 36 38 41 47 56 57 58 63 65 68 74 75 81 83 85 86'
graph = 'аб ба бд дб бг гб дг гд аг га дк кд кл лк ле ел ге ег ве ев ав ва'

for s in permutations('абвгдекл'):
    new_graph = table
    for i in range(1, 8+1):
        new_graph = new_graph.replace(str(i), s[i-1])
    if set(new_graph.split()) == set(graph.split()):
        print(*s)
'''
# е в а л д б к г
# Ответ: 18


# endregion Урок: ******************************************************************


# todo: Василий = [2.1, 5.1, 8.1, 14.1]
# todo:   КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
