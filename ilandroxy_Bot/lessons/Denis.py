# region Домашка:  **************************************************


# endregion Домашка: **************************************************


# region Урок:  **************************************************

#
# № 7089 OpenFIPI (Уровень: Базовый)
# В файле содержится последовательность натуральных чисел. Элементы последовательности могут принимать
# целые значения от 1 до 100 000 включительно. Определите количество пар последовательности, в которых остаток
# от деления хотя бы одного из элементов на 111 равен минимальному элементу последовательности.
# В ответе запишите количество найденных пар, затем минимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
count = 0
mini = 999999
for i in range(0, len(M)-1):
    if M[i] % 111 == min(M) or M[i+1] % 111 == min(M):
        count += 1
        mini = min(mini, M[i]+M[i+1])

        if mini > M[i]+M[i+1]:
            mini = M[i]+M[i+1]
print(count, mini)
'''
# for i in range(0, len(M)):
#     for j in range(i+1, len(M)):

# Ответ: 185 7968


#
# № 6791 (Уровень: Средний)
# (PRO100 ЕГЭ) В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
# Определите количество пар последовательности, в которых только одно число оканчивается на 68,
# а сумма квадратов элементов пары не меньше квадрата минимального элемента последовательности, оканчивающегося на 68.
# В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную из сумм квадратов элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
A = [i for i in M if abs(i) % 100 == 68]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if (abs(M[i]) % 100 == 68 and abs(M[i+1]) % 100 != 68) or ((abs(M[i]) % 100 != 68 and abs(M[i+1]) % 100 == 68)):
        if (M[i]**2 + M[i+1]**2) >= min(A) ** 2:
            count += 1
            maxi = max(maxi, M[i]**2 + M[i+1]**2)
print(count, maxi)
'''
# Ответ: 26 188357305


# № 6198 (Уровень: Средний)
# (Т. Коняев) В файле содержится последовательность натуральных чисел, каждое из которых не превышает 100000.
# Назовём тройкой чисел три идущих подряд элемента последовательности.
# Необходимо определить количество троек, НОК которых является простым числом.
# Гарантируется, что такие тройки имеются в файле.
# В качестве ответа укажите сначала количество таких троек,
# а затем наименьший НОД элементов таких троек. НОД - наибольший общий делитель;
# НОК - наименьшее общее кратное. Простое число - число, которое имеет только два натуральных делителя,
# т.е. делится только на себя и на единицу.
'''
import math as m

def Prime(x):
    """
    Функция проверки числа на простоту. Возвращает результат в виде bool
    """
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            return False
    return True


M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-2):
    if Prime(m.lcm(M[i], M[i+1], M[i+2])):
        count += 1
print(count)
'''
# Ответ: 8 1




# endregion Урок:  **************************************************

import useful
print(useful.Who_Is_Name())

# todo: Денис = [1, 2, 3, 4, 5, 8, 9, 16, 17, 18, 19-21, 22, 23, 24], на следующем уроке:
# на прошлом уроке: Каждый взял по варианту Лени Шастина. Кирилл: Вариант 3, Денис Вариант 4.
# на следующем уроке:
