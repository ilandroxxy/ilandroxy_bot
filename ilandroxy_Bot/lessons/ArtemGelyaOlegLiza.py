
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

M = []  # пустой список
N = list()  # пустой список

# Индексы списков
'''
# i   0    1    2    3    4
A = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка: {A[0]} \n'
      f'Последний элемент списка: {A[-1]}')
'''

# Срезы списков
'''
# i   0    1    2    3    4
A = ['a', 'b', 'c', 'd', 'e']

print(A[1:3])  # ['b', 'c']
print(A[:3])  # ['a', 'b', 'c']
print(A[::-1])  # ['e', 'd', 'c', 'b', 'a']
'''


# Функции списков
'''
M = [1, 2, 3, 43, 324, 324, 2, 3, 432]

print(len(M))  # возвращает длину (кол-во элементов) списка
print(sum(M))
print(max(M))
print(min(M))

print(sorted(M))  # [1, 2, 2, 3, 3, 43, 324, 324, 432]
print(sorted(M, reverse=True))  # [432, 324, 324, 43, 3, 3, 2, 2, 1]

print(set(M))  # {1, 2, 3, 324, 43, 432}
print(len(set(M)))  # 6 - "сколько различных значений?"
'''


# Методы списков (методы - это те же самые функции, только для определенного объекта)
'''
M = [1, 2, 3, 1, 2, 3, '3', '3']

print(M.count(3))  # 2 - кол-во вхождений элемента 3 в список
print(M.count('3'))  # 2

print(M.index(3))  # 2 - возвращает индекс элемента (первого элемента)

M.append(100)  # добавили 100 в конец списка
print(M)  # [1, 2, 3, 1, 2, 3, '3', '3', 100]

M += [1, 2, 3]
print(M)  # [1, 2, 3, 1, 2, 3, '3', '3', 100, 1, 2, 3]

A = [1, 23, 42, 1, 231, 23, 12, 3, 12, 31]
A.sort()
print(A)  # [1, 1, 3, 12, 12, 23, 23, 31, 42, 231]

A.reverse()
print(A)  # [231, 42, 31, 23, 23, 12, 12, 3, 1, 1]

# Добавить элемент 5 в начало списка [1, 2, 3, 4]
B = [1, 2, 3, 4]
B.reverse()
B.append(5)
B.reverse()
print(B)  # [5, 1, 2, 3, 4]

# Добавить элемент 5 в начало списка [1, 2, 3, 4]
B = [1, 2, 3, 4]
B = [5] + B
print(B)  # [5, 1, 2, 3, 4]
'''

# Заполнить список с клавиатуры
'''
M = []
n = int(input('n: '))
for i in range(n):
    x = int(input(f'x{i+1}: '))
    M.append(x)  # добавить элемент в конец списка
print(M)
'''

# Генераторы списков (выражения)
'''
M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]

M = [x**2 for x in range(10) if x % 2 == 0]
print(M)  # [0, 4, 16, 36, 64]

'''
# Введите список целых чисел с клавиатуры
'''
M = [int(x) for x in input('Введите числа через пробел: ').split() if x.isdigit()]
print(M)
'''


# Соберите все четные и нечетные элементы списка

# Тип 9 №52180
# В каждой строке электронной таблицы записаны пять натуральных чисел.
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
# — все числа в строке различны;
# — чётных чисел больше, чем нечётных;
# — сумма чётных чисел меньше суммы нечётных.
# Посчитайте сумму цифр строки
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    if len(M) == len(set(M)):  # — все числа в строке различны;
        chet = [x for x in M if x % 2 == 0]
        nechet = [x for x in M if x % 2 != 0]
        if len(chet) > len(nechet):  # — чётных чисел больше, чем нечётных;
            if sum(chet) < sum(nechet):  # — сумма чётных чисел меньше суммы нечётных.
                count += 1
print(count)
'''

'''
print(sum([int(x) for x in input() if x.isdigit()]))
'''


# Тип 5 №14767
# Автомат получает на вход четырёхзначное число (число не может начинаться с нуля).
# По этому числу строится новое число по следующим правилам.
# 1. Складываются отдельно первая и вторая, вторая и третья, третья и четвёртая цифры заданного числа.
# 2. Наименьшая из полученных трёх сумм удаляется.
# 3. Оставшиеся две суммы записываются друг за другом в порядке неубывания без разделителей.
#
# Пример. Исходное число: 1984. Суммы: 1 + 9 = 10, 9 + 8 = 17, 8 + 4 = 12.
# Удаляется 10. Результат: 1217.
# Укажите наименьшее число, при обработке которого автомат выдаёт результат 613.
'''
for x in range(1000, 10000):  # x = 1234
    M = [int(i) for i in str(x)]
    a = M[0] + M[1]
    b = M[1] + M[2]
    c = M[2] + M[3]

    A = sorted([a, b, c])
    del A[0]

    r = str(A[0]) + str(A[1])

    if r == '613':
        print(x)
        break
'''
# Ответ: 1067


# Тип 5 №29113
# Автомат обрабатывает натуральное число N (128 ≤ N ≤ 255) по следующему алгоритму:
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из исходного числа вычитается полученное, разность выводится на экран.
#
# Пример. Дано число N = 131. Алгоритм работает следующим образом:
# 1. Восьмибитная двоичная запись числа N: 10000011.
# 2. Все цифры заменяются на противоположные, новая запись: 01111100.
# 3. Десятичное значение полученного числа: 124.
# 4. На экран выводится число: 131 – 124 = 7.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 185?
'''
# Вариант 1
for n in range(128, 255+1):

    s = bin(n)[2:]  # # 1. Строится восьмибитная двоичная запись числа N.

    # # 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
    s = s.replace('0', '*').replace('1', '0').replace('*', '1')

    # s = s.replace('0', '*')
    # s = s.replace('1', '0')
    # s = s.replace('*', '1')

    r = int(s, 2)  # 3. Полученное число переводится в десятичную запись.

    if n - r == 185:   # 4. Из исходного числа вычитается полученное, разность выводится на экран.
        print(n)

# Вариант 2
for n in range(128, 255+1):

    # s = bin(n)[2:]
    s = ''
    x = n
    while x > 0:
        s += str(x % 2)
        x //= 2
    s = s[::-1]

    s = s.replace('0', '*').replace('1', '0').replace('*', '1')

    r = int(s, 2)

    if n - r == 185:
        print(n)
'''
# Ответ: 220


# № 10707 (Уровень: Средний)
# (PRO100 ЕГЭ) На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится шестеричная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#     а) если число N делится на 3, то к этой записи дописываются две первые шестеричные цифры;
#     б) если число N на 3 не делится, то остаток от деления на 3 умножается на 10,
#     переводится в шестеричную запись и дописывается в конец числа.
# Полученная таким образом запись является шестеричной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Например, для исходного числа 1110 результатом является число 41610,
# а для исходного числа 1210 это число 44410.
#
# Укажите минимальное число R, большее 680, которое может быть получено
# с помощью описанного алгоритма. В ответе запишите это число в десятичной системе счисления.
'''
def my_convert(x, n):
    s = ''
    while x > 0:
        s += str(x % n)
        x //= n
    s = s[::-1]
    return s


for n in range(6, 10000000):

    s = my_convert(n, 6)

    if n % 3 == 0:
        s = s + s[0] + s[1]
    else:
        x = (n % 3) * 10
        s += my_convert(x, 6)

    r = int(s, 6)

    if r > 680:
        print(r)
        break
'''
# Ответ: 694


# № 10657 (Уровень: Базовый)
# (Н. Сафронов) На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом:
# 1. Строится троичная запись числа N.
# 2. К этой записи дописываются разряды по следующему правилу.
# Если сумма троичных разрядов кратна 3, слева дописывается 20, иначе 10.
# 3. Полученная таким образом запись является троичной записью искомого числа R.
# Например, для числа 10 троичная запись 1013 преобразуется в запись 101013 = 91,
# для числа 11 троичная запись 1023 преобразуется в 201023 = 173.
# Укажите максимальное значение N, после обработки которого с помощью этого алгоритма
# получается число R, меньшее чем 100.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def my_convert(x, n):
    s = ''
    while x > 0:
        s += alphabet[x % n]
        x //= n
    s = s[::-1]
    return s


for n in range(1, 100000):

    s = my_convert(n, 3)

    summ = s.count('1') + s.count('2') * 2
    if summ % 3 == 0:
        s = '20' + s
    else:
        s = '10' + s

    r = int(s, 3)

    if r < 100:
        print(n, r)
'''


# № 9535 Джобс 14.06.23 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Если N четное, то в конец (справа) дописывается 0, иначе дописывается 1.
# 3. К полученной на предыдущем этапе записи справа дописывается 1,
# если в двоичной записи числа N нечетное количество единиц, иначе справа дописывается 0.
# Например, для числа 13 двоичная запись 1101 преобразуется в запись 110111,
# для числа 10 двоичная запись 1010 преобразуется в 101000.
# Полученная таким образом запись является двоичной записью искомого числа R.
# Укажите минимальное значение R, большее 2023, которое может являться результатом выполнения приведенного алгоритма.
'''
for n in range(1, 10000):
    s = bin(n)[2:]

    if n % 2 == 0:
        s += '0'
    else:
        s += '1'

    if bin(n)[2:].count('1') % 2 != 0:
        s += '1'
    else:
        s += '0'

    r = int(s, 2)

    if r > 2023:
        print(r)
        break
'''
# Показать ответ: 2025


# № 8658 (Уровень: Базовый)
# (М. Шагитов) Входным параметром алгоритма является натуральное число N.
# На основании этого числа алгоритм строит новое число R, следующим образом:
#
# 1. Строится восьмеричная запись числа N.
# 2. Затем эту запись обрабатывают по следующим правилам:
# а) Если число N делится на 7, к записи добавляются две последние цифры в восьмеричной системе.
# б) Если число N на 7 не делится, остаток от деления умножается на 7,
# переводится в восьмеричную систему и добавляется к концу числа.
# 3. Получившаяся запись представляет собой восьмеричное представление искомого числа R.
# Результат переводится в десятичную систему и выводится на экран.
#
# Для иллюстрации, если исходное число равно 16, которое в восьмеричной системе равно 20,
# результатом будет число 2016 в восьмеричной системе, или 1038 в десятичной.
# Если исходное число равно 5 (5 в восьмеричной системе),
# результатом будет число 543 в восьмеричной системе, или 355 в десятичной.
#
# Установите количество чисел R, которые меньше 3000, и могут быть получены путем обработки числа N.
'''
count = 0
for n in range(1, 1000000):
    s = oct(n)[2:]

    if n % 7 == 0:
        try:
            s = s + s[-2] + s[-1]
        except IndexError:
            print(n)
    else:
        x = (n % 7) * 7
        s += oct(x)[2:]

    r = int(s, 8)

    if r < 3000:
        count += 1

print(count)
'''
# Ответ: 93


# Тип 5 №16882
# Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из нового числа вычитается исходное, полученная разность выводится на экран.
#
# Пример. Дано число N = 13. Алгоритм работает следующим образом.
# 1. Восьмибитная двоичная запись числа N: 00001101.
# 2. Все цифры заменяются на противоположные, новая запись 11110010.
# 3. Десятичное значение полученного числа 242.
# 4. На экран выводится число 242 − 13 = 229.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 111?
'''
for n in range(0, 255+1):
    s = bin(n)[2:]

    while len(s) < 8:
        s = '0' + s

    s = s.replace('0', '*').replace('1', '0').replace('*', '1')

    r = int(s, 2)

    if r - n == 111:
        print(n)
'''
# Ответ: 72


# endregion Урок: ******************************************************************


# todo: GOAL = [2.1, 6.1, 5.1]
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
