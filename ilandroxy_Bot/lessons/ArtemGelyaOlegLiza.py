
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# todo Разобрать Интересный новый номер 24: Тип 24 №56552 (уже разобран в itpy)


"""
from time import *
start = time()


# Не оптимизированный способ счета делителей
'''
def Divisors(n):
    div = []
    for j in range(1, n+1):
        if n % j == 0:
            div.append(j)
    return div

# print(Divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(Divisors(1_000_000_000))
'''

# Оптимизированный способ поиска делителей числа
def Divisors(n):
    div = set()
    for j in range(1, int(n ** 0.5)+1):
        if n % j == 0:
            div.add(j)
            div.add(n // j)
    return sorted(div)

print(Divisors(1_000_000_000))

end = time() - start
print(end)
"""


# Тип 25 №27851
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [210235; 210300],
# числа, имеющие ровно четыре различных натуральных делителя, не считая единицы и самого числа.
# Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def Divisors(n):
    div = set()
    for j in range(2, int(n ** 0.5)+1):
        if n % j == 0:
            div.add(j)
            div.add(n // j)
    return sorted(div)


for num in range(210235, 210300+1):
    div = Divisors(num)
    if len(div) == 4:
        print(*div)
'''
# 2 4 52561 105122
# 2 4 52567 105134
# 2 4 52571 105142


# Тип 25 №40741
# Пусть M(N) — сумма двух наибольших различных натуральных
# делителей натурального числа N, не считая самого числа.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 10_000_000, для которых 0 < M(N) < 10000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def Divisors(n):
    div = set()
    for j in range(2, int(n ** 0.5)+1):
        if n % j == 0:
            div.add(j)
            div.add(n // j)
    return sorted(div)


cnt = 0
for n in range(10_000_001, 10_000_000_000):
    div = Divisors(n)
    if len(div) >= 2:
        M = div[-1] + div[-2]
        if 0 < M < 10000:
            print(M)
            cnt += 1
            if cnt == 5:
                break
'''
# 6876
# 6374
# 6924
# 8024
# 8358


# Тип 25 №35914
# Найдите все натуральные числа, принадлежащие отрезку [45000000; 50000000],
# у которых ровно пять различных нечётных делителей (количество чётных делителей может быть любым).
# В ответе перечислите найденные числа в порядке возрастания.
'''
def Divisors(n):
    div = set()
    for j in range(1, int(n ** 0.5)+1):
        if n % j == 0:
            if j % 2 != 0:
                div.add(j)
            if (n // j) % 2 != 0:
                div.add(n // j)
    return sorted(div)


for n in range(45000000, 50000000+1):
    div = Divisors(n)
    if len(div) == 5:
        print(n)
'''
# 45212176
# 45265984
# 4745832
# 48469444


# Тип 25 №57432
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# 1) символ «?» означает ровно одну произвольную цифру;
# 2) символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.

# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 12??1*56, делящиеся на 317 без остатка.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а во втором
# столбце — соответствующие им результаты деления этих чисел на 317.
'''
from fnmatch import *
for x in range(317, 10**8,  317):  # делящиеся на 317 без остатка
    if fnmatch(str(x), '12??1*56'):
        print(x, x//317)
'''
# 1226156 3868
# 12321156 38868
# 12511356 39468
# 12701556 40068
# 12891756 40668


# № 11603 (Уровень: Средний)
# (Л. Шастин) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**12, найдите все числа,
# соответствующие маске 1*28?64 и делящиеся на 596 без остатка.
# В ответе запишите количество подходящих чисел и целую часть их среднего арифметического.
'''
from fnmatch import *
M = []
for x in range(596, 10**12, 596):
    if fnmatch(str(x), '1*28?64'):
        M.append(x)
        print(x, 10**12)
print(len(x), sum(M) / len(M))
'''
# 74569 136365976037


# todo почему числа не соответсвуют маске
# № 10725 (Уровень: Средний)
# (PRO100 ЕГЭ) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#     — символ «?» означает ровно одну произвольную цифру;
#     — символ «*» означает любую последовательность цифр произвольной длины;
#     в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, больших 65000, найдите первые 7 чисел,
# удовлетворяющих маске 6*97*5? и имеющих не менее 4 чётных делителей.
#
# Запишите в ответе найденные числа в порядке возрастания, справа от каждого числа запишите сумму его чётных делителей.

'''
def Divisors(n):
    div = set()
    for j in range(1, int(n ** 0.5)+1):
        if n % j == 0:
            if j % 2 == 0:
                div.add(j)
            if (n // j) % 2 == 0:
                div.add(n // j)
    return sorted(div)


from fnmatch import *
for x in range(65000+1, 10000000000000):
    div = Divisors(x)
    if len(div) >= 4:
        if fnmatch(str(x), '6*97*5'):
            print(x)
'''

# 69750 129792
# 69752 122080
# 69756 139536
# 69758 75152
# 609750 1103232
# 609752 1291248
# 609754 630840



#
# № 7044 Danov2303 (Уровень: Базовый)
# (А.Богданов) Найдите все натуральные числа, не превышающие 10**10, которые соответствуют маске 1?2*0*2?1
# и при этом содержат ровно три делителя. В ответе запишите все найденные числа в порядке возрастания.
'''
def Divisors(n):
    div = set()
    if round(n**0.5) == n**0.5:
        for j in range(1, int(n ** 0.5)+1):
            if n % j == 0:
                div.add(j)
                div.add(n // j)
    return sorted(div)


from fnmatch import *
for x in range(1_000_000, 10**10):
    div = Divisors(x)
    if len(div) == 3:
        if fnmatch(str(x), '1?2*0*2?1'):
            print(x, div)
'''
# 152004241
# 1129027201
# 1320668281
# 1628203201

'''
from itertools import permutations

table = '14 17 18 23 25 26 32 34 38 41 43 47 48 52 56 58 62 65 71 74 81 83 84 85'
graph = 'АБ БА АИ ИА ИБ БИ ИЖ ЖИ БЖ ЖБ БВ ВБ ВЖ ЖВ ВГ ГВ ЖЕ ЕЖ ЕГ ГЕ ДГ ГД ЕД ДЕ'

for per in permutations('АБВГДЖИЕ'):
    new_table = table
    for i in range(1, 8+1):
        new_table = new_table.replace(str(i), per[i-1])
    if set(new_table.split()) == set(graph.split()):
        print('1 2 3 4 5 6 7 8')
        print(*per)
        # 1 2 3 4 5 6 7 8
        # И Г В Б Е Д А Ж
'''
# Ответ: ИГВБЕДАЖ


# Тип 7 №59712
# Сколько секунд потребуется модему, передающему сообщения со скоростью 28800 бит/с,
# чтобы передать цветное растровое изображение размером 1280х760 пикселей, при условии,
# что цвет каждого пикселя кодируется четырьмя байтами?

#  I = pixels * i
# colors = 2 ** i
'''
i = 4 * 8
I = 1280 * 760 * i
print(I / 28800)
'''
# 1081


# Единицы измерения информации
# 1 бит
# 1 байт = 8 бит = 2**3 бит
# 1 Кбайт = 1024 байт = 2**10 байта = 2**13 бит
# 1 Мбайт = 1024 Кбайт = 2**10 Кбайта = 2**23 бит
# 1 Гбайт = 1024 Мбайт = 2**10 Мбайта = 2**33 бит


# Тип 7 №11110
# Какой минимальный объём памяти (в Кбайт) нужно зарезервировать,
# чтобы можно было сохранить любое растровое изображение
# размером 320×640 пикселей при условии, что в изображении могут
# использоваться 256 различных цветов?
# В ответе запишите только целое число, единицу измерения писать не нужно.
'''
colors = 256
i = 8
I = 320 * 640 * i
print(I / 2**13)
'''
# Ответ: 200


# Тестовая задачка
# Сколько секунд потребуется модему, передающему сообщения со скоростью 28800 бит/с,
# чтобы передать цветное растровое изображение размером 1280х760 пикселей, при условии,
# что цветов было 260.
'''
#  I = pixels * i  (вес картинки = пиксели * бит на один пиксель)
# colors = 2 ** i   ( 2**8 < 260 < 2**9 )
i = 9  # бит
I = 1280 * 760 * i
print(I / 28800)
'''
# Ответ: 304 сек


# endregion Урок: ******************************************************************


# GOAL = [1.1, 2.1, 4.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 24.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
