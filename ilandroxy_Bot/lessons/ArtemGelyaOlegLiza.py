
# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

#
# Тип 23 № 11240 (Уровень: Средний)
# (М. Ишимов) Исполнитель преобразует число на экране.
# A. Прибавить 2
# B. Возвести в квадрат
# C. Умножить на 3

# Сколько существует программ, для которых при исходном числе 2 результатом является число 64,
# если после выполнения команды B можно выполнить только команду A или C?

'''
def F(a, b, G):
    if a >= b:
        return a == b
    if G == 'B':
        return F(a+2, b, 'A') + F(a*3, b, 'C')
    return F(a+2, b, 'A') + F(a**2, b, 'B') + F(a*3, b, 'C')


print(F(2, 64, 0))
'''


# № 7852 Danov2304 (Уровень: Базовый)(А.Богданов)
# 1.Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
#
# Сколько существует программ, для которых при исходном числе 8 результатом является число 32
# и при этом траектория вычислений содержит число 16 и не содержит простые числа?
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


def F(a, b):
    if a >= b or len(divisors(a)) == 2:
        return a == b
    return F(a+1, b) + F(a+2, b) + F(a*3, b)


print(F(8, 16) * F(16, 32))
'''
# Ответ: 40


# № 6210 (Уровень: Средний)
# (Н. Сафронов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите все натуральные числа, не превосходящие 10**7, для которых выполняются одновременно все условия:
#
# • соответствуют маске *2?2*;
# • являются палиндромами;
# • делятся на число 53 без остатка;
# • количество делителей больше 30.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке
# возрастания, а во втором столбце — сумму делителей.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div.append(j)
            div.append(x // j)
    return sorted(set(div))


from fnmatch import *
for x in range(53, 10**7, 53):  # • делятся на число 53 без остатка;
    if str(x) == str(x)[::-1]:
        if fnmatch(str(x), '*2?2*'):
            d = divisors(x)
            if len(d) > 30:
                print(x, sum(d))
'''
# Ответ:
# 212212 508032
# 2527252 5588352
# 4282824 13789440
# 4626264 11787120
# 8125218 19595520
# 8824288 19908504


# № 8954 Джобс 02.06.2023 (Уровень: Базовый)
# (Е. Джобс) В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 10 000 включительно.
# Определите количество пар последовательности, в которых только одно число кратно 7,
# а сумма элементов пары кратна максимальному элементу последовательности,
# оканчивающемуся на 0F в шестнадцатеричной системе счисления.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
A = [x for x in M if hex(x)[-2:] == "0f"]
R = []
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    # Количество пар последовательности, в которых только одно число кратно
    # if (x % 7 == 0 and y % 7 != 0) or (x % 7 != 0 and y % 7 == 0):
    # if (x % 7 == 0) ^ (y % 7 == 0):
    # if (x % 7 == 0) ^ (y % 7 == 0):
    # if (x % 7 == 0) + (y % 7 == 0) == 1:
    # if (x % 7 == 0) != (y % 7 == 0):
    if sum([p % 7 == 0 for p in [x, y]]) == 1:
        if (x + y) % max(A) == 0:
            R.append(x + y)
print(len(R), max(R))
'''
# Ответ: 2 9487


# Тип 9 №51978
# В каждой строке электронной таблицы записаны пять целых положительных чисел.
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
#
# — все числа в строке различны;
# — нечётных чисел больше, чем чётных;
# — сумма нечётных чисел меньше суммы чётных.
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    if len(M) == len(set(M)):
        chet = [x for x in M if x % 2 == 0]
        nechet = [x for x in M if x % 2 != 0]
        if len(nechet) > len(chet):
            if sum(nechet) < sum(chet):
                count += 1

print(count)
'''
# 1. Для которых выполнены следующие условия (все)
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    flag = 0
    if len(M) == len(set(M)):
        flag += 1
    chet = [x for x in M if x % 2 == 0]
    nechet = [x for x in M if x % 2 != 0]
    if len(nechet) > len(chet):
        flag += 1
    if sum(nechet) < sum(chet):
        flag += 1
    if flag == 3:
        count += 1

print(count)
'''
# Ответ: 303

# 2. Для которых выполнено только одно условие
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    flag = 0
    if len(M) == len(set(M)):
        flag += 1
    chet = [x for x in M if x % 2 == 0]
    nechet = [x for x in M if x % 2 != 0]
    if len(nechet) > len(chet):
        flag += 1
    if sum(nechet) < sum(chet):
        flag += 1
    if flag == 1:
        count += 1

print(count)
'''
# Ответ: 2547


# 3. Для которых выполнены только два условия
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    flag = 0
    if len(M) == len(set(M)):
        flag += 1
    chet = [x for x in M if x % 2 == 0]
    nechet = [x for x in M if x % 2 != 0]
    if len(nechet) > len(chet):
        flag += 1
    if sum(nechet) < sum(chet):
        flag += 1
    if flag == 2:
        count += 1

print(count)
'''
# Ответ: 3419


# 3. Для которых выполнено хотя бы одно из условий
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    flag = 0
    if len(M) == len(set(M)):
        flag += 1
    chet = [x for x in M if x % 2 == 0]
    nechet = [x for x in M if x % 2 != 0]
    if len(nechet) > len(chet):
        flag += 1
    if sum(nechet) < sum(chet):
        flag += 1
    if flag > 0:
        count += 1

print(count)
'''
# Ответ: 6269


# № 6095 /dev/inf 02.2023 (Уровень: Базовый)
# (А. Рогов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#

# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске *15*7424, которые делятся без остатка только на одно из чисел 111, 113, 127.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на одно из чисел 111, 113, 127,
# на которое число делится без остатка.
'''
from fnmatch import *
for x in range(1, 10**8):
    if fnmatch(str(x), '*15*7424'):
        B = [x // p for p in [111, 113, 127] if x % p == 0]
        if len(B) == 1:
            print(x, *B)
'''


# Тип 24 №59848
# Текстовый файл состоит не более чем из 10**6 символов латинского алфавита.
# Необходимо найти самую длинную подстроку, которая может являться числом в 24 системе счисления.
# В ответ записать длину последовательности символов, которая может являться числом в 24 системе счисления.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
s = open('24.txt').readline()
good = alphabet[:24]
bad = alphabet[24:]
for x in bad:
    s = s.replace(x, ' ')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 40


# № 7853 Danov2304 (Уровень: Сложный)
# (А.Богданов) Текстовый файл состоит из символов латинского алфавита и десятичных цифр.
# Определите максимальное количество идущих подряд символов, среди которых любые два символа
# из набора N,O,T в различных комбинациях(с учётом повторений) не стоят через один символ (который может быть любым).
# Например, ТEN или NUТ не могут быть в искомой подстроке.
'''
from itertools import product
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
B = []
for v in product(alphabet, repeat=3):
    s = ''.join(v)
    if s[0] in 'NOT' and s[2] in 'NOT':
        B.append(s)


s = open('24.txt').readline()
for x in B:
    s = s.replace(x, ' ')
print(max([len(x) for x in s.split()]) + 4)


# Вариант 2
from itertools import product
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
B = []
for v in product(alphabet, repeat=3):
    s = ''.join(v)
    if s[0] in 'NOT' and s[2] in 'NOT':
        B.append(s)

# TAT -> TA AT
s = open('24.txt').readline()
for x in B:
    s = s.replace(x, '** **')
print(max([len(x) for x in s.split()]))

# N O, N T, N N, T T, T N, T O, O O, O T, ...

# 1. Не может содержать пары "DD"
# xxxD DxxxxxxD Dxxx 
# xxx xxxxxx xxx + 2

# 2. Не может содержать пары "DDD"
# xxxDD DDxxxxxxDD DDxxx 
# xxx xxxxxx xxx + 4

# 3. Не может содержать пары "DDDD"
# xxxDDD DDDxxxxxxDDD DDDxxx 
# xxx xxxxxx xxx + 6

# 3. Не может содержать пары "DDDDD"
# xxxDDDD DDDDxxxxxxDDDD DDDDxxx 
# xxx xxxxxx xxx + 8
'''


# № 8654 (Уровень: Средний)
# (Л. Шастин) Текстовый файл состоит не более, чем из 1 200 000 прописных символов латинского алфавита.
# Назовём маской подстроки последовательность символов, в которой также может встречаться символ «?»,
# который означает ровно одну произвольную букву.
#
# Определите максимальное количество идущих подряд символов, среди которых
# нет ни одной подстроки, соответствующей маске ?B??D.
'''
from itertools import product
alphabet = sorted('QWERTYUIOPASDFGHJKLZXCVBNM')
B = []
for v in product(alphabet, repeat=5):
    s = ''.join(v)
    if s[1] == 'B' and s[-1] == 'D':
        B.append(s)

s = open('24.txt').readline()
for x in B:
    s = s.replace(x, '**** ****')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 4187


# todo № 3760 (Уровень: Средний)
# Текстовый файл содержит строку из заглавных латинских букв X, Y и Z, всего не более чем из 106 символов.
# Определите максимальное количество идущих подряд троек символов X*Y или Z*Y, где * обозначает один любой символ.
'''
# s = open('24.txt').readline()
s = 'YYYZXYZYYXYYYYYZXYZYYXYYXZYY'
for x in ['XXY', 'XYY', 'XZY', 'ZXY', 'ZYY', 'ZZY']:
    s = s.replace(x, '*')
for x in 'XYZ':
    s = s.replace(x, ' ')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 19


# № 6060 (Уровень: Базовый)
# (А.Игнатюк) В файле представлена последовательность, состоящая из символов X, Y, Z.
# Необходимо указать количество всех палиндромов (слова, которые справа налево и слева направо читаются одинаково),
# состоящих из 9 символов, имеющихся в последовательности.
'''
s = open('24.txt').readline()
count = 0
for i in range(len(s)-8):
    slovo = s[i:i+9]
    if slovo == slovo[::-1]:
        count += 1
print(count)
'''
# Ответ: 202820


# № 7891 (Уровень: Средний)
# (Е. Фокин) Текстовый файл состоит не более чем из 10**6 символов
# и содержит только буквы латинского алфавита и десятичные цифры.
# Найдите максимальную длину подстроки, ограниченной с двух сторон одним
# и тем же символом и не содержащей этого символа между ними.
# В ответе укажите длину найденной строки, включая граничные символы.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
s = open('24.txt').readline()
maxi = 0
for x in alphabet:
    s = s.replace(x, f'{x} {x}')
    maxi = max(maxi, max([len(a) for a in s.split()]))
    s = s.replace(f'{x} {x}', x)
print(maxi)
'''
# Ответ: 9747


# endregion Урок: ******************************************************************


# GOAL = [1.1, 2.1, 4.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 24.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
