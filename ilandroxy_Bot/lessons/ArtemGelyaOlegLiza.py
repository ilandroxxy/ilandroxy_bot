
# region Домашка: ******************************************************************

# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#     а) если число N делится на 3, то все нули заменяются на 11;
#     б) если число N на 3 не делится, то все единицы заменяются на 10.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Укажите максимальное число R, не превышающее 161, которое может быть получено с помощью описанного алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
R = []
for i in range(1, 10000):
    s = bin(i)[2:]
    if i % 3 == 0:
        s = s.replace('0', '11')
    else:
        s = s.replace('1', '10')
    r = int(s, 2)
    if r <= 161:
        R.append(r)
print(max(R))
'''


# (А. Рогов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**8, найдите все числа, соответствующие маске *15*7424,
# которые делятся без остатка только на одно из чисел 111, 113, 127.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а во втором столбце –
# соответствующие им результаты деления этих чисел на одно из чисел 111, 113, 127, на которое число делится без остатка.
'''
from fnmatch import *
for i in range(100000, 10 ** 7):
    if fnmatch(str(i), '*15*7424'):
        R = [a for a in [111, 113, 127] if i % a == 0]
        if len(R) == 1:
            print(i, i // R[0])
'''


# Все шестибуквенные слова, составленные из букв Г, И, Р, Л, Я, Н, Д, А, записаны в алфавитном порядке и пронумерованы.
# Вот начало списка:
#
# 1. АААААА
#  2. АААААГ
#  3. АААААД
#  4. АААААИ
#  5. АААААЛ
#  6. АААААН
#  7. АААААР
#
# Под каким номером в списке стоит последнее слово с чётным номером,
# которое не начинается с буквы Я и содержит ровно три буквы Д?
'''
from itertools import product
R = []
num = 1
for s in product(sorted('ГИРЛЯНДА'), repeat=6):
    slovo = ''.join(s)
    if num % 2 == 0:
        if slovo[0] != 'Я':
            if slovo.count('Д') == 3:
                # print(num, slovo)
                R.append(num)
    num += 1
print(max(R))
'''


# PRO100 ЕГЭ На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится четверичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#  а) если количество значащих цифр в четверичной записи числа чётное, то к этой записи в середину дописывается 0;
#  б) если количество значащих цифр в четверичной записи числа нечётное, то запись не изменяется.
#
# Полученная таким образом запись является десятичной записью искомого числа R.
#
# Укажите максимальное число N, после обработки которого с помощью этого алгоритма, получается число R,
# не большее, чем 180. В ответе запишите это число в десятичной системе счисления.
'''
def convert(num, system):
    s = ''
    while num > 0:
        s += str(num % system)
        num //= system
    return s[::-1]


R = []
for i in range(1, 1000):
    b = convert(i, 4)
    if len(b) % 2 == 0:
        b = b[:len(b)//2] + '0' + b[len(b)//2:]
    r = int(b, 4)
    if r <= 180:
        R.append(i)
print(max(R))
'''


# Сколько существует 9-значных девятеричных чисел, в записи которых не встречается цифра 0,
# любые две соседние цифры имеют разную чётность, и никакая цифра не повторяется больше 3 раз?
'''
from itertools import *
cnt = 0
for s in product('12345678', repeat=9):
    num = ''.join(s)
    if num[0] != '0':
        if all(num.count(a) <= 3 for a in num):  # никакая цифра не повторяется больше 3 раз
            num = num.replace('3', '1').replace('5', '1').replace('7', '1')
            num = num.replace('4', '2').replace('6', '2').replace('8', '2')
            if '22' not in num and '11' not in num:
                cnt += 1
print(cnt)
'''
'''
a1 = '1357'
a2 = '2468'
cnt = 0
for a in a1:
    for b in a2:
        for c in a1:
            for d in a2:
                for e in a1:
                    for f in a2:
                        for g in a1:
                            for h in a2:
                                for k in a1:
                                    s = a + b + c + d + e + f + g + h + k
                                    if all(s.count(x) <= 3 for x in s):
                                        cnt += 1
print(cnt * 2)
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n <= 7:
        return 1
    if n > 7:
        return n+2 + F(n-1)
print(F(2024) - F(2020))
'''

from sys import *
setrecursionlimit(10000)

def F(n):
    if n <= 7:
        return 1
    if n > 7:
        return n+2 + F(n-1)
print(F(2024)-F(2020))


# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# todo Разобрать новые 22 номера № 12474 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)

# todo Тип 24 №55641
'''
f = open('24.txt').readlines()пш
li = []
for j in f:
    st = ''
    for x, y in zip(j, j[1:]):
        if x == 'T':
            st += y
    maxi = max(st.count(i) for i in set(st))
    for s in set(st):
        if st.count(s) == maxi:
            li += [s]
print(max(li.count(l) for l in set(li)))
'''


# todo - Разобрать Тип 13 №64943
# Узлы с IP -адресами 202.3.20.24 и 202.3.27.11 находятся в одной сети.
# Укажите наименьшее возможное количество принадлежащих этой сети IP-адресов,
# в двоичной записи которых чётное число единиц.
'''
from ipaddress import *
mini = 10**9
for mask in range(32+1):
    cnt = 0
    net1 = ip_network(f'202.3.20.24/{mask}', 0)
    net2 = ip_network(f'202.3.27.11/{mask}', 0)
    if net1 == net2:
        for ip in net1:
            s = f'{ip:b}'
            if s.count('1') % 2 == 0:
                cnt += 1
    maxi = max(maxi, cnt)
    print(maxi)
'''
# Ответ: 2048


# todo Разобрать задачку https://stepik.org/lesson/1231755/step/9?unit=1245338
# (А.Богданов) В файле содержится последовательность натуральных чисел.
# Рассматриваются все пары элементов, в которых только один элемент чётный,
# и между элементами пары есть ровно один элемент и он кратен минимальному
# четному элементу из всех элементов последовательности.
# Найти количество таких пар и пару с минимальной суммой.
'''
M = [int(i) for i in open('17.txt')]
n = min([i for i in M if i % 2 == 0])  # минимальному четному элементу из всех элементов последовательности
B = []
for i in range(len(M)):
    for j in range(i+1, len(M)):
        x, y = M[i], M[j]
        z = M[M.index(x) + 1]
        if M.index(y) - M.index(x) == 2:
            if (x % 2 == 0) != (y % 2 == 0):
                if z % n == 0:
                    B.append(x + y)
print(len(B), min(B))
'''
#  0  1  2  3  4
# [4, 5, 6, 7, 8]

'''
M = [int(i) for i in open('17.txt')]
n = min([i for i in M if i % 2 == 0])  # минимальному четному элементу из всех элементов последовательности
count = 0
mini = 9999999
r = ''
for i in range(len(M) - 2):
    x, y, z = M[i], M[i+1], M[i+2]
    if (x % 2 == 0) != (z % 2 == 0):
        if y % n == 0:
            count += 1
            if mini > x + z:
                mini = x + z
                r = [x, y]
print(count, r)
'''


# endregion Разобрать: *************************************************************


# GOAL = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19-21, 22, 23, 24, 25]
# КЕГЭ  = []
# на следующем уроке:

# if __name__ == "__main__":
#     print('Файл групповых занятий')


