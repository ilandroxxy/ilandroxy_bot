
# region Домашка: ******************************************************************

# № 6904 (Уровень: Базовый) (Д. Статный)
# ¬(((x → y ∧ w) ∧ (z → x ∨ y)) ≡ w)
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = not(((x <= (y and w)) and (z <= (x or y))) == w)
                if F:
                    print(x, y, z, w, F)
'''


# № 6842 (Уровень: Средний) (А. Богданов)
# w ∧ ((z ∨ y) ≡ (z ∧ x))
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = w and ((z or y) == (z and x))
                print(x, y, z, w, int(F))
'''

# 6 номер


# Тип 6 №47301
#  В начальный момент Черепаха находится в начале координат,
#  её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# Черепахе был дан для исполнения следующий алгоритм:
#
# Повтори 5 [Вперёд 7 Направо 120]
#
# Определите, сколько точек с целочисленными координатами будут
# находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.

# Вариант 1
'''
import turtle as t
t.left(90)
# t.speed(100)
l = 40

# Повтори 5 [Вперёд 7 Направо 120]
for _ in range(5):
    t.forward(7*l)
    t.right(120)

t.up()
for x in range(0, 10):
    for y in range(0, 10):
        t.goto(x*l, y*l)  # прыгни в точку
        t.dot(2, 'red')

t.done()
'''

# Вариант 2
'''
import turtle as t
t.left(90)
t.speed(100)
l = 40

# Повтори 5 [Вперёд 7 Направо 120]
t.begin_fill()
for _ in range(3):
    t.forward(7*l)
    t.right(120)
t.end_fill()

count = 0
canvas = t.getcanvas()
for x in range(-100*l, 100*l, l):
    for y in range(-100*l, 100*l, l):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item[0] == 5:
            count += 1
print(count)

t.done()
'''


# Тип 6 №55593
# В начальный момент Черепаха находится в начале координат и
# направлена вверх (вдоль положительного направления оси ординат).
# Черепаха выполнила следующую программу (x в тексте программы — некоторое натуральное число):
#
# Повтори 4 [Вперёд x Направо 90 Вперёд x Налево 90 Вперёд x Направо 90]
#
# Определите, при каком наименьшем натуральном x количество точек с целочисленными координатами внутри области,
# ограниченной линией, полученной при выполнении данной программы, окажется больше 1000.
# Точки, расположенные на линии, не учитывать.
'''
import turtle as t
t.left(90)
t.speed(100)
l = 10
x = 15

# Повтори 4 [Вперёд x Направо 90 Вперёд x Налево 90 Вперёд x Направо 90]
t.begin_fill()
for _ in range(4):
    t.forward(x * l)
    t.right(90)
    t.forward(x * l)
    t.left(90)
    t.forward(x * l)
    t.right(90)
t.end_fill()

count = 0
canvas = t.getcanvas()
for x in range(-100*l, 100*l, l):
    for y in range(-100*l, 100*l, l):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item[0] == 5:
            count += 1
print(count)

t.done()
'''


# Тип 6 №59799
# В начальный момент Черепаха находится в начале координат,
# её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# Черепахе был дан для исполнения следующий алгоритм:
#
#
# Повтори 2 [Вперёд 9 Направо 90 Вперёд 15 Направо 90]
# Поднять хвост
# Вперёд 12 Направо 90
# Опустить хвост
# Повтори 2 [Вперёд 6 Направо 90 Вперёд 12 Направо 90]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри пересечения фигур,
# ограниченных заданными алгоритмом линиями, включая точки на границах этого пересечения.
'''
import turtle as t
t.left(90)
t.speed(100)
l = 20

# Повтори 2 [Вперёд 9 Направо 90 Вперёд 15 Направо 90]
for _ in range(2):
    t.forward(9*l)
    t.right(90)
    t.forward(15*l)
    t.right(90)

# Поднять хвост
t.up()

# Вперёд 12 Направо 90
t.forward(12*l)
t.right(90)

# Опустить хвост
t.down()

t.color('blue')

# Повтори 2 [Вперёд 6 Направо 90 Вперёд 12 Направо 90]
for _ in range(2):
    t.forward(6*l)
    t.right(90)
    t.forward(12*l)
    t.right(90)

t.up()

for x in range(0, 15):
    for y in range(0, 15):
        t.goto(x*l, y*l)
        t.dot(2, 'red')

t.done()
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************


#  ¬x    --->  (not x)  - отрицание (инверсия)
# x ∧ y  --->  x and y  - конъюнкция (логическое умножение)
# x ∨ y  --->  x or y  - дизъюнкция (логическое сложение)
# x → y  --->  x <= y  - импликация
# x ≡ y  --->  x == y  - тождество (сравнение)

# Тип 2 №18704
# Логическая функция F задаётся выражением (x ∨ ¬y) ∧ ¬(w ≡ z) ∧ w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x or (not y)) and (not(w == z)) and w
                if F:
                    print(x, y, z, w, F)
'''


# Тип 2 № 48423
# Логическая функция F задаётся выражением:
# (x → (y ≡ w)) ∧ (y ≡ (w → z))
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x <= (y == w)) and (y == (w <= z))
                print(x, y, z, w, int(F))
'''

#
# № 10084 Демоверсия 2024 (Уровень: Базовый)
# Миша заполнял таблицу истинности логической функции
# F= (x∧¬y)∨(y≡z)∨¬w , но успел заполнить лишь фрагмент из трёх различных
# её строк, даже не указав, какому столбцу таблицы
# соответствует каждая из переменных w,x,y,z.
# F = (x ∧ ¬y) ∨ (y ≡ z) ∨ ¬w
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x and (not y)) or (y == z) or (not w)
                # if F == False:
                if (not F):
                    print(x, y, z, w, int(F))
'''


# № 9733 Основная волна 19.06.23 (Уровень: Базовый)
# Миша заполнял таблицу истинности логической функции

# F = (x ∧ ¬y) ∨ (x ≡ z) ∨ w
'''
x, y, z, w = 1, 1, 1, 1
F = (x and (not y)) or (x == z) or w

print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x and (not y)) or (x == z) or w
                # if F == False:
                if (not F):
                    print(x, y, z, w, int(F))
'''
# if not((x and not(y)) or (y == z) or w)

# F=(y→x)∧¬z∧w,
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (y <= x) and (not z) and w
                if F:
                    print(x, y, z, w, int(F))
'''

# ((x → y) ∧ (z ∨ w)) → ((x ≡ w) ∨ (y ∧ ¬z))  |  ((x <= y) and (z or w)) <= ((x == w) or (y and (not z)))
# ((x → y ) ∧ (y → w)) ∨ (z ≡ ( x ∨ y))  |  ((x <= y) and (y <= w)) or (z == (x or y))


# Тип 6 №52177
# В начальный момент Черепаха находится в начале координат и
# направлена вверх (вдоль положительного направления оси ординат).
# Черепаха выполнила следующую программу:
#
# Повтори 4 [Вперёд 6 Направо 90 Вперёд 6 Налево 90 Вперёд 6 Направо 90]
#
# Определите, сколько точек с целочисленными координатами будут находиться
# внутри области, ограниченной линией, полученной при выполнении данной программы.
# Точки, расположенные на линии, не учитывать.
'''
import turtle as t
t.left(90)
l = 20
t.speed(10)

for _ in range(4):
    t.forward(6 * l)
    t.right(90)
    t.forward(6 * l)
    t.left(90)
    t.forward(6 * l)
    t.right(90)

t.up()
for x in range(0, 18):
    for y in range(-7, 14):
        t.goto(x * l, y * l)
        t.dot(2, 'red')

t.done()
'''
# Ответ: 145


# Немного теории строк str()
'''
# i  012345678
s = 'abcdefgh'

print(f'Первый элемент строки: {s[0]} \n'
      f'Последний элемент строки: {s[-1]}')

for i in range(len(s)):
    print(s[i], end=' ')
print()

for x in s:
    print(x, end=' ')
print()
'''

# Менять элементы строки нельзя, но если сильно хочется, то можно через срезы
# Задача поменять букву 'd' на $
'''
s = 'abcdefgh'
print(s.index('d'))  # 3
s = s[:3] + '$' + s[4:]
#   'abc'         'efgh'
print(s)  # abc$efgh
'''


# Срезы строк
'''
# i  012345678
s = 'abcdefgh'

print(s[:3])  # abc
print(s[4:])  # efgh
print(s[2:6])  # cdef
print(s[:])  # abcdefgh
print(s[::])  # abcdefgh
print(s[::-1])  # hgfedcba

x = 8
print(bin(x))  # 0b1000
print(bin(x)[2:])  # 1000
'''

# методы строк
# В чем отличие методов от функция?
'''
# i  012345678
s = 'abcdefghdf'

print(s.index('d'))  # 3 - индекс первого вхождения
print(s.rindex('d'))  # 8 - индекс самого правого вхождения (последний)
print(s.count('d'))  # 2 - кол-во элементов 'd' внутри строки s

s = s.upper()
print(s)  # ABCDEFGHD
s = s.lower()
print(s)  # abcdefghd

s = s.replace('d', '*')
print(s)  # abc*efgh*f

s = s.replace('f', '+', 1)  # заменить n-ное кол-во первых найденных элементов
print(s)  # abc*e+gh*f

print('Погода {}.'.format('хорошая'))


ip = '192.23.54.9'
IP = ip.split('.')
print(IP)  # ['192', '23', '54', '9']
IP2 = [int(x) for x in ip.split('.')]
print(IP2)  # [192, 23, 54, 9]

ip2 = '*'.join(IP)  # обязательно надо передать список строчных элементов
print(ip2)  # 192*23*54*9
'''

# endregion Урок: ******************************************************************


# todo: GOAL = [2.1, 6.1]
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:  # Циклы и разбор 2-го номера
