
# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# № 12467 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Адрес сети равен 183.192.A.0, где А — некоторое допустимое для записи адреса сети число, а маска сети 255.255.252.0.
# Определите минимальное значение А, для которого для всех IP-адресов этой сети в
# двоичной записи IP-адреса суммарное количество единиц в правых двух байтах больше трёх.
'''
from ipaddress import *
for A in range(0, 255+1):
    net = ip_network(f'183.192.{A}.0/255.255.252.0', 0)
    if all(f'{ip:b}'[16:].count('1') > 3 for ip in net):
        print(A)
        break
'''
# Ответ: 60


# № 12947 (Уровень: Базовый)
# Сеть задана IP-адресом 203.111.195.0 и маской сети 255.255.240.0.
# Сколько в этой сети IP-адресов, в двоичной записи которых количество нулей кратно трём,
# а также содержатся три подряд идущие единицы и три подряд идущих нуля одновременно?
# В ответе укажите только число.
'''
from ipaddress import *
net = ip_network('203.111.195.0/255.255.240.0', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('0') % 3 == 0:
        if '111' in s and '000' in s:
            cnt += 1
print(cnt)
'''


# № 12088 (Уровень: Средний)
# Сеть задана IP-адресом 112.154.132.0 и маской сети 255.255.252.0.
# Сколько в этой сети узлов (устройств), для которых в двоичной записи IP-адреса суммарное
# количество единиц в левых двух байтах не больше суммарного нечётного количества нулей в правых двух байтах.
# В ответе укажите только число.
'''
from ipaddress import *
net = ip_network('112.154.132.0/255.255.252.0', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s[16:].count('0') % 2 != 0:
        if s[:16].count('1') <= s[16:].count('0'):
            cnt += 1
print(cnt)
'''

#
# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**7, найдите все простые числа, соответствующие маске 3?1111*.
# В ответе запишите все найденные числа в порядке возрастания.
# Количество строк в таблице для ответа избыточно.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x//j]
    return sorted(set(div))


from fnmatch import *
for x in range(10**7):
    if fnmatch(str(x), '3?1111*'):
        if len(divisors(x)) == 2:
            print(x)
'''

'''
def prime(x):
    if x == 1:
        return False
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            return False
    return True


from fnmatch import *
for x in range(10**7):
    if fnmatch(str(x), '3?1111*'):
        if prime(x):
            print(x)
'''
# 311111
# 361111
# 3011117
# 3011119
# 3311117
# 3611119
# 3811117
# 3911111


# todo Разобрать № 12476 PRO100 ЕГЭ 29.12.23 (Уровень: Сложный)
# Текстовый файл состоит из символов P, R, O, E, G – зашифрованное письмо Деду Морозу.
# Определите в прилагаемом файле максимальное количество идущих подряд символов, среди которых комбинация символов RO
# встречается ровно 21 раз, а комбинации символов ORO и ROR ни разу не встречаются.
'''
s = open('24.txt').readline().split('RO')
maxi = 0
for i in range(len(s)-21):
    r = 'RO'.join(s[i:i+22])
    if 'ORO' not in r and 'ROR' not in r:
        maxi = max(maxi, len(r))
print(maxi)
'''
# 813 -> 814


# № 12475 ФИПИ (Уровень: Средний) У исполнителя Кузнечик две команды:
# Прибавь 3
# Вычти 2
#
# Сколько различных чисел можно получить из числа 1 с помощью программы, которая содержит ровно 68 команд?

'''
from functools import *
cnt = set()

@lru_cache(None)
def F(a, x):
    if x == 68:
        cnt.add(a)
        return 0
    else:
        return F(a+3, x+1) + F(a-2, x+1)

F(1, 0)
print(len(cnt))
'''


# № 12471 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)
# ​В файле содержится последовательность натуральных чисел, каждое из которых не превышает 100 000.
#
# Определите количество троек элементов последовательности, в которых все три элемента являются чётными
# числами или в которых есть хотя бы одно двузначное число. А также сумма элементов тройки не больше
# максимального элемента последовательности, оканчивающегося на 13.
# Гарантируется, что в последовательности есть хотя бы одно число, оканчивающееся на 13.
#
# В ответе запишите количество найденных троек чисел, затем целую часть
# среднего арифметического сумм из элементов таких троек.
#
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
A = [x for x in M if str(x)[-2:] == '13']
R = []
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    if all(a % 2 == 0 for a in [x, y, z]) or (any(len(str(abs(a))) == 2 for a in [x, y, z])):
        if (x + y + z) <= max(A):
            R.append(x + y + z)
print(len(R), int(sum(R) / len(R)))
'''
# 4007 27338


# № 12470 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)
#  Алгоритм вычисления значения функции F(n), где n – целое неотрицательное число, задан следующими соотношениями:
# Чему равно значение функции F(38)?
'''
from functools import *

def my_sum(n):
    summa = 0
    for i in range(1, n):
        summa += F(i)
    return summa


@lru_cache(None)
def F(n):
    if n < 3:
        return n
    if n > 2 and n % 2 != 0:
        return F(n-1) + F(n-2) + 1
    if n > 2 and n % 2 == 0:
        return my_sum(n)

print(F(38))
'''
# Ответ: 9182657279


#
# № 12468 (Уровень: Базовый)
# Операнды арифметического выражения записаны в системе счисления с основанием 19.

# В записи чисел переменной x обозначена неизвестная цифра из алфавита 19-ричной системы счисления.
# Определите наименьшее значение x, при котором значение данного арифметического выражения кратно 18.
# Для найденного x вычислите частное от деления значения арифметического выражения на 18
# и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления указывать не нужно.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:19]:
    A = int(f'78{x}79643', 19)
    B = int(f'25{x}43', 19)
    C = int(f'63{x}5', 19)
    if (A + B + C) % 18 == 0:
        print((A + B + C) // 18)
        break
'''
# Ответ: 368599039


# № 7702 (Уровень: Сложный)
# (Грачев Н.) Дано арифметическое выражение 5xyА_18 + 18x7_y.
# Определите, сколько различных значений может принимать выражение при всех возможных x и y.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
cnt = set()
for y in range(9, 18):
    for x in alphabet[:y]:
        A = int(f'5{x}{alphabet[y]}A', 18)
        B = int(f'18{x}7', y)
        cnt.add(A+B)
print(len(cnt))
'''
# ValueError: invalid literal for int() with base 18: '509А'


# № 12463 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)
# Откройте файл электронной таблицы, содержащей в каждой строке девять натуральных чисел.
# Определите количество строк таблицы, для чисел которых выполнены оба условия:
#  - в строке есть одно число, которое повторяется четыре раза, есть другое число,
#  которое повторяется дважды, остальные три числа различны;
#  - среднее арифметическое трёх неповторяющихся чисел строки не меньше наибольшего из повторяющихся в строке чисел.
'''
cnt = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    A = [M.count(x) for x in M]
    if A.count(4) == 4 and A.count(2) == 2 and A.count(1) == 3:
        copied = [x for x in M if M.count(x) > 1]
        not_copied = [x for x in M if M.count(x) == 1]
        if (sum(not_copied) / 3) >= max(copied):
            cnt += 1
print(cnt)
'''

# № 12459 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится четверичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#     а) если количество значащих цифр в четверичной записи числа чётное, то к этой записи в середину дописывается 0;
#     б) если количество значащих цифр в четверичной записи числа нечётное, то запись не изменяется.
# Полученная таким образом запись является десятичной записью искомого числа R.
#
# Укажите максимальное число N, после обработки которого с помощью этого алгоритма, получается число R, не большее, чем 180.
# В ответе запишите это число в десятичной системе счисления.

def convert(number, system):
    result = ''
    while number > 0:
        result = str(number % system) + result
        number //= system
    return result


R = []
for n in range(1, 10000):
    s = convert(n, 4)
    if len(s) % 2 == 0:
        s = s[:len(s) // 2] + '0' + s[len(s) // 2:]
    r = int(s, 4)
    if r < 180:
        R.append(n)
print(max(R))





# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# todo Разобрать новые 22 номера № 12474 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)

# todo Тип 24 №55641
'''
f = open('24.txt').readlines()пш
li = []
for j in f:
    st = ''
    for x, y in zip(j, j[1:]):
        if x == 'T':
            st += y
    maxi = max(st.count(i) for i in set(st))
    for s in set(st):
        if st.count(s) == maxi:
            li += [s]
print(max(li.count(l) for l in set(li)))
'''


# todo - Разобрать Тип 13 №64943
# Узлы с IP -адресами 202.3.20.24 и 202.3.27.11 находятся в одной сети.
# Укажите наименьшее возможное количество принадлежащих этой сети IP-адресов,
# в двоичной записи которых чётное число единиц.
'''
from ipaddress import *
mini = 10**9
for mask in range(32+1):
    cnt = 0
    net1 = ip_network(f'202.3.20.24/{mask}', 0)
    net2 = ip_network(f'202.3.27.11/{mask}', 0)
    if net1 == net2:
        for ip in net1:
            s = f'{ip:b}'
            if s.count('1') % 2 == 0:
                cnt += 1
    maxi = max(maxi, cnt)
    print(maxi)
'''
# Ответ: 2048


# todo Разобрать задачку https://stepik.org/lesson/1231755/step/9?unit=1245338
# (А.Богданов) В файле содержится последовательность натуральных чисел.
# Рассматриваются все пары элементов, в которых только один элемент чётный,
# и между элементами пары есть ровно один элемент и он кратен минимальному
# четному элементу из всех элементов последовательности.
# Найти количество таких пар и пару с минимальной суммой.
'''
M = [int(i) for i in open('17.txt')]
n = min([i for i in M if i % 2 == 0])  # минимальному четному элементу из всех элементов последовательности
B = []
for i in range(len(M)):
    for j in range(i+1, len(M)):
        x, y = M[i], M[j]
        z = M[M.index(x) + 1]
        if M.index(y) - M.index(x) == 2:
            if (x % 2 == 0) != (y % 2 == 0):
                if z % n == 0:
                    B.append(x + y)
print(len(B), min(B))
'''
#  0  1  2  3  4
# [4, 5, 6, 7, 8]

'''
M = [int(i) for i in open('17.txt')]
n = min([i for i in M if i % 2 == 0])  # минимальному четному элементу из всех элементов последовательности
count = 0
mini = 9999999
r = ''
for i in range(len(M) - 2):
    x, y, z = M[i], M[i+1], M[i+2]
    if (x % 2 == 0) != (z % 2 == 0):
        if y % n == 0:
            count += 1
            if mini > x + z:
                mini = x + z
                r = [x, y]
print(count, r)
'''


# endregion Разобрать: *************************************************************


# GOAL = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19-21, 22, 23, 24, 25]
# КЕГЭ  = []
# на следующем уроке:

# if __name__ == "__main__":
#     print('Файл групповых занятий')


