
# region Домашка: ******************************************************************
'''
a = 8
b = -6
if a > 0 and b > 0:  # гарантирует, что все условия выполняются
    print('YES_1')
if a > 0 or b > 0:  # говорит, что хотя бы одно из условий выполняется
    print('YES_2')
if (a > 0) ^ (b > 0):  # говорит, что только одно из условий выполняется
    print('YES_3')
'''
# КЕГЭ № 7718 (Уровень: Средний) (Грачев Н.)
# В файле содержится последовательность целых неотрицательных чисел, не превышающих 10000.
# Определите количество пар элементов последовательности, в которых либо сумма элементов кратна 18,
# либо произведение элементов кратно 18. В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную сумму элементов этих пар.
# В данной задаче под парой подразумевается два различных элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
count = 0
maxi = -9999999
for i in range(len(M)):
    for j in range(i + 1, len(M)):
        x, y = M[i], M[j]
        # if ((x + y) % 18 == 0 and (x * y) % 18 != 0) or ((x + y) % 18 != 0 and (x * y) % 18 == 0):
        if ((x + y) % 18 == 0) ^ ((x * y) % 18 == 0):
            count += 1
            maxi = max(maxi, x + y)
print(count, maxi)
'''
# 120400 19971


# КЕГЭ № 7038 Danov2303 (Уровень: Средний) (А.Богданов)
#
# В файле содержится последовательность целых чисел, по модулю не превышающих 10000.
# Определите количество пар, для которых выполняются следующие условия:
#
# – только один из элементов пары заканчивается на 1;
# – оба элемента пары меньше максимального среднего значения пары среди всех пар отвечающих предыдущему условию.
#
# В ответе запишите два числа: сначала количество пар отвечающих двум условиям,
# затем максимальный элемент из пар, включающих минимальный элемент таких пар.
# В задаче рассматриваются пары соседних элементов.

# print(abs(-213) % 10)  # 3
# print(str(-213)[-1])  # '3'
'''
M = [int(x) for x in open('17.txt')]
A = []
count = 0
maxi = -99999
for i in range(len(M)-1):  # В задаче рассматриваются пары соседних элементов.
    x, y = M[i], M[i+1]
    if abs(x) % 10 == 1 ^ abs(y) % 10 == 1:  # – только один из элементов пары заканчивается на 1;
        A.append((x + y) / 2)
MAXI = max(A)  # максимального среднего значения пары среди всех пар отвечающих предыдущему условию.

for i in range(len(M)-1):  # В задаче рассматриваются пары соседних элементов.
    x, y = M[i], M[i+1]
    if abs(x) % 10 == 1 ^ abs(y) % 10 == 1:  # – только один из элементов пары заканчивается на 1;
        if x < MAXI and y < MAXI:
            count += 1
print(count)
'''

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 24 №27691
# Текстовый файл состоит не более чем из 10**6 символов A, B и C.
# Определите максимальное количество идущих подряд символов A.
# BBBAAAABBBAAAAAABBBAAA - 6

'''
s = open('24.txt').readline()
count = 1  # счетчик промежуточных последовательностей (он будет обнуляется)
maxi_count = 0  # это глобальный счетчик общего результата
for i in range(len(s)-1):
    if s[i:i+2] == 'AA':  # if s[i] == 'A' and s[i+1] == 'A':
        count += 1
        maxi_count = max(maxi_count, count)
    else:
        count = 1
print(maxi_count)
'''

# Вариант 2
'''
s = open('24.txt').readline()
s = s.replace('B', ' ').replace('C', ' ')
print(max([len(x) for x in s.split()]))

print(max([len(x) for x in open('24.txt').readline().replace('B', ' ').replace('C', ' ').split()]))
'''

# Вариант 3
'''
s = open('24.txt').readline()
print(s)
print(len('AAAAAAA'))
'''
# Ответ: 7


# Тип 24 №27689
# Текстовый файл состоит не более чем из 106 символов X, Y и Z.
# Определите максимальную длину цепочки вида XYZXYZXYZ...
# (составленной из фрагментов XYZ, последний фрагмент может быть неполным).
'''
s = open('24.txt').readline()
print(s)
print(len('XYZXYZXYZXYZX'))
'''
# Ответ: 13


# Тип 24 №45258
# Текстовый файл состоит из символов A, B и C.
#
# Определите максимальное количество идущих подряд
# пар символов AB или CB в прилагаемом файле.

# Искомая подпоследовательность должна состоять только из пар AB,
# или только из пар CB, или только из пар AB и CB в произвольном порядке следования этих пар.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
print(s)
s = s.replace('AB', '**').replace('CB', '**')
# s = s.replace('A', ' ').replace('B', ' ').replace('C', ' ')
for x in 'ABC':
    s = s.replace(x, ' ')
print(max([len(x) for x in s.split()]) / 2)
'''
# Ответ: 65


# Тип 24 №58328
# Текстовый файл состоит не более чем из 10**6 символов
# арабских цифр (0,1,...,9). Определите максимальное количество
# идущих подряд цифр, среди которых каждые две соседние различны.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
count = 1
max_count = 0
for i in range(len(s)-1):
    if s[i] != s[i+1]:
        count += 1
        max_count = max(count, max_count)
    else:
        count = 1
print(max_count)
'''
# Ответ: 90


# Тип 24 №59817
# Текстовый файл состоит из символов, обозначающих прописные буквы латинского алфавита.
# Определите максимальное количество идущих подряд символов, которых никакие
# две буквы из набора букв A, B и C (с учетом повторений) не записаны подряд.
'''
from itertools import product
s = open('24.txt').readline()
pairs = []
for var in product('ABC', repeat=2):
    pair = ''.join(var)
    pairs.append(pair)

for pair in pairs:
    s = s.replace(pair, f'{pair[0]} {pair[1]}')

print(max([len(x) for x in s.split()]))
'''
# ADBBBBBADBBBBBBBADBBBBB  AD - не должно быть
#   BBBBB  BBBBBBB  BBBBB
# A DBBBBBA DBBBBBBBA DBBBBB

# Ответ: 49


# Тип 24 №36037
# Текстовый файл состоит не более чем из 1 200 000 символов X, Y, и Z.
# Определите максимальное количество идущих подряд символов, среди которых нет подстроки XZZY.
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
# BBBBBXZZ ZZYBBBBBBBBXZZ ZZYBBBBBB   AD: A D, ADD: AD DD, XZZY: XZZ ZZY
'''
s = open('24.txt').readline()
s = s.replace('XZZY', 'XZZ ZZY')
print(max([len(x) for x in s.split()]))
'''
# Ответ: 1713


# Тип 24 №58326
# Текстовый файл состоит не более чем из 106 символов арабских цифр (0,1,...,9).
# Определите максимальное количество идущих подряд цифр, расположенных
# в строгом убывающем порядке.
'''
s = open('24.txt').readline()
count = 1
max_count = 0
for i in range(len(s)-1):
    if int(s[i]) > int(s[i+1]):
        count += 1
        max_count = max(max_count, count)
    else:
        count = 1
print(max_count)
'''

'''
s = open('24.txt').readline()
print(s)
print(len('87654321'))
'''
# Ответ: 8


# Тип 24 №58329
# Текстовый файл состоит не более чем из 106 символов арабских цифр (0,1,...,9).
# Определите максимальное количество идущих подряд цифр, среди которых сумма двух идущих
# подряд чисел больше числа следующего за ними.
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
count = 2
max_count = 0
for i in range(len(s)-2):
    if int(s[i]) + int(s[i+1]) > int(s[i+2]):
        count += 1
        max_count = max(max_count, count)
    else:
        count = 2
print(max_count)
'''
# Ответ: 33.


# Тип 24 №48445
# Текстовый файл содержит только буквы A, C, D, F, O.
# Определите максимальное количество идущих подряд групп символов вида
# согласная + согласная + гласная.
'''
from itertools import product
tripls = []
for var in product('ACDFO', repeat=3):
    tripl = ''.join(var)
    if tripl[0] in 'CDF' and tripl[1] in 'CDF' and tripl[2] in 'AO':
        tripls.append(tripl)
print(tripls)

s = open('24.txt').readline()
for x in tripls:
    s = s.replace(x, '*')

for x in 'ACDFO':
    s = s.replace(x, ' ')

print(max([len(x) for x in s.split()]))
'''
# Ответ: 5


# Тип 24 №33526
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите символ, который чаще всего встречается в файле между двумя одинаковыми символами.
'''
s = open('24.txt').readline()
alp = []
for i in range(len(s)-2):
    if s[i] == s[i+2]:
        alp.append(s[i+1])

R = []
for a in set(s):
    R.append([alp.count(a), a])
print(max(R)[1])
'''
# Ответ: D


# Тип 24 №40740
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC...Z).
# Определите максимальное количество идущих подряд символов, среди которых
# нет ни одной буквы A и при этом не менее трёх букв E.
'''
s = open('24.txt').readline()
s = s.replace('A', ' ')
print(max([len(x) for x in s.split() if x.count('E') >= 3]))
'''
# Ответ: 282


# Тип 24 №33103
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
# Определите количество строк, в которых буква A встречается чаще, чем буква E.
'''
count = 0
for s in open('24.txt'):
    if s.count('A') > s.count('E'):
        count += 1
print(count)
'''
# Ответ: 485


# Тип 24 №35913
# Текстовый файл содержит строки различной длины.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# Необходимо найти строку, содержащую наименьшее количество букв N
# (если таких строк несколько, надо взять ту, которая находится в файле раньше),
# и определить, какая буква встречается в этой строке чаще всего.
# Если таких букв несколько, надо взять ту, которая позже стоит в алфавите.
'''
mini = 999999999
r = ''
for s in open('24.txt'):
    if mini > s.count('N'):
        mini = s.count('N')
        r = s

R = []
for a in sorted(set(r)):
    R.append([r.count(a), a])
    print(a, r.count(a))
print(max(R))
'''
# Ответ: Y


# Тип 24 №36879
# Текстовый файл содержит строки различной длины.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# В строках, содержащих менее 25 букв G, нужно определить и
# вывести максимальное расстояние между одинаковыми буквами в одной строке.
'''
maxi = 0
for s in open('24.txt'):
    if s.count('G') < 25:
        for a in 'QWERTYUIOPASDFGHJKLZXCVBNM':
            maxi = max(maxi, s.rindex(a) - s.index(a))
print(maxi)
'''
# Ответ: 1001




# endregion Урок: ******************************************************************


# GOAL = [2.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1]
# КЕГЭ  = []
# на следующем уроке:
