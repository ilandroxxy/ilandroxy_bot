
# region Домашка: ******************************************************************

# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# № 11672 (Уровень: Базовый)
# (Л. Шастин) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.


# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 12*34?5,
# делящиеся на 21025 без остатка и состоящие из одинакового количества чётных и нечётных цифр.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 21025.
# Количество строк в таблице для ответа избыточно.
'''
from fnmatch import *
for x in range(21025, 10**10, 21025):
    if fnmatch(str(x), '12*34?5'):
        # и состоящие из одинакового количества чётных и нечётных цифр.
        chet = [i for i in str(x) if i in '02468']
        nechet = [i for i in str(x) if i in '13579']
        if len(chet) == len(nechet):
            print(x, x // 21025)
'''
# Ответ:
# 1214803475 57779
# 1233263425 58657
# 1240033475 58979
# 1241673425 59057
# 1258493425 59857
# 1265263475 60179
# 1283723425 61057


# № 11667 (Уровень: Средний)
# (Л. Шастин) Текстовый файл состоит не более, чем из 10**7 прописных символов латинского алфавита.
# Определите в прилагаемом файле максимальное количество идущих подряд символов
# (длину непрерывной подпоследовательности), среди которых сочетание символов INFINITY встречается ровно 1000 раз.


# среди которых сочетание символов T встречается ровно 5 раз.
'''
print(len('0T0000T0000T000000T00000T00000'))
print(len('0000T0000T000000T00000T00000T000'))
print(len('0000T000000T00000T00000T000T000000'))

s = '0T0000T0000T000000T00000T00000T000T000000'.split('T')
print(s)  # ['0', '0000', '0000', '000000', '00000', '00000', '000', '000000']
maxi = 0
for i in range(0, len(s)-5, 1):
    maxi = max(maxi, len('T'.join(s[i:i+6])))
    # 1. '0T0000T0000T000000T00000T00000'
    # 2. '0000T0000T000000T00000T00000T000'
    # 3. '0000T000000T00000T00000T000T000000'
print(maxi)

'''

'''
s = open('24.txt').readline().split('INFINITY')
maxi = 0
for i in range(len(s)-1000):
    a = 'INFINITY'.join(s[i:i+1001])
    print(a.count('INFINITY'))
    maxi = max(maxi, len(a), a.count('INFINITY'))
print(maxi)
'''
# Ответ: 36733


# № 11671 (Уровень: Средний)
# (Л. Шастин) Исполнитель Акробат «живёт» на числовой оси. Система команд исполнителя:
#
# 1. Вперед 10 (Акробат прыгает вперед на 10 единиц),
# 2. Назад 5 (Акробат прыгает назад на 5 единиц) (отрицательные числа допускаются).
#
# Начальное положение Акробата - число 1. В скольких различных точках может оказаться Акробат после выполнения
# различных программ, которые содержат ровно 15 команд?
'''
M = []

def F(a, k):
    if k == 15:
        M.append(a)
        return 0
    return F(a+10, k+1) + F(a-5, k+1)

F(1, 0)
print(len(set(M)))
print(set(M))
'''
# Ответ: 16


# № 11703 (Уровень: Базовый)
# (Л. Шастин) В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от -100 000 до 100 000 включительно.
# Определите количество троек элементов последовательности,
# в которых хотя бы один из трёх элементов является пятизначным числом,
# а произведение элементов тройки кратно максимальному элементу последовательности,
# оканчивающемуся на 18. В ответе запишите количество найденных троек чисел,
# затем максимальное из произведений элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
A = [x for x in M if str(x)[-2:] == '18']
R = []
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    if len([len(str(abs(e))) == 5 for e in [x, y, z]]) > 0:
        if (x * y * z) % max(A) == 0:
            R.append(x * y * z)
print(len(R), max(R))
'''


# 16
'''
import sys
sys.setrecursionlimit(100000)

def G(n):
    if n < 3:
        return n
    if n > 2:
        return n - 1 + G(n-1)

print(G(4044))
'''
# Ответ: 8174947

'''
def F(x, A):
    return (not((x % 263 == 0) <= (x % A == 0))) and (x % 71 == 0)
    # return (not((x % 263 == 0) <= (x % A == 0))) and (x % 71 == 0)


for A in range(20000, 1, -1):
    if all(F(x, A) == False for x in range(1, 10000)):
        print(A)
        break
'''


# 14 № 9918 (Уровень: Сложный)
# (С. Чайкин) Дано арифметическое выражение: 73x1y_67 + 49y6_x.
# В записи чисел переменными x и y обозначены неизвестные цифры из допустимого алфавита для указанных систем счисления.
# Определите, сколько различных значений может принимать выражение при всех возможных x и y.

'''
def my_int(L: list, n: int):
    """
    Перевод в обратную строну из n-ой системы в 10-ую
    :param L: Число в n-ой системе счисления
    :param n: Сама система счисления из которой будет производится перевод
    :return: В качестве результата будет целое десятчиное число.
    """
    r = 0
    L.reverse()
    for i in range(len(L)):
        r += L[i] * n ** i
    return r
'''

'''
def my_int(L: list, n: int):
    """
    Перевод в обратную строну из n-ой системы в 10-ую
    :param L: Число в n-ой системе счисления
    :param n: Сама система счисления из которой будет производится перевод
    :return: В качестве результата будет целое десятчиное число.
    """
    L.reverse()
    return sum([(L[i] * n ** i) for i in range(len(L))])


R = []
for x in range(10, 67):
    for y in range(0, x):
        A = my_int([7, 3, x, 1, y], 67)
        B = my_int([4, 9, y, 6], x)
        R.append(A + B)
print(len(set(R)))
'''
# Ответ: 2166


# Для узла c IP-адресом 175.122.80.13 адрес подсети равен 175.122.80.0.
# Сколько существует различных возможных значений маски, если известно, что в этой сети не менее 28 узлов?
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *

for mask in range(32+1):
    net = ip_network(f'175.122.80.13/{mask}', 0)
    print(net, net.netmask)
'''


# № 10020 (Уровень: Средний)
# Дана программа для исполнителя Редактор:
# ПОКА нашлось(55555)
#    заменить(55555, 88)
#    заменить(888, 55)
# КОНЕЦ ПОКА

# Известно, что начальная строка состоит более чем из 50 цифр 5 и не содержит других цифр.
# При какой наименьшей длине исходной строки результат работы этой программы
# будет содержать наибольшее возможное число цифр 5?
'''
R = []
for n in range(50+1, 100):
    s = '5' * n
    while '55555' in s:
        s = s.replace('55555', '88', 1)
        s = s.replace('888', '55', 1)
    R.append([s.count('5'), n])

for x in sorted(R):
    print(x)
'''
# Ответ: 58


# № 10019 (Уровень: Базовый)
# (Л. Шастин) При регистрации в компьютерной системе каждому объекту присваивается
# 256-символьный идентификатор, состоящий из 53 специальных символов,
# десятичных цифр (от 0 до 9) и знака подчеркивания.
# Все символы кодируются одинаковым и минимально возможным количеством бит.
# База данных использует минимальное количество байт для хранения каждого идентификатора
# с посимвольным кодированием.
#
# Определите объем памяти (в Кбайтах), необходимый для хранения 65536 идентификаторов.
# Ответ представьте в виде целого числа - количество Кбайт.
'''
symbols = 256
alphabet = 53 + 10 + 1
print(alphabet)  # alphabet = 2 ** i
i = 6  # кол-во бит на один символ

bit = symbols * i
print(bit / 8)  # 192.0

byte = 192  # на один ID

I = (byte * 65536) / (2 ** 10)
print(I)
'''
# Ответ: 12288


# № 10026 (Уровень: Средний)
# (С. Чайкин) Откройте файл электронной таблицы,
# содержащей в каждой строке пять натуральных чисел.
# Определите сумму номеров строк таблицы, для чисел которой выполнено хотя бы одно условие:
# – числа в строке расположены в порядке возрастания;
# – в строке есть повторяющиеся числа.
'''
summa = 0
num = 1
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    # if (M[0] < M[1] < M[2] < M[3] < M[4]) or (len(M) != len(set(M))):
    if (M == sorted(M)) or (len(M) != len(set(M))):
        summa += num
    num += 1
print(summa)
'''
# Ответ: 274725


# № 9994 (Уровень: Базовый)
# (С. Чайкин) Все пятибуквенные слова, составленные из букв слова ШКОЛА,
# записаны в алфавитном порядке и пронумерованы.
# Ниже приведено начало списка.
# 1. ААААА
# 2. ААААК
# 3. ААААЛ
# 4. ААААО
# 5. ААААШ
# Под каким номером стоит слово ШАЛАШ?
'''
from itertools import product
s = sorted('ШКОЛА')
num = 1
for v in product(s, repeat=5):
    slovo = ''.join(v)
    if slovo == 'ШАЛАШ':
        print(num, slovo)
    num += 1
'''
# Ответ: 2555


# № 10014 (Уровень: Базовый)
# (Л. Шастин) Производилась двухканальная (стерео)
# звукозапись с частотой дискретизации 48 кГц и 8-битным разрешением.
# В результате был получен файл размером 5 Гбайт, без учёта размера заголовка
# и без сжатия данных. Определите длительность звукозаписи (в часах).
# В качестве ответа укажите ближайшее к полученному времени записи целое число.
# I = a * b * c * t
'''
a = 2
b = 48000
c = 8
I = 5 * 2**33   # 5 * 2**10 * 2**10 * 2**10 * 2**3
t = I / (a * b * c)  # сек
print(t / (60 * 60))
'''
# Ответ: 15.53 -> 16


# № 10013 (Уровень: Базовый)
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 104 [Вперёд 50 Направо 288]
# Определите, сколько раз Черепаха пройдёт через начало координат - точку (0; 0)?
# Примечание: начальное положение Черепахи не учитывается при подсчёте.
'''
import turtle as t
t.tracer(0)
m = 5

count = 0
for _ in range(104):
    t.forward(50 * m)
    t.right(288)
    x, y = [int(p) for p in t.pos()]
    if x == 0 and y == 0:
        count += 1
print(count)
t.done()
'''
# Ответ: 20


# № 10012 (Уровень: Средний)
# (Л. Шастин) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются две первые троичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 5,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Укажите минимальное число R, большее 64, которое может быть получено с помощью описанного алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def convert(x: int, n: int):
    s = ''
    while x > 0:
        s = alphabet[x % n] + s
        x //= n
    return s


R = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s += s[:2]
    else:
        x = (n % 3) * 5
        s += convert(x, 3)
    r = int(s, 3)
    if r > 64:
        R.append(r)
print(min(R))
'''
# Ответ: 68

'''
from itertools import product
print('x y z w F')
for var in product('01', repeat=4):
    x, y, z, w = var
'''
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x <= y) and ((not y) <= z) and w)
                if F == True:
                    print(x, y, z, w, int(F))
'''
# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# todo № 11607 (Уровень: Базовый)
# (С. Чайкин) Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
# Для какого наибольшего натурального числа А формула
# ¬(ДЕЛ(x,263)→ДЕЛ(x,A)) ∧ ДЕЛ(x,71)
# тождественно ложна (т.е. принимает значение 0) при любом натуральном значении переменной х?
'''
def F(x, A):
    return (not((x % 263 == 0) <= (x % A == 0))) and (x % 71 == 0)


for A in range(20000, 1, -1):
    if all(F(x, A) == False for x in range(1, 10000)):
        print(A)
'''

# Решение
'''
def F(x, A):
    return (not((x % 263 == 0) <= (x % A == 0))) and (x % 71 == 0)


for A in range(20000, 1, -1):
    if all(F(x, A) == 0 for x in range(1, 20000)):  # Просто увеличить диапазон х
        print(A)
        break
'''
# Ответ: 18673


# todo № 10581 (Уровень: Средний)
'''
# Для узла c IP-адресом 175.122.80.13 адрес подсети равен 175.122.80.0.
# Сколько существует различных возможных значений маски, если известно, что в этой сети не менее 28 узлов?
# Ответ запишите в виде десятичного числа.

from ipaddress import *

# Количество единиц в маске подсети указывает, сколько битов адреса IP отведено для сети,
# а оставшиеся биты - для узлов.
# Для вычисления количества возможных значений маски подсети можно использовать следующую формулу: 2**n - 2

for mask in range(32+1):
    net = ip_network(f'175.122.80.13/{mask}', 0)
    print(net, net.netmask)
    # 175.122.80.0/20 255.255.240.0  32 - 20 = 12  2**12 - 2 = 4094 подходит
    # 175.122.80.0/21 255.255.248.0
    # 175.122.80.0/22 255.255.252.0
    # 175.122.80.0/23 255.255.254.0
    # 175.122.80.0/24 255.255.255.0
    # 175.122.80.0/25 255.255.255.128
    # 175.122.80.0/26 255.255.255.192
    # 175.122.80.0/27 255.255.255.224  32 - 27 = 5   2**5 - 2 = 30 подходит
    # 175.122.80.0/28 255.255.255.240  32 - 28 = 4   2**4 - 2 = 14  не подходит
'''
# Ответ: 8

# endregion Разобрать: *************************************************************


# GOAL = [1.1, 2.1, 4.1, 5.1, 6.1, 8.1, 9.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 24.1, 25.1]
# КЕГЭ  = []
# на следующем уроке:
