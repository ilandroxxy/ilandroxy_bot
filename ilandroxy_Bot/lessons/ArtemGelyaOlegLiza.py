
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

X = 5  # Переменная - это способ взаимодействия с ячейкой памяти, где хранятся данные
# print(X, type(X))   # 5 <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения (-inf, +inf)

b = 5.0  # float (число с плавающей точкой) - вещественное число/дроби
print(7 / 2)

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, буквы, слова, текста и тд
print(a * 4, c * 4)  # 20 5555
print('8' * 101)
print('hello' + ', world')  # hello, world
# TypeError: can only concatenate str (not "int") to str

d1 = True  # bool (Boolean) - Булева Алгебра/Математическая логика
d2 = False
print(4 < 10)  # 4 меньше ли 10? # True
'''

# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# Неограниченное кол-во элементов, разных типов данных
# Каждый элемент имеет свой порядковый номер (индекс) начинающийся с нуля
# Через индексы мы можем брать элементы списка и менять их
print(A[0])  # 1
A[0] = '100'
print(A)  # ['100', 2, 3]

B = (1, 2, 3)  # tuple (кортеж)
# Полностью идентичны спискам, но в них нельзя менять значение элементов

C = {1, 2, 3, 1, 2, 3}  # set (множества)
# не могут хранить копии одинаковых значений - удаляет копии
print(C)  # {1, 2, 3}

D = {1: 'один', 2: 'два', 3: 'три'}  # dict (словарь)
# Элемент в словаре бьется на две части: ключ и значение
# Доступ к значению элеменита словаря дается через ключ
print(D[1])  # один
D[1] = 'сто1'
print(D)  # {1: 'сто1', 2: 'два', 3: 'три'}
print(D[1], D[2], D[3])
print(D.keys())  # dict_keys([1, 2, 3])
print(D.values())  # dict_values(['сто1', 'два', 'три'])

for key, value in D.items():
    print(key, value)
    # 1 сто1
    # 2 два
    # 3 три
'''

'''
M = [2, '2', 2.5, True, 2+2, '2' * 4, 7/2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: 'один', 2: 'два', 3: 'три'} ]
for elem in M:
    print(elem, type(elem))
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)  # из строчного типа данных нужно переводить аккуратнее - буквы и символы не будут конвертироваться
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)   # ValueError: invalid literal for int() with base 10: '5.0'
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 1, 2, 3]  
print(A, type(A))  # [1, 2, 3, 1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
x = input('Введите символ: ')   # функций input() вводит данные с клавиатуры в виде str()
print(x, type(x))  # <class 'str'>

x = int(input('Введите цифры: '))
print(x, type(x))  # <class 'int'>
'''

# Правильный пример работы с функцией print() через f-строки
# Задача: Написать сообщение "Привет, сегодня отличная погода - облачно, но температура 24 градуса!"
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))

print("Привет, сегодня отличная погода - облачно, но температура 24 градуса!")
print("Привет, сегодня отличная погода -", weather, ", но температура", temperature, "градуса!")
print("Привет, сегодня отличная погода - " + weather + ", но температура " + str(temperature) + " градуса!")
print("Привет, сегодня отличная погода - {}, но температура {} градуса!".format(weather, temperature))
print(f"Привет, сегодня отличная погода - {weather}, но температура {temperature} градуса!")
'''

# endregion Урок: ******************************************************************


# todo: GOAL = []
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:  # Базовая арифметика
