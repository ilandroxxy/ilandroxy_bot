# region Домашка: ******************************************************************

# Дано предложение и количество раз которое его надо повторить.
# Напишите программу, которая повторяет данное предложение нужное количество раз.

'''
s = input()
n = int(input())
for i in range(n):
    print(s)
'''

# Вариант 2
'''
s = input()
n = int(input())
i = 0
while i < n:
    print(s)
    i += 1
'''

# На вход программе подается последовательность целых чисел делящихся на 7,
# каждое число на отдельной строке. Концом последовательности является любое число,
# не делящееся на 7 (само это число в последовательность не входит, лишь символизируя её конец).
# Напишите программу, которая выводит члены данной последовательности.
'''
while True:
    x = int(input())
    if x % 7 != 0:
        break
    print(x)

x = int(input())
while x % 7 == 0:
    print(x)
    x = int(input())
'''
# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# № 9774 Основная волна 20.06.23 (Уровень: Средний)
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются две последние троичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 5,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Укажите минимальное число R, большее 133, которое может быть получено с помощью описанного алгоритма.
# В ответе запишите это число в десятичной системе счисления.

'''
def my_convert(n: int, k: int):
    s = ''
    while n > 0:
        s += str(n % k)
        n //= k
    s = s[::-1]
    return s


R = []
for n in range(1, 10000):

    s = my_convert(n, 3)  # 1. Строится троичная запись числа N.

    if n % 3 == 0:
        # s = s + s[-2] + s[-1]
        s += s[-2:]
    else:
        x = (n % 3) * 5
        s += my_convert(x, 3)

    r = int(s, 3)  # перевод из 3-ной в 10-ную

    if r > 133:
        R.append(r)
print(min(R))
'''
# Ответ: 141


# Индексы списков и срезы (строк, кортежи туда же)
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[2:])  # ['c', 'd', 'e']
print(M[:2])  # ['a', 'b']
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[::])  # ['a', 'b', 'c', 'd', 'e']
print(M[::2])  # ['a', 'c', 'e']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a']

M.reverse()
print(M)  # ['e', 'd', 'c', 'b', 'a'] 
'''


# Тип 2 №51971
# Логическая функция F задаётся выражением:
# (x≡¬y)→((z→¬w)∧(w→y)).
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x == (not y)) <= ((z <= (not w)) and (w <= y))
                print(x, y, z, w, int(F))
'''


# Тип 6 №47390
# В начальный момент Черепаха находится в начале координат,
# её голова направлена вдоль положительного направления оси ординат, хвост опущен.

# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 12 [Направо 60 Вперёд 1 Направо 60 Вперёд 1 Направо 270]
#
# Определите, сколько точек с целочисленными координатами будут
# находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.
'''
import turtle as t
t.tracer(0)
t.left(90)
t.down()
# t.speed(100)
l = 50

# Повтори 12 [Направо 60 Вперёд 1 Направо 60 Вперёд 1 Направо 270]
for i in range(12):
    t.right(60)
    t.forward(1 * l)
    t.right(60)
    t.forward(1 * l)
    t.right(270)

t.up()
for x in range(-10, 10):
    for y in range(-10, 5):
        t.goto(x * l, y * l)
        t.dot(3, 'red')

t.update()
t.done()
'''

'''
import turtle as t
t.left(90)
t.down()
t.speed(100)
l = 50

t.begin_fill()
for i in range(12):
    t.right(60)
    t.forward(1 * l)
    t.right(60)
    t.forward(1 * l)
    t.right(270)
t.end_fill()

count = 0
canvas = t.getcanvas()
for x in range(-100*l, 100*l, l):
    for y in range(-100*l, 100*l, l):
        z = canvas.find_overlapping(x, y, x, y)
        if len(z) == 1 and z[0] == 5:
            count += 1
print(count)

t.done()
'''


# Тип 6 №47403
# В начальный момент Черепаха находится в начале координат, её голова
# направлена вдоль положительного направления оси ординат, хвост опущен.

# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 12 Направо 90]
# Направо 30
# Повтори 3 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области,
# ограниченной линией, заданной данным алгоритмом: Повтори 4 [Вперёд 12 Направо 90]
#
# и находиться вне области, ограниченной линией, заданной данным алгоритмом:
# Повтори 3 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]. Точки на линии учитывать не следует.

'''
import turtle as t
t.left(90)
t.tracer(0)
l = 20

# # Повтори 4 [Вперёд 12 Направо 90]
for i in range(4):
    t.forward(12 * l)
    t.right(90)

# Направо 30
t.right(30)

# Поменяли цвет пера
t.color('green')

# Повтори 3 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]
for i in range(3):
    t.forward(8 * l)
    t.right(60)
    t.forward(8 * l)
    t.right(120)

t.up()
for x in range(0, 13):
    for y in range(0, 13):
        t.goto(x * l, y * l)
        t.dot(2, 'red')

t.update()
t.done()
'''


# Пару слов про строки str()
'''
# i  01234
s = 'abcde'

print(f'Первый элемент списка: {s[0]} \n'
      f'Последний элемент списка: {s[-1]}')

for x in s:
    print(x, end=' ')  # a b c d e
print()

for i in range(0, len(s)):  # len() выводит длину строки
    print(s[i], end=' ')  # a b c d e
print()
'''

# Срезы строк
'''
# Если мы все таки захотим изменить букву 'c' на '*'

s = 'abcde'
s = s[:2] + '*' + s[3:]
print(s)  # ab*de

print(s[2:])  # *de
print(s[:2])  # ab
print(s[:])  # ab*de
print(s[::])  # ab*de
print(s[::2])  # a*e
print(s[::-1])  # ed*ba
'''

# Функции строк
'''
s = '1234567543'

print(len(s))
print(max(s))
print(min(s))

print(sorted(s))  # ['1', '2', '3', '3', '4', '4', '5', '5', '6', '7']
print(sorted(s, reverse=True))  # ['7', '6', '5', '5', '4', '4', '3', '3', '2', '1']

s = sorted(s)
print(s)  # ['1', '2', '3', '3', '4', '4', '5', '5', '6', '7']

print(set(s))  # {'4', '3', '1', '7', '2', '5', '6'}
# Сколько различных значений 
'''

# Методы строк (методы - это функции к определенному объекту)
'''
s = '213214123421321'

print(s.count('2'))  # 5 - кол-во двоек в строке s
print(s.index('2'))  # 0 - возвращает индекс первой найденной двойки
print(s.rindex('2'))  # 13 - возвращает индекс последней найденной двойки
print(s.isdigit())   # True

s = s.replace('2', '*')
print(s)  # *13*141*34*13*1  # заменить все
s = s.replace('*', '2', 3)  # заменить только первые три найденных
print(s)  # 2132141234*13*1


ip = '21.34.54.230'
print(ip.split('.'))  # ['21', '34', '54', '230']
IP = [int(x) for x in ip.split('.')]
print(IP)  # [21, 34, 54, 230]

new_ip = ','.join(ip.split('.'))
print(new_ip)  # 21,34,54,230
'''
# endregion Урок: ******************************************************************


# todo: Дарья = []
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
