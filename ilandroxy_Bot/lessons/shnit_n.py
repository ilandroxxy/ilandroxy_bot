# region Домашка: ************************************************************

# КЕГЭ № 3376 Джобс 22.04.2022 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 1*5*9,
# значения разрядов в которых идут в строго возрастающем порядке, и делящиеся на 21 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им частные от деления на 21.
'''
from fnmatch import *
k = 0
for x in range(21, 10**9, 21):
    if fnmatch(str(x), '1*5*9'):
        num = str(x)
        if list(num) == sorted(num):
            if len(set(num)) == len(num):
                print(x, x // 21)
                k += 1
                if k == 5:
                    break
'''


# КЕГЭ № 706 Джобс 16.11.2020 (Уровень: Базовый)
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [6638225; 6638322], простые числа.
# Выведите все найденные простые числа в порядке возрастания, слева от каждого числа выведите его номер по порядку.
'''
def divisors(num):
    div = []
    for j in range(2, int(num**0.5)+1):
        if num % j == 0:
            div.append(j)
            div.append(num//j)
    return sorted(set(div))


num = 1
for x in range(6638225, 6638322+1):
    d = divisors(x)
    if len(d) == 0:
        print(num, x)
        num += 1
'''
# endregion Домашка: ************************************************************

# region Урок: ************************************************************

# Как открывать файл для 17 номера:
'''
f = open('17.txt', 'r')
print(f)  # <_io.TextIOWrapper name='17.txt' mode='r' encoding='UTF-8'>
'''
'''
f = open('17.txt', 'r')
# print(f.read())  # прочтение всего файла сразу - вывести на экран все содержимое
# print(f.readline())  # прочтение первой строчки файла
print(f.readlines())  # прочитать все строки файла - сложить их в список
'''
'''
with open('17.txt') as f:
    print(f.readline())
# Здесь файл уже закроется 
'''
M = [int(x) for x in open('17.txt')]


# Типы задач 17 номера:
'''
M = [1, 2, 3, 4, 5]

# 1. В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
# 12 23 34 45
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    print(f'{x}{y}', end=' ')
print()

# 2. В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
# 123 234 345
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    print(f'{x}{y}{z}', end=' ')
print()

# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        x, y = M[i], M[j]
        print(f'{x}{y}', end=' ')
    print()
'''


# Надо обращать внимание на отрицательные числа
'''
a = 47  # оканчивается ли число на 7?
print(a % 3, -a % 3)  # 2 1

a = 237  # число должно быть трехзначным
print(len(str(a)) == 3, len(str(-a)) == 3)  # True False
'''

# Лучше записать так:
'''
a = 47  # оканчивается ли число на 7?
print(abs(a) % 3, abs(-a) % 3)  # 2 1

a = 237  # число должно быть трехзначным
print(len(str(abs(a))) == 3, len(str(abs(-a))) == 3)  # True False
'''


# Тип 17 №37336
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от −10000 до 10000 включительно.
# Определите и запишите в ответе сначала количество пар элементов последовательности,
# в которых хотя бы одно число делится на 3, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
count = 0
maxi = -999999999
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if x % 3 == 0 or y % 3 == 0:  # в которых хотя бы одно число делится на 3
        count += 1
        # if maxi < x + y:
        #     maxi = x + y
        maxi = max(maxi, x + y)
print(count, maxi)
'''
# Ответ: 2802 1990


# Тип 17 №47221
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от −10000 до 10000 включительно.
# Определите количество пар последовательности, в которых только одно число оканчивается на 3,
# а сумма квадратов элементов пары не меньше квадрата максимального элемента последовательности,
# оканчивающегося на 3. В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную из сумм квадратов элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(x) for x in open('17.txt')]
A = [x for x in M if abs(x) % 10 == 3]
count = 0
maxi = -999999999
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if (abs(x) % 10 == 3) ^ (abs(y) % 10 == 3):
        if (x ** 2 + y ** 2) >= max(A) ** 2:
            count += 1
            maxi = max(maxi, x ** 2 + y ** 2)
print(count, maxi)
'''
# Ответ: 180 190360573


# Тип 17 №37348
# В файле содержится последовательность из 10000 целых положительных чисел.
# Каждое число не превышает 10000. Определите и запишите в ответе сначала количество
# пар элементов последовательности, для которых произведение элементов не кратно 34,
# затем максимальную из сумм элементов таких пар. В данной задаче под парой
# подразумевается два различных элемента последовательности.
# Порядок элементов в паре не важен.
'''
M = [int(x) for x in open('17.txt')]
count = 0
maxi = -999999999
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        x, y = M[i], M[j]
        if x * y % 34 != 0:
            count += 1
            maxi = max(maxi, x + y)
print(count, maxi)
'''
# 45539445 19999

# endregion Урок: ************************************************************

# Никита = [5.1, 8.1, 12.1, 14.1, 15.1, 16.1, 17.1, 23.1, 25.1]
# КЕГЭ = []
# на следующем уроке:
