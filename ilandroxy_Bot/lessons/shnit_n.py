# region Домашка: ************************************************************
'''
def F(x,A):
    # x&39 = 0 ∨ (x&11 = 0 → ¬(x&А = 0))
    return (x&39 == 0) or ((x&11 == 0) <= (not(x&A == 0)))


for A in range (0,1000):
    if all(F(x,A)for x in range (1,10000)):
        print(A)
        break
'''

# endregion Домашка: ************************************************************

# region Урок: ************************************************************


# Поиск делителей числа
'''
import time
start = time.time()

def divisors(num):
    div = []
    for j in range(1, num+1):
        if num % j == 0:
            div.append(j)
    return div


print(divisors(10000000))

end = time.time()
print(end - start)  # 0.286391019821167

import time
start = time.time()


# Правильная функция для поиска делителей числа
def divisors2(num):
    div = set()
    for j in range(1, int(num**0.5)+1):
        if num % j == 0:
            div.add(j)
            div.add(num // j)
    return sorted(div)


print(divisors2(10000000))

end = time.time()
print(end - start)  # 0.00013399124145507812
'''

'''
def divisors(num):
    div = set()
    for j in range(1, int(num**0.5)+1):
        if num % j == 0:
            div.add(j)
            div.add(num // j)
    return sorted(div)
'''


def divisors(num):
    div = []
    for j in range(1, int(num**0.5)+1):
        if num % j == 0:
            div.append(j)
            div.append(num // j)
    return sorted(set(div))


# Тип 25 №33104
# Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Например, у числа 6 есть два нетривиальных делителя: 2 и 3.
# Найдите все натуральные числа, принадлежащие отрезку [289123456; 389123456]
# и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.
'''
def divisors(num):
    div = []
    if (num**0.5) == round(num**0.5):  # если у числа есть целый квадратный корень
        for j in range(2, int(num**0.5)+1):
            if num % j == 0:
                div.append(j)
                div.append(num // j)
    return sorted(set(div))


for x in range(289123456, 389123456+1):
    d = divisors(x)
    if len(d) == 3:
        print(x, max(d))
'''
# 294499921 2248091
# 352275361 2571353
# 373301041 2685619


# Тип 25 №27855
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632; 95700], числа,
# имеющие ровно шесть различных чётных натуральных делителей (при этом количество нечётных делителей может быть любым).
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
'''
def divisors(num):
    div = []
    for j in range(1, int(num**0.5)+1):
        if num % j == 0:
            div.append(j)
            div.append(num // j)
    return sorted(set([x for x in div if x % 2 == 0]))  # чётных


for x in range(95632, 95700+1):
    d = divisors(x)
    if len(d) == 6:
        print(*d)
'''
# 2 10 50 3826 19130 95650
# 2 26 338 566 7358 95654
# 2 4 8 23918 47836 95672


# Тип 25 №33495
# Рассмотрим произвольное натуральное число, представим его всеми возможными способами
# в виде произведения двух натуральных чисел и найдём для каждого такого произведения
# разность сомножителей. Например, для числа 16 получим: 16=16*1=8*2=4*4,
# множество разностей содержит числа 15, 6 и 0. Найдите все натуральные числа,
# принадлежащие отрезку [2000000;3000000], у которых составленное описанным способом
# множество разностей будет содержать не меньше трёх элементов, не превышающих 115.
# В ответе перечислите найденные числа в порядке возрастания.

'''
def divisors(num):
    div = []
    for j in range(1, int(num**0.5)+1):
        if num % j == 0:
            if (num // j) - j <= 115:
                div.append((num // j) - j)
    return sorted(set(div))


for x in range(2000000, 3000000+1):
    d = divisors(x)
    if len(d) >= 3:
        print(x)
'''
# Ответ:
# 2053440
# 2098080
# 2328480
# 2638944


# Тип 25 №38603
# Пусть M — сумма минимального и максимального натуральных делителей целого числа,
# не считая единицы и самого числа. Если таких делителей у числа нет, то значение M считается равным нулю.
#
# Напишите программу, которая перебирает целые числа, бо́льшие 700000, в порядке возрастания
# и ищет среди них такие, для которых значение M оканчивается на 8.
# Выведите первые пять найденных чисел и соответствующие им значения M.
#
# Формат вывода: для каждого из пяти таких найденных чисел в отдельной строке
# сначала выводится само число, затем — значение М.
#
# Строки выводятся в порядке возрастания найденных чисел.
'''
def divisors(num):
    div = []
    for j in range(2, int(num**0.5)+1):  # не считая единицы и самого числа
        if num % j == 0:
            div.append(j)
            div.append(num // j)
    return sorted(set(div))

k = 0
for x in range(700000, 7000000000):
    d = divisors(x)
    if len(d) >= 2:
        M = d[0] + d[-1]  # min(d) + max(d)
        if M % 10 == 8:
            print(x, M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 700005 233338
# 700007 100008
# 700012 350008
# 700015 140008
# 700031 24168


# Тип 25 №38959
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 200_000_000, для которых 0 <M(N) < N.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def divisors(num):
    div = []
    for j in range(2, int(num**0.5)+1):
        if num % j == 0:
            div.append(j)
            div.append(num // j)
    return sorted(set(div))


k = 0
for x in range(200_000_000+1, 200_000_000_000):  # превышающих 200_000_000
    d = divisors(x)
    if len(d) >= 5:
        M = d[0] * d[1] * d[2] * d[3] * d[4]
        if 0 < M < x:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 1728
# 21632
# 1260
# 1152
# 4127787


# Тип 25 №61405
# Маска числа — это последовательность цифр, в которой могут встречаться специальные символы «?» и «*».
# Символ «?» означает ровно одну произвольную цифру,
# символ «*» означает произвольную (в том числе пустую) последовательность цифр.

# Найдите все натуральные числа, не превышающие 10**10,
# которые соответствуют маске 3?2258*4 и при этом без остатка делятся на 2024.
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '3?2258*4'):
        print(x)
'''
# 3422584
# 352258984
# 3022582904
# 3122588744
# 3222584464
# 3322580184
# 3422586024
# 3522581744
# 3622587584
# 3722583304
# 3822589144
# 3922584864


# 25 № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**7, найдите все простые числа, соответствующие маске 3?1111*.
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
from time import time

start = time()

def prime(x):
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            return False
    return True


for x in range(2, 10**7):
    if fnmatch(str(x), '3?1111*'):
        if prime(x):
            print(x)

end = time()
print(end-start)
'''


'''
from fnmatch import *
from time import time

start = time()

def divisors(num):
    div = []
    for j in range(2, int(num**0.5)+1):
        if num % j == 0:
            div.append(j)
            div.append(num // j)
    return sorted(set(div))


for x in range(2, 10**7):
    if fnmatch(str(x), '3?1111*'):
        if len(divisors(x)) == 0:
            print(x)

end = time()
print(end-start)
'''
# Ответ:
# 311111
# 361111
# 3011117
# 3011119
# 3311117
# 3611119
# 3811117
# 3911111


# № 6210 (Уровень: Средний)
# (Н. Сафронов) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Найдите все натуральные числа, не превосходящие 10**7, для которых выполняются одновременно все условия:
# • соответствуют маске *2?2*;
# • являются палиндромами;
# • делятся на число 53 без остатка;
# • количество делителей больше 30.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — сумму делителей.
'''
from fnmatch import *


def divisors(num):
    div = []
    for j in range(1, int(num**0.5)+1):
        if num % j == 0:
            div.append(j)
            div.append(num // j)
    return sorted(set(div))


for x in range(53, 10**7, 53):  # • делятся на число 53 без остатка;
    if fnmatch(str(x), '*2?2*'):  # • соответствуют маске *2?2*;
        if str(x) == str(x)[::-1]:  # • являются палиндромами;
            d = divisors(x)
            if len(d) > 30:  # • количество делителей больше 30.
                print(x, sum(d))
'''
# Ответ:
# 212212 508032
# 2527252 5588352
# 4282824 13789440
# 4626264 11787120
# 8125218 19595520
# 8824288 19908504




# endregion Урок: ************************************************************

# Никита = [5.1, 8.1, 12.1, 14.1, 15.1, 16.1, 23.1, 25.1]
# КЕГЭ = []
# на следующем уроке:
