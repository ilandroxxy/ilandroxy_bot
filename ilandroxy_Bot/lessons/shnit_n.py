# region Домашка: ************************************************************

'''
for n in range(1, 10000):
    s = bin(n)[2:]
    if s.count('1') % 2 == 0:
        s = s + '00' + s[2:] + '11'
    elif s.count('1') % 2 != 0:

        s = s + '11' + s[2:] + '00'
    elif s.count('1') % 2 != 0:
        s = s + '11' + s[2:] + '00'
    d = int(s, 2)
    if n < 100:
        print(d)
'''


# КЕГЭ № 4317 Пробный 06.2022 /dev/inf advanced (Уровень: Сложный)
# Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1. Строится пятеричная запись числа N.
# 2. К полученной записи дописываются разряды.
# Если последняя цифра в пятеричной записи четная, справа дописывается 2,
# если нечетная – слева дописывается 2 и справа 3.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# В результате работы автомата на экране появилось число, меньшее 1000.
# Для какого наибольшего значения N данная ситуация возможна?

'''
def convert(num, system):
    alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    r = ''
    while num > 0:
        r += alphabet[num % system]
        num //= system
    return r[::-1]


R = []
for n in range(1, 1000):
    s = convert(n, 5)
    if s[-1] in '024':
        s = s + '2'
    else:
        s = '2' + s + '3'
    r = int(s, 5)
    if r < 1000:
        R.append(n)
print(max(R))
'''
# endregion Домашка: ************************************************************

# region Урок: ************************************************************

# Тип 16 №27413
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 1 при n = 1;
# F(n) = n + F(n − 1), если n — чётно;
# F(n) = 2 × F(n − 2), если n> 1 и при этом n — нечётно.
#
# Чему равно значение функции F(26)?
'''
def F(n):
    if n == 1:
        return 1
    if n % 2 == 0:
        return n + F(n - 1)
    if n > 1 and n % 2 != 0:
        return 2 * F(n - 2)


print(F(26))
'''
# Ответ: 4122


# Тип 16 №59809
# Задан алгоритм вычисления функции F(n), где n — натуральное число:
#
# F(n) = 1, при n = 1;
# F(n) = n − 2 + F(n − 1), если n > 1.
#
# Чему равно значение функции F(2023) − F(2021)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n - 2 + F(n - 1)


print(F(2023) - F(2021))
# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded

# F(2023) = 2023 - 2 + F(2022)
# F(2022) = 2022 - 2 + F(2021)  -  F(2021)
print(2023 - 2 + 2022 - 2)
'''
# Ответ: 4041


# Тип 16 №36871
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n) = 3?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)


cnt = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        cnt += 1
print(cnt)
'''
# Ответ: 120

# Тип 16 №58524
# Функции F(n) и G(n), где n — натуральное число, заданы следующими соотношениями:
#
# F(n) = n, если n>1000000;
# F(n)=n+F(2n), если n≤1000000;
#
# Сколько существует таких натуральных чисел n (включая число 2000), для которых G(n)=G(2000)?
'''
def F(n):
    if n > 1000000:
        return n
    if n <= 1000000:
        return n + F(2*n)

def G(n):
    return F(n) / n


r = G(2000)
cnt = 0
for n in range(1, 10000+1):
    if G(n) == r:
        cnt += 1
        print(cnt)
'''
# Ответ: 1953


# Тип 23 №15117
# 1. Прибавить 1
# 2. Прибавить 2
#
# Сколько существует программ, которые преобразуют исходное число 3 в число 20
# и при этом траектория вычислений содержит число 9 и не содержит числа 15?
'''
def F(start, stop):
    if start > stop or start == 15:
        return 0
    elif start == stop:
        return 1
    else:
        return F(start+1, stop) + F(start+2, stop)


print(F(3, 9) * F(9, 20))


def F(start, stop):
    if start >= stop or start == 15:
        return start == stop
    return F(start+1, stop) + F(start+2, stop)


print(F(3, 9) * F(9, 20))
'''


'''
def f(start, end):
    if start >= end:
        return start == end
    return f(start + 1, end) + f(start * 2, end) + f(start * 2 + 1, end) + f(start * 10, end)


print(f(1, 15))
'''


# endregion Урок: ************************************************************


# Никита = [5.1, 8.1, 12.1, 14.1, 16.1, 23.1]
# КЕГЭ = []
# на следующем уроке:
