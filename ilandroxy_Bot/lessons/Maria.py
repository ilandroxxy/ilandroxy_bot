
# region Домашка:  ************************************************************

'''
# Тип 23 № 3631
# У исполнителя Увеличитель две команды, которым присвоены номера:
# 1.прибавь 2,
# 2.умножь на 3.
# Первая из них увеличивает число на экране на 2, вторая— умножает его на 3.
# Программа для Увеличителя— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 59?

def F(a,b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+2, b) + F(a * 3, b)
print(F(1, 59))
# Ответ: 38
'''

'''
# Тип 23 № 45257
# Исполнитель преобразует число на экране.
# У исполнителя есть две команды, которым присвоены номера:
# 1.Прибавь 2
# 2.Умножь на 2
# Первая из них увеличивает число на экране на 2, вторая увеличивает число на экране в два раза.
# Программа для исполнителя— это последовательность команд.
# Сколько существует программ, для которых при исходном числе 1 результатом является число 52,
# и при этом траектория вычислений содержит число 18?

def F(a,b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+2, b) + F(a * 2, b)
print(F(1, 18) * F(18, 52))
# Ответ: 96
'''

'''
# Тип 23 № 16451
# Исполнитель РазДваТри преобразует число на экране.
# У исполнителя есть три команды, которым присвоены номера:
# 1.Прибавить 1
# 2.Умножить на 2
# 3.Прибавить 3
# Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.
# Программа для исполнителя РазДваТри— это последовательность команд.
# Сколько существует программ, которые преобразуют исходное число 3 в число 16 и при этом траектория вычислений содержит число 12?

def F(a,b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a * 2, b) + F(a+3, b)
print(F(3, 12) * F(12, 16))
# Ответ: 96
'''

# Тип 25 № 41000
'''
# Пусть M(N)— сумма двух наибольших различных натуральных делителей натурального числа N, не считая самого числа и единицы.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
# Найдите 5 наименьших натуральных чисел, превышающих 11000000, для которых 0<M(N)<10000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(n):
    dl = set()
    for j in range(2, int(n**0.5)+1):
        if n % j == 0:
            dl.add(j)
            dl.add(n // j)
    return sorted(dl)

count = 0
for n in range(11000000+1, 110000000):
    dl = D(n)
    if len(dl) >= 2:
        M = dl[-1] + dl[-2]
        if 0 < M < 10000:
            print(M)
            count += 1
            if count == 5:
                break
'''
# Ответ:
# 8672
# 8388
# 8532
# 7042
# 7364



# Тип 25 № 27852
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [185_311; 185_330], числа,
# имеющие ровно четыре различных натуральных делителя. Для каждого найденного числа запишите эти четыре делителя в
# четыре соседних столбца на экране с новой строки. Делители в строке должны следовать в порядке возрастания.

def D(n):
    dl = set()
    for j in range(1, int(n**0.5)+1):
        if n % j == 0:
            dl.add(j)
            dl.add(n // j)
    return sorted(dl)

count = 0
for n in range(185_311, 185_330+1):
    dl = D(n)
    if len(dl) == 4:
        print(*dl)
'''
# Ответ:
# 1 2 92657 185314
# 1 47 3943 185321
# 1 241 769 185329


# Тип 25 № 28121
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [2422000; 2422080], простые числа.
# Выведите все найденные простые числа в порядке возрастания, слева от каждого числа выведите его номер по порядку,
# считая, что первое найденное число имеет номер «1», второе — «2», и т.д.

# Вариант 1
def D(n):
    dl = set()
    for j in range(2, int(n**0.5)+1):
        if n % j == 0:
            dl.add(j)
            dl.add(n // j)
    return sorted(dl)

count = 1
for n in range(2422000, 2422080+1):
    dl = D(n)
    if len(dl) == 0:
        print(count, n)
        count += 1

# Вариант 2
def D(n):
    for j in range(2, int(n**0.5)+1):
        if n % j == 0:
            return False
    return True

count = 1
for n in range(2422000, 2422080+1):
    if D(n):
        print(count, n)
        count += 1
'''
# Ответ:
# 1 2422027
# 2 2422033
# 3 2422037
# 4 2422073


# Тип 25 № 35483
'''
# Найдите все натуральные числа, принадлежащие отрезку [35_000_000; 40_000_000],
# у которых ровно пять различных нечётных делителей (количество чётных делителей может быть любым).
# В ответе перечислите найденные числа в порядке возрастания.

def D(n):
    dl = set()
    for j in range(1, int(n**0.5)+1):
        if n % j == 0:
            if j % 2 != 0:
                dl.add(j)
            if (n // j) % 2 != 0:
                dl.add(n // j)
            if len(dl) > 5:
                return sorted(dl)
    return sorted(dl)

count = 0
for n in range(35_000_000, 40_000_000+1):
    dl = D(n)
    if len(dl) == 5:
        print(n, *dl)
'''
# Ответ: но долго
# 35819648
# 38950081
# 39037448
# 39337984

# endregion Домашка: ************************************************************


# region Урок:  ************************************************************

# Тип 9 № 38588
'''
# Откройте файл электронной таблицы, содержащей в каждой строке три натуральных числа.
# Выясните, какое количество троек чисел может являться сторонами треугольника, то есть
# удовлетворяет неравенству треугольника. В ответе запишите только число.
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if M[2] < M[1] + M[0]:
        count += 1
print(count)
'''
# ответ: 2453


# Тип 9 № 27517
'''
# Откройте файл электронной таблицы, содержащей вещественные числа —
# результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
#
# Найдите разность между максимальным значением температуры и её средним арифметическим значением.
# В ответе запишите только целую часть получившегося числа.

A = []
for s in open('9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    A += M

print(max(A) - (sum(A)/len(A)))
'''
# Ответ: 15


# Тип 9 № 47213
'''
# Откройте файл электронной таблицы, содержащей в каждой строке шесть натуральных чисел.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
# — в строке только одно число повторяется ровно два раза, остальные числа различны;
# — среднее арифметическое неповторяющихся чисел строки не больше суммы повторяющихся чисел.
#
# В ответе запишите только число.
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.replace(',', '.').split()]
    if len(set(M)) == 5:
        x = sum(M) - sum(set(M))  # число, которое имеет копию
        if ((sum(M) - 2*x) / 4) <= 2*x:
            count += 1
print(count)
'''
# Ответ: 2241


# x = sum(M) - sum(set(M))
"""
M = [3, 4, 5, 4]
set(M) = {3, 4, 5}

sum(M) = 16
sum(set(M)) = 12
16 - 12 = 4
"""


# endregion Урок: ************************************************************


# todo: Мария = [2, 5, 8, 9.1, 12, 14+, 16+, 23, 25.1]
# на прошлом уроке: Прорещивали 25 номер, Мария  сама решала ряд задач
# на следующем уроке: