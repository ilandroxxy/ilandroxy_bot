
# region Домашка:  ************************************************************

'''
# Тип 8 № 13567
# Иван составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово.
# В качестве кодовых слов Иван использует все пятибуквенные слова в алфавите {A, B, C, D, E}, удовлетворяющие такому условию:
# кодовое слово не может начинаться с буквы E и заканчиваться буквой A.
# Сколько различных кодовых слов может использовать Иван?

count = 0
for a in 'ABCD':
    for b in 'ABCDE':
        for c in 'ABCDE':
            for d in 'ABCDE':
                for e in 'BCDE':
                    temp = a + b + c + d + e
                    count += 1
print(count)
# Ответ: 2000
'''

'''
# Тип 8 № 27295
# Света составляет 5-буквенные коды из букв С, В, Е, Т, А.
# Каждую букву нужно использовать ровно один раз, при этом нельзя ставить рядом две гласные.
# Сколько различных кодов может составить Света?

s = 'СВЕТА'
s1 = 'СВТ'
count = 0
for a in s:
    for b in s1:
        for c in s:
            for d in s1:
                for e in s:
                    temp = a + b + c + d + e
                    M = [i for i in temp]
                    A = set(M)
                    if len(A) == 5:
                        count += 1
print(count * 2)
# Ответ: 72
'''

'''
# Тип 8 № 3227 Добавить в вариант
# Все 5-буквенные слова, составленные из букв И, О, У, записаны в алфавитном порядке и пронумерованы. Вот начало списка:
# 1.ИИИИИ
# 2.ИИИИО
# 3.ИИИИУ
# 4.ИИИОИ
# Запишите слово, которое стоит под номером 240.

s = 'ИОУ'
M = []
count = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    M.append(temp)
                    if count == 240:
                        print(temp)
                    count+= 1
print(M[240-1])
# Ответ: УУУОУ
'''


# Тип 12 № 13517
'''
#        ПОКА  нашлось (81) ИЛИ нашлось (882) ИЛИ нашлось (8883)
#            ЕСЛИ  нашлось (81)
#                 ТО заменить (81, 2)
#            ИНАЧЕ ЕСЛИ  нашлось (882)
#                 ТО заменить (882, 3)
#            ИНАЧЕ заменить (8883, 1)
#                 КОНЕЦ ЕСЛИ
#            КОНЕЦ ЕСЛИ
#        КОНЕЦ ПОКА

# Какая строка получится в результате применения приведённой ниже программы к строке длины 101,
# в которой первый и последний символ – это цифры 2, а остальные символы – цифры 8?

s = '2' + '8' * 99 + '2'

while '81' in s or '882' in s or '8883' in s:  # ПОКА нашлось (81) ИЛИ нашлось (882) ИЛИ нашлось (8883)
    if '81' in s:  # ЕСЛИ  нашлось (81)
        s = s.replace('81', '2', 1)  # ТО заменить (81, 2)
    elif '882' in s: # ИНАЧЕ ЕСЛИ  нашлось (882)
        s = s.replace('882', '3', 1)  # ТО заменить (882, 3)
    else:
        s = s.replace('8883', '1', 1)  # ИНАЧЕ заменить (8883, 1)

print(s)  # # Какая строка получится в результате
'''
# Ответ: 283


# Тип 12 № 33514
'''
#     ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
#         заменить (01, 30)
#         заменить (02, 101)
#         заменить (03, 202)
#     КОНЕЦ ПОКА
#
# Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка, содержащая 15 единиц, 10 двоек и 60 троек.
# Сколько единиц было в исходной строке?

for x in range(1, 50):
    for y in range(1, 50):
        for z in range(1, 50):
            s = '0' + '1' * x + '2' * y + '3' * z

            while '01' in s or '02' in s or '03' in s:
                s = s.replace('01', '30', 1)
                s = s.replace('02', '101', 1)
                s = s.replace('03', '202', 1)

            if s.count('1') == 15 and s.count('2') == 10 and s.count('3') == 60:
                print(x)
'''
# Ответ: 45



# Тип 5 № 17370
'''
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится двоичная запись числа N.
# 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.
# Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.
# 3. Полученное число переводится в десятичную запись.
# 4. Новое число вычитается из исходного, полученная разность выводится на экран.


# Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 100 до 3000?

A = set()
for n in range(100, 3000+1):
    s = bin(n)[2:]  # удалили элементы с индексами 0 1

    s = s[1:]  # удалили элемент с индексом 0

    r = int(s, 2)

    A.add(n - r)
print(A, len(A))
'''
# Ответ: 6


# endregion Домашка: ************************************************************


# region Урок:  ************************************************************

# Типы коллекций
'''
# Тип коллекции СПИСОК list()
A = []  # пустой список
A = list()  # пустой список
A = [1, 2, 3]

# Тип коллекции КОРТЕЖ tuple()
B = ()  # пустой кортеж
B = tuple()  # пустой кортеж
B = (1, 2, 3)

# Тип коллекции МНОЖЕСТВО set()
C = set()  # пустое множество
C = {1, 2, 3}

# Тип коллекции СЛОВАРЬ dict()
D = {}  # пустой словарь
D = dict()  # пустое словарь
D = {1, 2, 3}
'''

# Функции:
'''
print()
len()
max()
min()
sum()
range()
int()
str()
list()
set()
'''

# Методы - отличаются от функций, привязкой к определенному объекту

# Объект список list()
'''
.append()
.count()
.reverse()
.index()
.pop()
.copy()
'''

# Объект строка str()
'''
.replace()
.split()
.join()
.count()
.index()
.rindex()
'''


# Мы можем писать свои функции
'''
def MyLen(M):
    count = 0
    for x in M:
        count += 1
    return count

M = [1,2,3215,35,2,34,2,143]
print(MyLen(M))


print(max(M), min(M), sum(M))
print(max(1, 3, 6), min(1, 3, 6))

def MySum(*args):
    summ = 0
    for x in args:
        summ += x
    return summ

print(MySum(1, 3, 6))
'''



# Тип 16 № 6234
'''
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(1) = 1;
# F(2) = 1;
# F(n) = F(n – 2) * (n + 1) при n > 2.
#
# Чему равно значение функции F(8)?
# В ответе запишите только натуральное число.

def F(n):
    if n > 2:
        return F(n - 2) * (n + 1)
    if n == 1:
        return 1
    if n == 2:
        return 1

print(F(8))
'''
# Ответ: 315


# Тип 16 № 39245
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#

# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 900 и F(n) = 9?

def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0
for n in range(1, 900+1):
    if F(n) == 9:
        count += 1
print(count)
'''
# Ответ: 3



# Тип 16 № 4657
'''
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = 2 * G(n–1) + 5 * n, при n >1

# G(1) = 1
# G(n) = F(n–1) + 2 * n, при n >1
#
# Чему равно значение функции F(4) + G(4)?

def F(n):
    if n == 1:
        return 1
    if n > 1:
        return 2 * G(n - 1) + 5 * n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return F(n - 1) + 2 * n

print(F(4) + G(4))
'''
# Ответ: 89



# Тип 16 № 33188
'''
# Обозначим через a mod b остаток от деления натурального числа a на натуральное число b. 
Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:

# F(0) = 0;
# F(n) = n + F(n − 3), если n mod 3 = 0, и n > 0;
# F(n) = n + F(n − (n mod 3)), если n mod 3 > 0.

# Чему равно значение функции F(22)?


def F(n):
    if n == 0:
        return 0
    if n % 3 == 0 and n > 0:  # если n mod 3 = 0, и n > 0;
        return n + F(n - 3)
    if n % 3 > 0:  # если n mod 3 > 0.
        return n + F(n - (n % 3))

print(F(22))
'''
# Ответ: 106







# endregion Урок: ************************************************************


# todo: Мария = [2, 5, 8, 12, 14+, 16], на следующем уроке: Разбираем 23 номер и рекурсию функций