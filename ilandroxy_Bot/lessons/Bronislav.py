# region Домашка:  ******************************************************************************



# endregion Домашка:  ******************************************************************************


# region Урок:  ******************************************************************************
'''
# list, tuple, set, dict   -   str


# Списки и списочные выражения
L = []
l1 = list()   # создаем пустые списки

for x in range(1, 1000):
    if x % 2 == 0:
        L.append(x)  # метод списков
print(L)

# i  0  1  2  3  4  5  6
M = [1, 2, 3, 4, 5, 6, 7]
#-i -7 -6 -5 -4 -3 -2 -1

print(min(M), M[0])  # минимальный элемент из списка
print(max(M), M[-1])  # максимальный элемент из списка

# МЕТОДЫ списков:

M.append(0)  # добавляем новый элемент в конец списка
print(M)

M.reverse()  # разворачивает список наоборот
print(M)

print(M.count(3))

# [0, 7, 6, 5, 4, 3, 2, 1]
print(M.index(3))  # 5

A = sorted(set(M))  # [0, 1, 2, 3, 4, 5, 6, 7]
print(A)
A[4] = 'hello'
print(A)  # [0, 1, 2, 3, 'hello', 5, 6, 7]


# Строковый тип данных

# i  012345
s = '12345 чита книгу "Война и мир"'
print(s)
s = s + s[-3:]
print(s)  # 12345345

# s[4] = '324'  # TypeError: 'str' object does not support item assignment

# i        0123456789
numbers = '1234506789'  # нуль стоит не на своем месте, надо убрать...

nul = numbers[5]
numbers = numbers[:5] + numbers[6:]
print(nul, numbers)  # 0 123456789
result = nul + numbers
print(result)  # 0123456789

print(result[:5])
print(result[5:])
print(result[::])   # 0123456789
print(result[::-1])  # 9876543210


# методы строк:

s = '12345678229'
print(s.count('2'))  # 3
print(s.index('2'), s.rindex('2'))  # 1 9
s = s.replace('2', '*', 2)
print(s)  # 1*345678*29

id = '192.34.54.67'
l = id.split('.')
print(l)  # ['192', '34', '54', '67']

id = '* *'.join(l)
print(id)  # 192* *34* *54* *67

slova = 'Fhjeiu12h3ehjw124hHUI5H67ufnj324kh uehiwf'
slova = slova.upper()
print(slova)  # FHJEIU12H3EHJW124HHUI5H67UFNJ324KH UEHIWF
slova = slova.lower()
print(slova)  # fhjeiu12h3ehjw124hhui5h67ufnj324kh uehiwf

# генераторы списков
summ = sum([int(x) for x in slova if x.isdigit()])  # [1, 2, 3, 1, 2, 4, 5, 6, 7, 3, 2, 4]
print(summ)  # 40
'''


# Тип 5 № 33750
# Алгоритм получает на вход натуральное число N>5 и строит по нему новое число R следующим образом:
# 1. Строится двоичная запись числа N.
# 2. Вместо последней (самой правой) двоичной цифры дважды записывается вторая слева цифра двоичной записи.
# 3. Результат переводится в десятичную систему.
#
# Пример. Дано число N=19. Алгоритм работает следующим образом:
# 1. Двоичная запись числа N: 10011.
# 2. Вторая слева цифра 0, единица в конце записи заменяется на два нуля, новая запись 100100.
# 3. Результат работы алгоритма R=36.
#
# При каком наименьшем числе N в результате работы алгоритма получится R>76?
# В ответе запишите это число в десятичной системе счисления.
'''
for n in range(5, 1000):  # натуральное число N>1
    x = n
    M = []
    while x > 0:
        M.append(x % 2)  # 1. Строится двоичная запись числа N.
        x //= 2
    M.reverse()

    M = M[:-1]
    M.append(M[1])  # 2. Вместо последней (самой правой) двоичной цифры дважды записывается вторая слева цифра двоичной записи.
    M.append(M[1])

    r = 0
    M.reverse()
    for i in range(0, len(M)):  # 3. Результат переводится в десятичную систему.
        r += M[i] * 2 ** i

    if r > 76:
        print(n)
        break

for n in range(5, 1000):
    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.

    s = s[:-1] + s[1] + s[1]  # 2. Вместо последней (самой правой) двоичной цифры дважды записывается вторая слева цифра двоичной записи.

    r = int(s, 2)  # 3. Результат переводится в десятичную систему.

    if r > 76:
        print(n)
        break
'''
# Ответ: 40


# Тип 8 № 13621
# Ольга составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово.
# В качестве кодовых слов Ольга использует 4-буквенные слова, в которых есть только буквы A, B, C, D, E, X,
# причём буква X появляется ровно 1 раз и только на первом или последнем месте.
# Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем.
# Сколько различных кодовых слов может использовать Ольга?
'''
s = sorted('ABCDEX')
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                slovo = a + b + c + d
                if slovo.count('X') == 1:  # причём буква X появляется ровно 1 раз
                    if slovo[0] == 'X' or slovo[-1] == 'X':  # только на первом или последнем месте.
                        print(slovo)
                        count += 1
print(count)

import itertools
count = 0
for s in itertools.product('ABCDEX', repeat=4):
    slovo = ''.join(s)
    if slovo.count('X') == 1:  # причём буква X появляется ровно 1 раз
        if slovo[0] == 'X' or slovo[-1] == 'X':  # только на первом или последнем месте.
            print(slovo)
            count += 1
print(count)
'''
# Ответ: 250

# Тип 12 № 10317
# Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 125
# идущих подряд цифр 8? В ответе запишите полученную строку.
#
# ПОКА нашлось (333) ИЛИ нашлось (888)
#   ЕСЛИ нашлось (333)
#     ТО заменить (333, 8)
#     ИНАЧЕ заменить (888, 3)
#   КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
'''
s = '8' * 125
while '333' in s or '888' in s:
    if '333' in s:
        s = s.replace('333', '8', 1)
    else:
        s = s .replace('888', '3', 1)
print(s)
'''
# Ответ: 388

# endregion Урок:  ******************************************************************************

# todo: Бронислав = [1-, 3, 4, 5-, 6-, 10, 18-, 19-21-, 22-, 23-]
# todo:   КЕГЭ    = []
# на прошлом уроке:
# на следующем уроке:
