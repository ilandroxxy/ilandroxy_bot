# region Домашка:  ******************************************************************************



# endregion Домашка:  ******************************************************************************


# region Урок:  ******************************************************************************

# 12, 14, 16, 23


# Тип 12 № 18716
# Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 79 семёрок?
#
# ПОКА нашлось (7777) ИЛИ нашлось (3333)
#   ЕСЛИ нашлось (3333)
#       ТО заменить (3333, 77)
#   ИНАЧЕ
#       заменить (7777, 33)
'''
s = '7' * 79
while '7777' in s or '3333' in s:
    if '3333' in s:
        s = s.replace('3333', '77', 1)
    else:
        s = s.replace('7777', '33', 1)
print(s)
'''
# Ответ: 33777


# Тип 12 № 36867
# Дана программа для редактора:
#
#   ПОКА НЕ нашлось (00)
#       заменить (01, 210)
#       заменить (02, 320)
#       заменить (03, 3012)
#
# Известно, что исходная строка начиналась с нуля и заканчивалась нулём,
# а между ними содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка, содержащая 26 единиц, 54 двойки и 48 троек.
# Сколько цифр было в исходной строке?
'''
for x in range(50):
    for y in range(50):
        for z in range(50):
            s = '0' + '1' * x + '2' * y + '3' * z + '0'

            while '00' not in s:
                s = s.replace('01', '210', 1)
                s = s.replace('02', '320', 1)
                s = s.replace('03', '3012', 1)

            if s.count('1') == 26 and s.count('2') == 54 and s.count('3') == 48:
                print(2+x+y+z)
'''
# Ответ: 36


# Тип 12 № 28550
# Дана программа для Редактора:
#
# ПОКА нашлось (21)
#   заменить (21, 5)
#
# Исходная строка содержит десять единиц и некоторое количество двоек, других цифр нет,
# точный порядок расположения единиц и двоек неизвестен.
# После выполнения программы получилась строка с суммой цифр 34.
# Какое наименьшее количество двоек могло быть в исходной строке?
'''
import itertools
R = []
for l in range(11, 20):
    for s in itertools.product('12', repeat=l):
        if s.count('1') == 10:
            s = ''.join(s)

            while '21' in s:
                s = s.replace('21', '5', 1)

            if sum([int(i) for i in s]) == 34:
                R.append(l - 10)
print(min(R))
'''
# Ответ: 6


# № 8470 (Уровень: Средний)
#  Дана программа для Редактора:
# ПОКА нашлось(15) ИЛИ нашлось(255) ИЛИ нашлось(555)
#   ЕСЛИ нашлось(15)
#     ТО заменить(15, 2)
#   ЕСЛИ нашлось(255)
#     ТО заменить(255, 1)
#   ЕСЛИ нашлось(555)
#     ТО заменить(555, 12)
#

# На вход приведённой выше программе поступает строка вида: «15...525...5»,после 1 и 2 идет по n цифр «5» (n > 5).
# Определите максимальное значение n, при котором сумма числовых значений цифр строки,
# получившейся в результате выполнения программы, является трехзначным числом.
'''
for n in range(8, 10000):
    s = '1' + '5' * n + '2' + '5' * n

    while '15' in s or '255' in s or '555' in s:
        if '15' in s:
            s = s.replace('15', '2', 1)
        if '255' in s:
            s = s.replace('255', '1', 1)
        if '555' in s:
            s = s.replace('555', '12', 1)

    summ = sum([int(i) for i in s])

    if 100 <= summ <= 999:
    # if len(str(summ)) == 3:
        print(n)
'''
# Показать ответ: 1243


# Тип 16 № 4937
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(1) = 1;   # если n == 1, то вернуть 1
# F(2) = 1;
# F(n) = F(n - 2) * (n - 1), при n > 2.
#
# Чему равно значение функции F(7)? В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1 or n == 2:
        return 1
    if n > 2:
        return F(n - 2) * (n - 1)

print(F(7))
'''
# Ответ: 48


# Тип 16 № 4657
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = 2 * G(n–1) + 5 * n, при n >1
#
# G(1) = 1
# G(n) = F(n–1) + 2 * n, при n >1
#
# Чему равно значение функции F(4) + G(4)?
#
# В ответе запишите только натуральное число.
'''
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return 2 * G(n - 1) + 5 * n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return F(n - 1) + 2 * n

print(F(4) + G(4))
'''
# Ответ: 89


# Тип 16 № 39245
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 900 и F(n)=9?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0
for n in range(1, 900+1):  # 1 ≤ n ≤ 900
    if F(n) == 9:
        count += 1
print(count)
'''
# Ответ: 3

# Тип 23 № 16825
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Прибавить 3
#
# Сколько существует программ, которые преобразуют исходное число 3 в число 16
# и при этом траектория вычислений не содержит чисел 6 и 12?
'''
def F(a, b):
    if a > b or a == 6 or a == 12:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a+3, b)

print(F(3, 16))


def F(a, b):
    if a >= b or a == 6 or a == 12:
        return a == b
    return F(a+1, b) + F(a*2, b) + F(a+3, b)

print(F(3, 16))
'''
# Ответ: 22


# Тип 23 № 29129
# Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 2

# Сколько существует программ, которые преобразуют исходное число 3 в число 60,
# и при этом траектория вычислений содержит числа 13 и 30?
'''
def F(a, b):
    if a >= b:
        return a == b
    return F(a+1, b) + F(a*2, b)

print(F(3, 13) * F(13, 30) * F(30, 60))
'''
# Ответ: 48

# endregion Урок:  ******************************************************************************

# todo: Бронислав = [1-, 2, 3, 4, 5, 6-, 8, 10, 12, 14, 16, 18-, 19-21-, 22-, 23]
# todo:   КЕГЭ    = []
# на прошлом уроке: Разобрали 12, 16, 23 номера, 12 разобрали очень плотно.
# на следующем уроке: #todo: разобрать 16 номера по типу: Тип 16 № 47220
