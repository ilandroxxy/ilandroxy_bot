# region Домашка: ******************************************************************************

# Тип 14 № 18628
'''
# Значение выражения 4 * 343**5 + 6 * 49**8 - 50 записали в системе счисления с основанием 7.

# Сколько цифр 6 содержится в этой записи?

x = 4 * 343**5 + 6 * 49**8 - 50
M = []
while x > 0:
    M.append(x % 7)
    x //= 7
print(M.count(6))
'''
# Ответ: 15


# Тип 14 № 48396
'''
# Операнды арифметического выражения записаны в системе счисления с основаниями 19 и 16:

# 2x84_19 + 2B3x_16

# В записи чисел переменной x обозначены допустимые в данных системах счисления неизвестные цифры.
# Определите наименьшее значение x, при котором значение данного арифметического выражения кратно 88.
# Для найденного значения x вычислите частное от деления значения арифметического выражения на 88 и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления в ответе указывать не нужно.

for x in '0123456789abcdef':
    a = int(f'2{x}84', 19)
    b = int(f'2b3{x}', 16)
    if (a + b) % 88 == 0:
        print((a + b) // 88)
        break
'''
# Ответ: 345


# Тип 14 № 48386
'''
# Операнды арифметического выражения записаны в системах счисления с основаниями 15 и 16:

# 90x4y_15 + 91xy2_16

# В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры.
# Определите наименьшие значения x и y, при которых значение данного арифметического выражения кратно 56.
# Для найденных значений x и y вычислите частное от деления значения арифметического выражения на 56 и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления в ответе указывать не нужно.

for x in '0123456789abcde':
    for y in '0123456789abcde':
        a = int(f'90{x}4{y}', 15)
        b = int(f'91{x}{y}2', 16)
        if (a + b) % 56 == 0:
            print((a + b) // 56)
            exit()
'''
# Ответ: 18754


# Тип 14 № 48379
'''
# Числа M и N записаны в системе счисления с основанием 9 соответственно.

# M = 842x5_9, N = 8x725_9
# В записи чисел переменной x обозначена неизвестная цифра из алфавита девятеричной системы счисления.
# Определите наименьшее значение натурального числа A, при котором существует такой x, что M + A кратно N.

for A in range(1, 10000):
    for x in '012345678':
        M = int(f'842{x}5', 9)
        N = int(f'8{x}725', 9)
        if (M + A) % N == 0:
            print(A)
            exit()
'''
# Ответ: 387


# Тип 14 № 40989
'''
# Значение выражения 2 * 216**8 + 4 * 36**12 + 6**15 - 1296 записали в системе счисления с основанием 6.

# Сколько значащих нулей содержится в этой записи?

x = 2 * 216**8 + 4 * 36**12 + 6**15 - 1296
M = []
while x > 0:
    M.append(x % 6)
    x //= 6
print(M.count(0))
'''
# Ответ: 14

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************


# Тип 5 № 14767
# Автомат получает на вход четырёхзначное число (число не может начинаться с нуля).
# По этому числу строится новое число по следующим правилам.
#
# 1. Складываются отдельно первая и вторая, вторая и третья, третья и четвёртая цифры заданного числа.
# 2. Наименьшая из полученных трёх сумм удаляется.
# 3. Оставшиеся две суммы записываются друг за другом в порядке неубывания без разделителей.
#
# Пример. Исходное число: 1984. Суммы: 1 + 9 = 10, 9 + 8 = 17, 8 + 4 = 12.
# Удаляется 10. Результат: 1217.
#
# Укажите наименьшее число, при обработке которого автомат выдаёт результат 613.

# Вариант 1
'''
for n in range(1000, 10000):
    M = [int(i) for i in str(n)]

    a = M[0] + M[1]
    b = M[1] + M[2]
    c = M[2] + M[3]

    maxi = max(a, b, c)
    sred = (a + b + c) - (max(a, b, c) + min(a, b, c))

    r = str(sred) + str(maxi)
    if r == '613':
        print(n)
        break
'''

# Вариант 1
'''
s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for x1 in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
    for x2 in s:
        for x3 in s:
            for x4 in s:
                a = x1 + x2
                b = x2 + x3
                c = x3 + x4

                maxi = max(a, b, c)
                sred = (a + b + c) - (max(a, b, c) + min(a, b, c))

                r = str(sred) + str(maxi)
                if r == '613':
                    print(x1, x2, x3, x4)
                    exit()
'''
# Ответ: 1067


# Тип 5 № 25836
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
#
# 1) Строится двоичная запись числа N.
# 2) К этой записи дописываются справа ещё два разряда по следующему правилу:
# если N чётное, в конец числа (справа) дописываются два нуля,
# в противном случае справа дописываются две единицы.
#
# Укажите максимальное число N, для которого результат работы алгоритма будет меньше 134.
# В ответе это число запишите в десятичной системе счисления.

# Вариант1 через списки
'''
for n in range(1, 10000):
    x = n

    M = []
    while x > 0:
        M.append(x % 2)
        x //= 2
    M.reverse()

    if n % 2 == 0:
        M.append(0)
        M.append(0)
    else:
        M.append(1)
        M.append(1)

    r = 0
    M.reverse()
    for i in range(0, len(M)):
        r += M[i] * 2 ** i

    if r < 134:
        print(n)
'''

# Вариант2 через строки
'''
for n in range(1, 10000):
    s = bin(n)[2:]  # перевод в двоичную систему счисления (получаем строку)

    if n % 2 == 0:
        s += '00'
    else:
        s += '11'

    r = int(s, 2)  # перевод из двоичной системы счисления в 10-ную

    if r < 134:
        print(n)
'''
# Ответ: 32



# Тип 5 № 46963
# Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. Вычисляется количество единиц, стоящих на чётных местах в двоичной записи числа N без ведущих нулей,
# и количество нулей, стоящих на нечётных местах.
# Места отсчитываются слева направо (от старших разрядов к младшим, начиная с единицы).
# 3. Результатом работы алгоритма становится модуль разности полученных двух чисел.
#
# Пример. Дано число N = 39. Алгоритм работает следующим образом:
# 1. Строится двоичная запись: 39_10 = 100111_2.
# 2. Выделяем единицы на чётных и нули на нечётных местах: 100111. На чётных местах стоят две единицы, на нечётных — один ноль.
# 3. Модуль разности равен 1.
# Результат работы алгоритма R = 1.
#
# При каком наименьшем N в результате работы алгоритма получится R = 5?

# Вариант 1
'''
for n in range(2, 100000+1):
    s = bin(n)[2:]

    k1 = 0
    k0 = 0
    for i in range(0, len(s)):
        if i % 2 == 0 and s[i] == '1':
            k1 += 1
        if i % 2 != 0 and s[i] == '0':
            k0 += 1


    r = abs(k0 - k1)

    if r == 5:
        print(n)
        break
'''

# Вариант 2
'''
for n in range(2, 100000 + 1):
    s = bin(n)[2:]

    k1 = [s[i] for i in range(0, len(s)) if i % 2 == 0].count('1')
    k0 = [s[i] for i in range(0, len(s)) if i % 2 != 0].count('0')

    if abs(k0 - k1) == 5:
        print(n)
        break
'''
# Ответ: 511



# Тип 5 № 16882
# Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
#
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из нового числа вычитается исходное, полученная разность выводится на экран.
#
# Пример. Дано число N = 13. Алгоритм работает следующим образом.
#
# 1. Восьмибитная двоичная запись числа N: 00001101.
# 2. Все цифры заменяются на противоположные, новая запись 11110010.
# 3. Десятичное значение полученного числа 242.
# 4. На экран выводится число 242 − 13 = 229.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 111?

# Вариант 1
'''
for n in range(0, 255+1):
    s = bin(n)[2:]

    while len(s) != 8:
        s = '0' + s

    z = ''
    for x in s:
        if x == '0':
            z += '1'
        else:
            z += '0'

    r = int(z, 2) - n

    if r == 111:
        print(n)
'''

# Вариант 2
'''
for n in range(0, 255+1):
    s = bin(n)[2:]

    while len(s) != 8:
        s = '0' + s

    s = s.replace('0', '*')
    s = s.replace('1', '0')
    s = s.replace('*', '1')

    r = int(s, 2) - n

    if r == 111:
        print(n)
'''

# Вариант 2
'''
for n in range(0, 255+1):
    x = n

    M = []
    while x > 0:
        M.append(x % 2)
        x //= 2
    M.reverse()

    while len(M) != 8:
        M.reverse()
        M.append(0)
        M.reverse()

    for i in range(0, len(M)):
        if M[i] == 0:
            M[i] = 1
        else:
            M[i] = 0

    sum = 0
    M.reverse()
    for i in range(0, len(M)):
        sum += M[i] * 2 ** i

    r = sum - n

    if r == 111:
        print(n)
'''
# Ответ: 72










# endregion Урок: ******************************************************************************


# todo: Александр_2 = [2, 6, 14], на следующем уроке: Прорешиваем 5 номера






