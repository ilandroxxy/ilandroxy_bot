# region Домашка:

# Тип 2 № 33504
# Логическая функция F задаётся выражением ((x ≡ ¬y) → (y ∧ ¬z)) ∨ (z ∧ ¬w).
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z, w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x == (not(y))) <= (y and (not(z)))) or (z and (not(w)))
                if F == False:
                    print(x, y, z, w, F)
'''
# Ответ: wzxy


# Тип 2 № 33472
# Логическая функция F задаётся выражением (w → x) ∧ ((y → z) ≡ (x → y)).
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z, w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (w <= x) and ((y <= z) == (x <= y))
                if F == True:
                    print(x, y, z, w, F)
'''
# Ответ: xzyw


# Тип 2 № 46960
'''
# Логическая функция F задаётся выражением (¬y → (z ≡ w)) ∧ ((z → x) ≡ w)
# На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий неповторяющиеся строки.
# Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z, w.

print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((not(y)) <= (z == w)) and ((z <= x) == w)
                if F == True:
                    print(x, y, z, w, F)
'''
# Ответ: Ответ: zwyx






# Тип 6 № 47249
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 6 [Вперёд 13 Направо 120]
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.
'''
import turtle as t
t.left(90)
L = 20
t.color('red')

t.begin_fill()
for _ in range(3):
    t.forward(13 * L)
    t.right(120)
t.end_fill()

canvas = t.getcanvas()
count = 0
for x in range(-100 * L, 100 * L, L):
    for y in range(-100 * L, 100 * L, L):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item [0] == 5:
            count += 1
print(count)

t.done()
'''
# Ответ: 66

# Тип 6 № 47303
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 5 Направо 90 Вперёд 10 Направо 90]
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.
'''
import turtle as t
t.left(90)
L = 40
t.color('blue')

t.begin_fill()
for _ in range(2):
    t.forward(5 * L)
    t.right(90)
    t.forward(10 * L)
    t.right(90)
t.end_fill()

canvas = t.getcanvas()
count = 0
for x in range(-100 * L, 100 * L, L):
    for y in range(-100 * L, 100 * L, L):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item [0] == 5:
            count += 1
print(count)

t.done()

# Ответ: 36
'''

# endregion Домашка:


# region Урок:

# Теория списков - список - это еще один тип данных коллекций
# Упорядоченные элементы списка - у каждого элемента есть позиция и номер - индекс
# (через индекс мы можем обращаться к элементу списка)
# Элементы списка можно изменять через порядковый номер

'''
M = []  # создание пустого спискаr

A = [1, 2, '4', '*', True, [2, 3, 4]]
for x in A:   # цикл позволяет пробежать элементы списка напрямую
    print(x, type(x))

B = [8, 3, 4, 5]
# i  0  1  2  3    индексный счет начинается с нуля
# i -4 -3 -2 -1
print(B[0])  # по индексу 0 мы можем вывести первый элемент списка
print(B[-1])  # по индексу -1 мы можем вывести последний элемент списка

print(len(B))  # функция len() выводит длину списка (других коллекций и строк тоже) - то есть кол-во элементов
print(B[len(B)-1])  # по индексу len(B)-1 мы можем вывести последний элемент списка

for i in range(0, len(B)):  # такой форик реализует пробег элементов по индексам
    print(B[i], end=' ')  # вывел элементы списка на одной строке
print()

print(B)
print(*B)

for i in range(0, len(B)):  # таким образом можем менять элементы списков
    B[i] = B[i] ** 2
print(B)
'''

# Функции списков
'''
A = [1, 2, 3, 3, 2, 3, 2, 2]
print(len(A))
print(sum(A))
print(min(A))
print(max(A))

#  Через перевод списка в МНОЭЕСТВО set() можно получить кол-во различных цифр в коллекции
B = []
for x in A:
    if x not in B:
        B.append(x)
print(B, len(B))

M = set(A)
print(M, len(M))

# Найдите какая цифра встречается чаще всего
maxi = 0
res = 0
for x in A:
    if maxi < A.count(x):
        maxi = A.count(x)
        res = x
print(res, maxi)

M = set()  # пустое множество
S = {}  # пустой словарь
for x in A:
    S[x] = A.count(x)
print(S)
'''


# Методы списков
'''
M = [1, 3, 4]
print(M)
M.append(1)
M.append(1)  # добавляем элемент в конец списка
M.append(0)
print(M)

M.reverse()
print(M)

M.sort()
print(M)
# по сути отсортировали по возрастанию и по убыванию
M.reverse()
print(M)

x = 1
print(M.count(x))  # вывести кол-во элементов x в списке

print(M.index(1))  # выводит индекс первого найденного элемента

x = M.pop(2)  # забрали элемент из списка
print(M, x)

a = 4
b = a

A = M
print(M, A)
B = M.copy()

M.clear()
print(M, A, B)
'''


# Тип 14 № 16819
"""
# Значение выражения 125**5 + 25**9 − 30? записали в системе счисления с основанием 5.
#
# Сколько цифр 4 содержится в этой записи?

x = 125**5 + 25**9 - 30
M = []
while x > 0:
    M.append(x % 5)
    x //= 5
M.reverse()
print(M, M.count(4))
"""
# Ответ: 13



# Тип 14 № 48338
'''
# Операнды арифметического выражения записаны в системе счисления с основанием 14:
#
# 1x563_14 + 871x3_14
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита четырнадцатеричной системы счисления.
# Определите наименьшее значение x, при котором значение данного арифметического выражения кратно 24.
# Для найденного значения x вычислите частное от деления значения арифметического выражения на 24 и укажите его
# в ответе в десятичной системе счисления. Основание системы счисления в ответе указывать не нужно.

for x in range(0, 14):
    A = [1, x, 5, 6, 3]
    a = 0
    A.reverse()
    for i in range(0, len(A)):
        a += A[i] * 14 ** i

    B = [8, 7, 1, x, 3]
    b = 0
    B.reverse()
    for i in range(0, len(B)):
        b += B[i] * 14 ** i

    if (a + b) % 24 == 0:
        print((a+b) // 24)
'''

# Вариант 2
'''
Alphabet = '0123456789abcd'
for x in Alphabet:
    A = f'1{x}563'
    B = f'871{x}3'

    a = int(A, 14)
    b = int(B, 14)

    if (a + b) % 24 == 0:
        print((a + b) // 24)
'''
# 15374




# endregion Урок:


# todo: Александр_2 = [2, 6, 14], на следующем уроке: Разбираем списочные выражения и срезы + 14 new, 5






