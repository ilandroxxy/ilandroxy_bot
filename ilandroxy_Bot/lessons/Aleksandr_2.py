# region Домашка: ******************************************************************************



# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************


# Тип 8 № 35466
'''
# Вероника составляет 3-буквенные коды из букв В, Е, Р, О, Н, И, К, А, причём буква В должна входить в код ровно один раз.
# Все полученные коды Вероника записала в алфавитном порядке и пронумеровала.
#
# Начало списка выглядит так:
# 1. ААВ
# 2. АВА
# 3. АВЕ
#
# На каком месте будет записан первый код, не содержащий ни одной буквы А?

s = sorted(['В', 'Е', 'Р', 'О', 'Н', 'И', 'К', 'А'])
# s.sort()

k = 1
for a in s:
    for b in s:
        for c in s:
            temp = a + b + c
            if temp.count('В') == 1:
                if 'А' not in temp:
                    print(k, temp)
                    exit()
                k += 1
# Ответ: 23
'''


# Функции в пайтон
'''
len()
print()
range()
int()
sum()
max()
min()
str()
list()
'''


# Методы - те же функции, только на определенный объект

# class Vitalya():
#
#     def __int__(self):  # Методы
#         pass

# Методы списков
'''
append()
reverse()
sort()
count()
'''


# Можем создавать свои функции
'''
def mysum(*args):  # принимает неограниченный кортеж переменных
    summ = 0
    for x in args:
        summ += x
    return summ


def mysred(x, y, z):
    sred = mysum(x, y, z) - (min(x, y, z) + max(x, y, z))
    return sred

a, b, c = 2, 4, 7
print(min(a, b, c), mysred(a, b, c), max(a, b, c))


M = [1, 4, 5]
print(min(M), max(M), sum(M))

print(mysum(4, 3, 2, 4))


def myrange(stop, start=0, step=1):
     for i in range(start, stop, step):
         print(i, end=' ')
     print()


myrange(10, start=2)
myrange(10, step=2)
'''


# Тип 23 № 9174
'''
# У исполнителя три команды, которым присвоены номера:
# 1. Прибавь 2
# 2. Прибавь 3
# 3. Прибавь 4
#
# Сколько есть программ, которые число 23 преобразуют в число 38?

def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+2, b) + F(a+3, b) + F(a+4, b)

print(F(23, 38))
'''
# Ответ: 112



# Тип 23 № 33768
'''
# Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3

# Сколько существует программ, которые преобразуют исходное число 2 в число 16,
# и при этом траектория вычислений содержит число 11 и не содержит числа 15?

def F(a, b):
    if a > b or a == 15:  #  и не содержит числа 15?
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*3, b)

print(F(2, 11) * F(11, 16))
'''
# Ответ: 195


# Тип 16 № 4642
'''
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 3
# F(n) = F(n–1) * (n–1), при n >1
#
# Чему равно значение функции F(6)?


def F(n):
    if n > 1:
        return F(n - 1) * (n - 1)
    if n == 1:
        return 3

print(F(6))
'''
# Ответ: 360


# Тип 16 № 4657
'''
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = 2 * G(n–1) + 5 * n, при n >1
#
# G(1) = 1
# G(n) = F(n–1) + 2 * n, при n >1
#
# Чему равно значение функции F(4) + G(4)?

def F(n):
    if n == 1:
        return 1
    if n > 1:
        return 2 * G(n - 1) + 5 * n

def G(n):
    if n == 1:
        return 1
    if n > 1:
        return F(n - 1) + 2 * n

print(F(4) + G(4))
'''
# Ответ: 89



# Тип 16 № 35474
'''
# Обозначим через mod(a, b) остаток от деления натурального числа a на натуральное число b.
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 3), если n > 0 и при этом mod(n, 3) = 0;
# F(n) = mod(n, 3) + F(n − mod(n, 3)), если mod(n, 3) > 0.
#
# Назовите минимальное значение n, для которого F(n) = 11.

def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 3 == 0:  # mod(n, 3) = 0;
        return F(n / 3)
    if n % 3 > 0:
        return (n % 3) + F(n - n % 3)

for n in range(1, 1000):
    if F(n) == 11:
        print(n)
        break
'''
# Ответ: 485



# Тип 16 № 38950
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 500 и F(n)=8?

def F(n):
    if n == 0:
        return 0
    if n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)
    
count = 0
for n in range(1, 500+1):
    if F(n) == 8:
        count += 1
print(count)
'''
# Ответ: 5

# endregion Урок: ******************************************************************************


# todo: Александр_2 = [2, 5, 6, 8, 12, 14+, 16, 23], на следующем уроке: Добиваем вопросы 8, 12, 16, 23






