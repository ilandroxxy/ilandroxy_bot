# region Домашка: ******************************************************************************

# Тип 24 № 35913
'''
# Текстовый файл содержит строки различной длины.
# Общий объём файла не превышает 1 Мбайт. Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
# Необходимо найти строку, содержащую наименьшее количество букв N (если таких строк несколько, надо взять ту, которая находится в файле раньше)
# , и определить, какая буква встречается в этой строке чаще всего. Если таких букв несколько, надо взять ту, которая позже стоит в алфавите.

M = open('24.txt').readlines()
mini = 9999
r = ''
for s in M:
    if mini > s.count('N'):
        mini = s.count('N')
        r = s

alphabet = sorted([i for i in 'QWERTYUIOPASDFGHJKLZXCVBNM'])
maxi = -9999
l = ''
for a in alphabet:
    if maxi <= r.count(a):
        maxi = r.count(a)
        l = a
print(maxi, l)
'''
# Ответ: Y


# Тип 24 № 35998
'''
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
# В строках, содержащих менее 25 букв A, нужно определить и вывести максимальное расстояние между одинаковыми буквами в одной строке.

M = open('24.txt').readlines()
A = []
for s in M:
    if s.count('A') < 25:
        A.append(s)
alphabet = sorted([i for i in 'QWERTYUIOPASDFGHJKLZXCVBNM'])
maxi = -9999
for s in A:
    for a in alphabet:
        maxi = max(maxi, s.rfind(a) - s.find(a))
print(maxi)
'''

# Вариант 2
'''
M = open('24.txt').readlines()
alphabet = sorted([i for i in 'QWERTYUIOPASDFGHJKLZXCVBNM'])
maxi = 0
for s in M:
    if s.count('A') < 25:
        for a in alphabet:
            # maxi = max(maxi, s.rfind(a) - s.find(a))
            maxi = max(maxi, s.rindex(a) - s.index(a))
print(maxi)
'''
# Ответ: 1004


# № 5677 Вариант 09.01.23 (Уровень: Средний)

# (А. Игнатюк) В текстовом файле дана последовательность латинских букв.
# Необходимо найти в этой последовательности самую длинную подстроку, состоящую из комбинации DAD,
# при этом первый и последний элементы могут быть неполными. Например ADDADDADDADD.
# В ответе укажите количество символов, составляющих наибольшую длину подходящей подстроки.
'''
s = open('24.txt').readline()
count = 2
max_count = 0
for i in range(0, len(s)-2):
    # if (s[i] == 'D' and s[i+1] == 'A' and s[i+2] == 'D') or (s[i] == 'A' and s[i+1] == 'D' and s[i+2] == 'D') or (s[i] == 'D' and s[i+1] == 'D' and s[i+2] == 'A'):
    if s[i:i+3] == 'DAD' or s[i:i+3] == 'ADD' or s[i:i+3] == 'DDA':
        count += 1
        max_count = max(max_count, count)
    else:
        count = 2
print(max_count)
'''
# Ответ: 99


# № 5641 (Уровень: Средний)
'''
# (М. Ишимов) Текстовый файл состоит из символов N, R, O и P.
# Определите максимальную длину последовательности, в которых нет подряд идущих символов NP или PO в прилагаемом файле.
# Для выполнения этого задания следует написать программу.

s = open('24.txt').readline()
s = s.replace('NP', ' ').replace('PO', ' ')
M = [len(i) for i in s.split()]
print(max(M)+2)
# NPoooPO  # длину "ненужной строки" - 1  
# *PoooP*  # len(NP) - 1 = 1  и таких две с двух сторон.
'''
# Ответ: 123


# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************




# endregion Урок: ******************************************************************************


# todo: Александр_2 = [2, 3, 5, 6, 8, 9.1, 12, 14+, 15+, 16, 17, 23, 24, 25.2]
# на прошлом уроке: Решали 3 номер через функцию ВПР
# на следующем уроке: 10 минут добавим к след. уроку; Повторим 3, разбираем 22, 9, 10







