# region Домашка: ******************************************************************************

# Тип 9 № 33088
# Электронная таблица содержит результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Определите, сколько раз за время наблюдений суточные колебания температуры (разность между максимальной и минимальной температурой в течение суток)
# были меньше 14 градусов.
'''
count = 0
for s in open('inf_22_10_20_9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    if (max(M) - min(M)) < 14.0:
        count += 1
print(count)
'''
# Ответ: 6


# Тип 9 № 35467
# Электронная таблица содержит результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Определите, сколько раз за время измерений результат очередного измерения оказывался выше результата предыдущего
# на 2 и более градусов.
'''
A = []
for s in open('9999.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    A += M
count = 0
for i in range(len(A)-1):
    if A[i+1] - A[i] >= 2:
        count += 1
print(count)
'''
# Ответ: 439


# Тип 9 № 48457
# В каждой строке электронной таблицы записаны шесть натуральных чисел.
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
#
# — в строке встречается ровно четыре различных числа; два из них по два раза, два — по одному;
# — сумма повторяющихся чисел (без учёта повторений, то есть каждое число входит в сумму один раз) больше суммы неповторяющихся.
#
# В ответе запишите число — количество строк, для которых выполнены эти условия.
'''
count = 0
for s in open('09 (1).txt'):
    M = [int(i) for i in s.split()]
    if len(set(M)) == 4 and all(M.count(i) <= 2 for i in M):
        repeat = sum(M) - sum(set(M))  # repeat - сумма повторяющихся чисел
        if repeat > sum(set(M)) - repeat:
            count += 1
print(count)
'''
# Ответ: 456


# № 6897 OpenFIPI (Уровень: Средний)
# Откройте файл электронной таблицы, содержащей в каждой строке четыре натуральных числа.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
#
# – наибольшее из четырёх чисел меньше суммы трёх других;
# – четыре числа нельзя разбить на две пары чисел с равными суммами.
#
# В ответе запишите только число.

# Вариант 1
'''
count = 0
for s in open('9_6897 (1).txt'):
    M = [int(i) for i in s.split()]
    if max(M) < (sum(M) - max(M)):
        if M[0] + M[1] != M[2] + M[3] and M[0] + M[2] != M[1] + M[3] and M[0] + M[3] != M[1] + M[2]:
            count += 1
print(count)
'''

# Вариант 2
'''
import itertools as it
count = 0
for s in open('9_6897 (1).txt'):
    M = [int(i) for i in s.split()]
    if max(M) < (sum(M) - max(M)):
        if all(A[0] + A[1] != A[2] + A[3] for A in it.permutations(M, len(M))):
            count += 1
print(count)
'''

# Ответ: 2396


# Тип 24 № 36037
# Текстовый файл состоит не более чем из 1 200 000 символов X, Y, и Z.
# Определите максимальное количество идущих подряд символов, среди которых нет подстроки XZZY.
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.
'''
s = open('24 (2).txt').readline()
s = s.replace('XZZY', ' ')
M = [len(i) for i in s.split()]
print(max(M))  # - берем длину нашей подстроки и отнимаем 1, потом умножаем на 2. В данном случае длина 'XZZY' = 4, 4-1 = 3
               # 3*2 = 6. Получаем ответ: 1707, и к нему прибавляем 6. Конечный ответ: 1713
'''
# Ответ: 1713


# Тип 24 № 45258
# Текстовый файл состоит из символов A, B и C.
#
# Определите максимальное количество идущих подряд пар символов AB или CB в прилагаемом файле.
# Искомая подпоследовательность должна состоять только из пар AB, или только из пар CB, или только из пар AB и CB
# в произвольном порядке следования этих пар.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('107_24.txt').readline()
s = s.replace('AB', '*').replace('CB', '*')
for i in 'ABC':
    s = s.replace(i, ' ')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 65


# № 7094 OpenFIPI (Уровень: Базовый)
# Текстовый файл состоит из символов A, C, D, F и U.Определите максимальное количество идущих подряд пар символов вида
# согласная + гласная в прилагаемом файле.
#
# Для выполнения этого задания следует написать программу.
'''
import itertools as it
M = []
for s in it.product('ACDFU', repeat = 2):
    if s[0] in 'AU' and s[1] in 'CDF':
        M.append(''.join(s))

s = open('pXoVGfxeN.txt').readline()
for i in M:
    s = s.replace(i, '*')
for i in 'ACDFU':
    s = s.replace(i, ' ')
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 173


# № 5677 Вариант 09.01.23 (Уровень: Средний)
# (А. Игнатюк) В текстовом файле дана последовательность латинских букв.
# Необходимо найти в этой последовательности самую длинную подстроку, состоящую из комбинации DAD,
# при этом первый и последний элементы могут быть неполными.
# Например ADDADDADDADD.
'''
s = open('jsU5WUeqk.txt').readline()
f = 'DDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDADDA'
print(len(f))
'''
# Ответ: 99

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# № 7853 Danov2304 (Уровень: Сложный)
#  (А.Богданов) Текстовый файл состоит из символов латинского алфавита и десятичных цифр.
#  Определите максимальное количество идущих подряд символов, среди которых любые два символа из набора N,O,T
#  в различных комбинациях (с учётом повторений) не стоят через один символ
#  (который может быть любым). Например, ТEN или NUТ не могут быть в искомой подстроке.
'''
import itertools as it
M = []
for s in it.product('QWERTYUIOPASDFGHJKLZXCVBNM0123456789', repeat = 3):
    if s[0] in 'NOT' and s[2] in 'NOT':
        M.append(''.join(s))

s = open('24_7853.txt').readline()
for i in M:
    s = s.replace(i, ' ')
M = [len(i) for i in s.split()]
print(max(M) + (3-1)*2)  # Берем длину нашей подстроки и отнимаем 1, потом умножаем на 2.
'''
# Ответ: 1461

# endregion Урок: ******************************************************************************

import useful
print(useful.who_is_name())

# todo:    Александр2   = [1, 2, 3, 4, 5, 6, 8, 9.1, 12, 14+, 15+, 16, 17, 18, 19-21, 23, 24, 25.2]
# todo: Александр2 КЕГЭ = [9, 15, 17, 24]
# на прошлом уроке: Разбирали домашку по 9, 17, 24 номерам. Александр решал задачи сам. На следующем уроке добавить +10 минут.
# на следующем уроке:







