# region Домашка: ******************************************************************************

# Тип 17 № 37350
'''
# В файле содержится последовательность из 10000 целых положительных чисел.# Каждое число не превышает 10000. Определите и запишите в ответе сначала количество пар элементов последовательности,
# у которых сумма нечётна, а произведение делится на 3, затем максимальную из сумм элементов таких пар.# В данной задаче под парой подразумевается два различных элемента последовательности.
# Порядок элементов в паре не важен.
M = [int(i) for i in open('17.txt')]count = 0
maxi = 0for i in range(0, len(M)):
    for j in range(i+1, len(M)):        if (M[i] + M[j]) % 2 != 0:  # у которых сумма нечётна
            if (M[i] * M[j]) % 3 == 0:  # а произведение делится на 3                count += 1
                maxi = max(maxi, M[i] + M[j])print(count, maxi)
'''
# Ответ: 13931722 19993

# Тип 17 № 37368
'''# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности,# у которых сумма элементов кратна 60 и хотя бы один элемент из пары делится на 40, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен.
M = [int(i) for i in open('17.txt')]count = 0
maxi = 0for i in range(0, len(M)):
    for j in range(i+1, len(M)):        if (M[i] + M[j]) % 60 == 0:  # у которых сумма элементов кратна 60
            if M[i] % 40 == 0 or M[j] % 40 == 0:  # и хотя бы один элемент из пары делится на 40                count += 1
                maxi = max(maxi, M[i] + M[j])print(count, maxi)
'''
# Ответ: 29278 19860

# Тип 17 № 45251
'''
# В файле содержится последовательность натуральных чисел. Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.# Определите количество пар последовательности, в которых хотя бы одно число делится на минимальный элемент последовательности, кратный 21.
# Гарантируется, что такой элемент в последовательности есть. В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
M = [int(i) for i in open('17.txt')]
N = [int(i) for i in open('17.txt') if int(i) % 21 == 0]  # уже решали, но повторить лишним не будет) 
count = 0maxi = 0
for i in range(0, len(M)-1):    if M[i] % min(N) == 0 or M[i+1] % min(N) == 0:
        count += 1        maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
'''
# Ответ: 126 171120


# Тип 17 № 39764
'''# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём тройкой три идущих подряд элемента последовательности. 
Определите количество троек чисел таких, которые могут являться сторонами прямоугольного треугольника.# В ответе запишите два числа: сначала количество найденных троек, а затем — максимальную сумму элементов таких троек.
# Если таких троек не найдётся — следует вывести 00.
M = [int(i) for i in open('17.txt')]count = 0
maxi = 0for i in range(0, len(M)-2):
    if M[i+2]**2 == (M[i]**2 + M[i+1]**2):  #  которые могут являться сторонами прямоугольного треугольника        count += 1
        maxi = max(maxi, M[i] + M[i+1] + M[i+2])print(count, maxi)
'''
# Ответ: 0 0


# Тип 25 № 37130
'''
# Напишите программу, которая перебирает целые числа, большие 600000, в порядке возрастания и ищет среди них такие,# среди делителей которых есть хотя бы одно число, оканчивающееся на 7, но не равное 7 и самому числу.
# Необходимо вывести первые 5 таких чисел, и наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу.#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число,# затем — наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу.
# Строки выводятся в порядке возрастания найденных чисел.
def D(x):    dl = set()
    for j in range(2, int(x ** 0.5) + 1):        if x % j == 0:
            if j % 10 == 7 and j != 7:                dl.add(j)
            if (x // j) % 10 == 7:                dl.add(x // j)
            if len(dl) > 10:                return sorted(dl)
    return sorted(dl)k = 0
for x in range(600000+1, 100000000):    dl = D(x)
    if len(dl) != 0:        print(x, dl[0])
        k += 1        if k == 5:
            break'''
# Ответ:
# 600001 437
# 600002 47
# 600003 1227
# 600005 217
# 600012 16667



# Тип 25 № 47229
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:#
# — символ «?» означает ровно одну произвольную цифру;# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
## Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.
my_dict = {}
for x in '0123456789':    for y in range(0, 1000):
        A = int(f'1{x}2139{y}4')        if A <= 10**10:
            if A % 2023 == 0:                my_dict[A] = A // 2023
for key in sorted(my_dict):    print(key, my_dict[key])
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048



# Тип 25 № 45259
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23
my_dict = {}
for x in '0123456789':
    for y in '0123456789':
        A = int(f'12345{x}7{y}8')
        if A <= 10**9:
            if A % 23 == 0:
                my_dict[A] = A // 23

for key in sorted(my_dict):
    print(key, my_dict[key])
    
    
# Вариант 2
for i in range(123450708, 123460000):
    if (i % 23 == 0) and (i % 10 == 8) and ((i//100) % 10 == 7):
        print(i, i//23)
'''
# Ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816




# Тип 25 № 39254
'''
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.#
# Найдите 5 наименьших натуральных чисел, превышающих 500_000_000, для которых 0 < M(N) < N.# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
def D(x):
    dl = set()    for j in range(2, int(x**0.5)+1):
        if x % j == 0:            dl.add(j)
            dl.add(x//j)            if len(dl) > 10:
                return sorted(dl)    return sorted(dl)
k = 0
for n in range(500_000_000+1, 600_000_000):    dl = D(n)
    if len(dl) >= 5:        M = dl[0] * dl[1] * dl[2] * dl[3] * dl[4]
        if 0 < M < n:            print(n, M)
            k += 1            if k == 5:
                break'''
# Ответ:
# 1008
# 1797092
# 48408867
# 1800
# 1156923

# Тип 25 № 28121
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [2422000; 2422080], простые числа.# Выведите все найденные простые числа в порядке возрастания, слева от каждого числа выведите его номер по порядку, считая,
# что первое найденное число имеет номер «1», второе — «2», и т.д.
def F(x):    
    for j in range(2, x):
        if x % j == 0:            
        return False
    return True
    
k = 1
for x in range(2422000, 2422080+1):    
if F(x) == True:
    k += 1
print(k, x)    
'''
# Ответ:
# 1 2422027# 2 2422033
# 3 2422037
# 4 2422073

# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Тип 9 № 38943
'''
# Откройте файл электронной таблицы, содержащей в каждой строке три натуральных числа.
# Определите сколько среди заданных троек чисел таких, которые могут быть сторонами остроугольного треугольника.
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if M[2] ** 2 < M[0] ** 2 + M[1] ** 2:
        count += 1
print(count)
'''
# Ответ: 1074

# Методы строк split() и join()
'''
s = '192.32.13.213'
M = s.split('.')
print(M)

print([int(i) for i in s.split('.')])


s = '192        32 13     213'
M = s.split()
print(M)

r = ' $ '.join(M)
print(r)
'''

# Тип 9 № 27406
'''
# Откройте файл электронной таблицы, содержащей вещественные числа — результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Найдите разность между максимальным значением температуры и её средним арифметическим значением. В ответе запишите только целую часть получившегося числа.

A = []
for s in open('9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]
    A += M

print(max(A) - (sum(A) / len(A)))
'''
# Ответ: 14


# Тип 9 № 36864
'''
# Электронная таблица содержит результаты ежечасного измерения температуры воздуха на протяжении трёх месяцев.
# Определите, сколько раз за время измерений минимальная суточная температура оказывалась ниже среднесуточной на 8 и более градусов.

count = 0
A = []
for s in open('9.txt'):
    M = [float(i) for i in s.replace(',', '.').split()]

    if (sum(M)/len(M)) - min(M) >= 8:
        count += 1
print(count)
'''
# Ответ: 51


# Тип 9 № 46967
'''
# В каждой строке электронной таблицы записаны четыре натуральных числа.
# Определите, сколько в таблице таких четвёрок, из которых можно выбрать три числа,
# которые не могут быть сторонами никакого треугольника, в том числе вырожденного
# (вырожденным называется треугольник, у которого сумма длин двух сторон равна длине третьей стороны).

count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if M[0] + M[1] < M[3]:
        count += 1
print(count)
'''
# Ответ: 3094


# Тип 24 № 27687
'''
# Текстовый файл состоит не более чем из 10**6 символов X, Y и Z.
# Определите длину самой длинной последовательности, состоящей из символов Y.
# Хотя бы один символ Y находится в последовательности.
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

# Вариант 1
s = open('24.txt').readline()
count = 1  # счетчик промежуточных длин последовательностей
max_count = 0  # счетчик ждя хранения наибольшей
for i in range(0, len(s)-1):
    if s[i] == 'Y' and s[i+1] == 'Y':
        count += 1
        max_count = max(max_count, count)
        # if max_count < count:
        #     max_count = count
    else:
        count = 1
print(max_count)

# Вариант 2
print(max([len(i) for i in open('24.txt').readline().replace('X', ' ').replace('Z', ' ').split()]))

# Вариант 3
s = open('24.txt').readline()
s = s.replace('X', ' ').replace('Z', ' ')
M = [len(i) for i in s.split()]
print(M)
print(max(M))

# Вариант 4 - просто исследовать строку через ctrl + F
print(open('24.txt').readline())
print(len('YYYYYYYYYY'))
'''
# Ответ: 10



# Тип 24 № 36037
'''
# Текстовый файл состоит не более чем из 1 200 000 символов X, Y, и Z.
# Определите максимальное количество идущих подряд символов, среди которых нет подстроки XZZY.
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

print(3 + max([len(i) for i in open('24.txt').readline().replace('XZZY', ' ').split()]) + 3)
print(3 + max([len(i) for i in 'XXXXZZYYYYYYYXZZYYYY'.replace('XZZY', ' ').split()]) + 3)

# XXXXZZYYYYYYYXZZYYYY
# XXX____YYYYYY____YYY
#     ZZYYYYYYYXZZ
'''
# Ответ: 1713

# Тип 24 № 37159
'''
# Текстовый файл состоит не более, чем из 10*7 строчных букв английского алфавита.
# Найдите максимальную длину подстроки, в которой символы «a» и «d» не стоят рядом.

print(1 + max([len(i) for i in open('24.txt').readline().replace('ad', ' ').replace('da', ' ').split()]) + 1)
'''
# Ответ: 2252





# endregion Урок: ******************************************************************************


# todo: Александр_2 = [2, 5, 6, 8, 12, 14+, 15+, 16, 17, 23, 25.2]
# на прошлом уроке: На примерах посмотрели 9 номер через Пайтон и начали разбирать 24 номер.
# на следующем уроке:







