# region Домашка:  **************************************************


# endregion Домашка: **************************************************


# region Урок:  **************************************************

# Тип 2 № 18483 Добавить в вариант
# Логическая функция F задаётся выражением ((y → w) ≡ (x → ¬z)) ∧ (x ∨ w).
#
# Дан частично заполненный фрагмент, содержащий неповторяющиеся строки таблицы истинности функции F.
#
# Определите, какому столбцу таблицы истинности соответствует каждая из переменных x, y, z, w.
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((y <= w) == (x <= (not z))) and (x or w)
                print(x, y, z, w, F)
'''


# № 6596 Пробник ИМЦ СПб (Уровень: Базовый)
# Алгоритм вычисления функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = 1, если n = 1
# F(n) = F(n - 1) * (2*n - 3), если n > 1.
#
# Чему равно значение выражения F(516) / F(513)?
'''
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return F(n - 1) * (2*n - 3)

print(F(516) // F(513))
'''
# Ответ: 1083202575


# № 5954 (Уровень: Базовый)
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = 1 при n = 1;
# F(n) = n * F(n - 1), если n > 1.
#
#  Чему равно значение выражения (F(2023) - F(2022)) / F(2020)?
'''
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n * F(n - 1)

print((F(2023) - F(2022)) / F(2020))   # RecursionError: maximum recursion depth exceeded
'''
# (F(2023) / F(2020)) - (F(2022) / F(2020))
# F(2023) = 2023 * F(2022)
# F(2022) = 2022 * F(2021)
# F(2021) = 2021 * F(2020)   / F(2020)

# result 2023 * 2022 * 2021


# F(2022) = 2022 * F(2021)
# F(2021) = 2021 * F(2020)   / F(2020)

# result 2022 * 2021

# print(2023 * 2022 * 2021 - 2022 * 2021)

# Показать ответ: 8262826164




# № 5168 (Уровень: Средний)
# (Д. Статный) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = n, если n ≥ 10 000,
# F(n) = F(n+1) + n**2 - 3*(n-1), если n < 10 000 и n – чётное.
# F(n) = F(n+2) + 5*n - (n-1), если n < 10 000 и n – нечётное.
#
# Чему равно значение выражения F(90) - F(99)?

# F(90) = F(91) + 90**2 - 3*(90-1)
# F(91) = F(93) + 5*91 - (91-1)
# F(93) = F(95) + 5*93 - (93-1)
# F(95) = F(97) + 5*95 - (95-1)
# F(97) = F(99) + 5*97 - (97-1)  / F(99)

# print((90**2 - 3*(90-1)) + (5*91 - (91-1)) + (5*93 - (93-1)) + (5*95 - (95-1)) + (5*97 - (97-1)))

# Показать ответ: 9341


# Тип 23 № 16898
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Прибавить 3
#
# Сколько существует программ, которые преобразуют исходное число 2 в число 14
# и при этом траектория вычислений не содержит чисел 5 и 10?
'''
def F(a, b):
    if a > b or a == 5 or a == 10:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a+3, b)

print(F(2, 14))

# Вариант 2
def F(a, b):
    if a >= b or a == 5 or a == 10:
        return a == b
    else:
        return F(a+1, b) + F(a*2, b) + F(a+3, b)

print(F(2, 14))
'''
# Ответ: 26




# Тип 23 № 15959
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Умножить на 3
#
# Сколько существует программ, которые преобразуют исходное число 3 в число 50
# и при этом траектория вычислений содержит число 15 и не содержит числа 33?
'''
def F(a, b):
    if a >= b or a == 33:
        return a == b
    else:
        return F(a+1, b) + F(a*2, b) + F(a*3, b)

print(F(3, 15) * F(15, 50))
'''
# Ответ: 121


# Тип 23 № 7315
# У исполнителя три команды, которым присвоены номера:
#
# 1. прибавь 1
# 2. сделай чётное
# 3. сделай нечётное.
#
# Сколько существует программ, которые число 1 преобразуют в число 15?
'''
def F(a, b):
    if a >= b:
        return a == b
    else:
        return F(a+1, b) + F(a*2, b) + F(a*2 + 1, b)

print(F(1, 15))
'''
# Ответ: 83


# Тип 5 № 10380
# Автомат получает на вход четырёхзначное число. По этому числу строится новое число по следующим правилам.
#
# 1. Складываются отдельно первая и вторая цифры, вторая и третья цифры, а также третья и четвёртая цифры.
# 2. Из полученных трёх чисел выбираются два наибольших и
# записываются друг за другом в порядке неубывания без разделителей.
#
# Пример. Исходное число: 9575. Суммы: 9 + 5 = 14; 5 + 7 = 12; 7 + 5 = 12. Наибольшие суммы: 14, 12. Результат: 1214.
#
# Укажите наибольшее число, при обработке которого автомат выдаёт результат 1517.
'''
for x in range(1000, 10000):
    M = [int(i) for i in str(x)]
    N = sorted([M[0] + M[1], M[1] + M[2], M[2] + M[3]])
    r = str(N[1]) + str(N[2])
    if r == '1517':
        print(x)
'''
# Ответ: 9878


# Тип 5 № 15943
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится двоичная запись числа N.
# 2. В конец записи (справа) добавляется (дублируется) последняя цифра.
# 3. Складываются все цифры полученной двоичной записи.
# В конец записи (справа) дописывается остаток от деления суммы на 2.
# 4. Результат переводится в десятичную систему и выводится на экран.
#
# Пример. Дано число N = 13. Алгоритм работает следующим образом:
# 1. Двоичная запись числа N: 1101.
# 2. Дублируется последняя цифра, новая запись 11011.
# 3. Сумма цифр полученной записи 4, остаток от деления на 2 равен 0, новая запись 110110.
# 4. На экран выводится число 54.
#
# Какое наименьшее число, большее 105, может появиться на экране в результате работы автомата?
'''
for n in range(1, 10000):
    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.
    s = s + s[-1]  # 2. (дублируется) последняя цифра
    s = s + str(s.count('1') % 2)  #  can only concatenate str (not "int") to str
    # 3. (справа) дописывается остаток от деления суммы на 2
    r = int(s, 2)  # 4. Результат переводится в десятичную систему и выводится на экран.
    if r > 105:
        print(r)
        break
'''
# Ответ: 111



# endregion Урок:  **************************************************


# todo: Кирилл = [1, 2, 3, 4, 5, 8, 12, 13, 14+, 15, 16, 19-21, 22, 23, 25.1], на следующем уроке:
# на прошлом уроке: Обсуждали 23 номер и 16 номер с альтернативными решениями, повторили два типа 5 номера
# на следующем уроке:
