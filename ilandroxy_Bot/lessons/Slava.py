'''
#Тип 2 № 40718
#Логическая функция F задаётся выражением ((x → y) ∧ (z ∨ w)) → ((x ≡ w) ∨ (y ∧ ¬z))
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((x <= y) and (z or w)) <= ((x == w) or (y and (not(z))))
                if F == False:
                    print(x, y, z, w, F)
'''

'''  
#Тип 2 № 16878
#Логическая функция F задаётся выражением (x≡¬y)→(z≡(y∨w))
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (x == (not(y))) <= (z == (y or w))
                if F == False:
                    print(x, y, z, w, F)
'''

'''
#Тип 2 № 46960
#Логическая функция F задаётся выражением (¬y → (z ≡ w)) ∧ ((z → x) ≡ w)
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((not(y)) <= (z == w)) and ((z <= x) == w)
                if F == True:
                     print(x, y, z, w, F)
'''


# Тип коллекции - Списки (массивы) list
A = []  # пустой список
print(len(A))   # len() функция выводит длину списка (строки) - кол-во элементов в списке

M = [1, 2, 3]
#    0  1  2
print(M, type(M))

# упорядоченный - индексируемые (у каждого элемента списка есть свой порядковый номер - индекс) # индексы считаются с нуля
# list является изменяемым типом данных
# доступ к элементам осуществляется через их индексы


B = [5, 7, 8, 4, 5, 3, 2, 5]  #  len(B) == 8
#    0  1  2  3  4  5  6  7

print(B[3])

# B[3] = '*'
# print(B)

# Цикл for удобен для работы с Списками
"""
for x in B:
    print(x, end=" ")
print()


for i in range(0, len(B)):   #  [0, 8)
    print(B[i], end=' ')
print()

for i in range(0, len(B)):   #  [0, 8)
    B[i] = B[i] ** 2
print(B)
"""


# Функции работы со списками
"""
B = [1, 2, 3, 4, 3, 4, 3, 4, 5]
print("Длина списка (кол-во элементов): ", len(B))
print("Сумма элементов списка: ", sum(B))
print("Максимальный элемент списка: ", max(B))
print("Минимальный элемент списка: ", min(B))

V = set(B)  #  Перевод в тип коллекций множество - позволяет откинуть повторяюшиеся элементы 
print(B)
print(V)



x = int(input('x: '))
M = []
summ = 0
while x > 0:
    summ += x % 10
    M.append(x % 10)
    x //= 10
print(summ, sum(M))
"""




# Методы списков
# Методы - это те же функции, но направленные на определенный объект (тип данных)
"""
M = [4, 5, 6, 7, 4, 5, 6, 3, 4]
print(M)
M.append(5)  # добавить в конец списка элемент
M.append(5)
print(M)

print(M.count(5))  # возвращает кол-во вхождений в список
print(M.index(5))  # возвращает индекс первого найденного элемента

M.reverse()  # развернули списочек
print(M)

M.sort()  # отсортировал по возрастанию
print(M)
M.reverse()  # развернул по убыванию
print(M)

x = M.pop(10)  # взял элемент по идексу - забрал
print(M, x)

A = M  # через такую конструкцию мы не копируем элементы списка, а создаем связь между списка - они одинаковые
B = M.copy()  # только метод copy() позволяет сделать копию данных списка
print(A, M, B)

M.clear()  # очищает список до пустого
print(A, M, B)
"""


# Списочные выражения

# Задача - ввести список с клавиатуры
"""
n = int(input('n: '))
M = []
for i in range(n):
    M.append(int(input(f'x[{i}]:')))
print(M)



A = [i for i in 'text']
print(A)

A = [i*4 for i in 'text']
print(A)

A = [int(i) for i in '123456789']
print(A)

A = [int(i) for i in '123456789' if int(i) % 2 == 0]  # ввели в список только четные элементы строки
print(A)

A = [int(i) for i in input("Введите цифры: ")]  # ввели в список только четные элементы строки
print(A)

ip = '192.34.234.1'
M = ip.split('.')  # метод split() разбивает строку на список строчных значений (по выбранному элементу)
print(M)

ip = '192.34.234.1'
M = [int(i) for i in ip.split('.')]
print(M)

A = [int(i) for i in input("Введите цифры через пробелы: ").split()]  # ввели в список только четные элементы строки
print(A)


A = [i for i in range(0, 10)]  # [0, 10)
print(A)

A = [i for i in range(0, 10) if i % 2 != 0]  # [0, 10)
print(A)
"""


# Тип 14 № 15926
"""
# Значение выражения 36**7 + 6**19 − 18? записали в системе счисления с основанием 6.
#
# Сколько цифр 0 содержится в этой записи?

x = 36**7 + 6**19 - 18
M = []
while x > 0:
    M.append(x % 6)
    x //= 6
M.reverse()
print(M, M.count(0))
"""
# Ответ: 6




# Тип 14 № 39243
"""
# Значение выражения 4**34 + 5*4**22 + 4**13 + 2*4**9 + 82 записали в системе счисления с основанием 16.
# Сколько разных цифр встречается в этой записи?

x = 4**34 + 5*4**22 + 4**13 + 2*4**9 + 82
n = 16
M = []
while x > 0:
    M.append(x % n)
    x //= n
M.reverse()
print(M)

M = set(M)
print(M, len(M))
"""
# Ответ: 6



"""
import string
print(string.ascii_uppercase) # метод возвращает строку английского алфавита (заглавные)

Alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
x = int(input('Введите 10-ное число: '))  # 7835628376452938674
n = int(input('Введите систему: '))
M = []
while x > 0:
    M.append(Alphabet[x % n])  # получая отстаток от деления - остаток будет являться индексом в Alphabet
    x //= n
M.reverse()
print(M)

s = ''.join(M)  # метод "".join() - метод строк который склеивает строчный список в строку 
print(s)
"""