
# region Домашка: ******************************************************************************


# endregion Домашка:  ******************************************************************************



# region Урок:  ******************************************************************************


# № 5434 Джобс 21.12.22 (Уровень: Сложный)

# На вход редактору подается строка, содержащая 33 единицы, 33 двойки и некоторое количество троек. Порядок цифр в строке неизвестен.
#
# Исполнителю для выполнения дан следующий алгоритм
# ПОКА нашлось(11) или нашлось(22) или нашлось(13) или нашлось(23)
#  заменить(11, 2)
#  заменить(22, 1)
#  заменить(13, 2)
#  заменить(23, 1)
# КОНЕЦ ПОКА

# После выполнения алгоритма исполнителем получена строка, имеющая минимально возможное числовое значение из возможных результатов работы алгоритма.
# Сколько троек должно быть в начальной строке? Если вариантов начальной строки несколько, выберите ту, в которой количество троек наименьшее

# Вариант 2

'''
import itertools as i

for s in i.product('213', repeat=66+1):
    s = ''.join(s)
    if s.count('3') == 1 and s.count('2') == 33 and s.count('1') == 33:
        print(s)
'''


# № 5129 /dev/inf 11.22 (Уровень: Средний)
'''
# На вход приведённой ниже программы поступает строка, начинающаяся с символа «>»,
# а затем содержащая 15 цифр 1, n цифр 2 и 16 цифр 3, расположенных в произвольном порядке.
#
# Определите натуральное значение n, при котором в полученной в результате работы алгоритма
# строке сумма числовых значений цифр строки будет кратна длине этой строки.

# ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>3)
    # ЕСЛИ нашлось (>1)
        # ТО заменить (>1, 22>)
    # ЕСЛИ нашлось (>3)
        # ТО заменить (>3, 13>)
    # ЕСЛИ нашлось (>2)
        # ТО заменить (>2, 1000>3)
# КОНЕЦ ПОКА

for n in range(1, 100):
    s = '>' + '1' * 15 + '2' * n + '3' * 16

    while '>1' in s or '>2' in s or '>3' in s:
        if '>1' in s:
            s = s.replace('>1', '22>', 1)
        if '>3' in s:
            s = s.replace('>3', '13>', 1)
        if '>2' in s:
            s = s.replace('>2', '1000>3', 1)

    if sum([int(i) for i in s[:-1]]) % len(s) == 0:
        print(n)
'''
# Ответ: 61


# Дана программа для исполнителя Редактор:
#
# Известно, что исходная строка A содержала ровно два нуля – на первом и на последнем месте, а также поровну единиц и двоек.
# После выполнения данной программы получилась строка B, содержащая 47 единиц и меньше 70 двоек.
# Какое наибольшее количество двоек может быть в строке B?
'''
import itertools

for x in range(68, 70, 2):
    for s in itertools.product('1222', repeat=x):
        print(''.join(s))
        if s.count('1') == s.count('2'):
            s = '0' + ''.join(s) + '0'
            print(s)

            while '00' not in s:
                s = s.replace('011', '20', 1)
                s = s.replace('022', '10', 1)
                s = s.replace('02', '110', 1)
                s = s.replace('01', '220', 1)
            if s.count('1') == 47 and s.count('2') < 70:
                print(s)
'''


# № 1245 Статград 26.04.2021 (Уровень: Сложный)
# Дана программа для редактора:
# ПОКА НЕ нашлось (00)
    # заменить (01, 210)
    # заменить (02, 320)
    # заменить (03, 3012)
# КОНЕЦ ПОКА
#
# Известно, что исходная строка начиналась с нуля и заканчивалась нулём, а между ними содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка, содержащая 26 единиц, 54 двойки и 48 троек. Сколько цифр было в исходной строке?
'''
for x in range(0, 50):
    for y in range(0, 50):
        for z in range(0, 50):
            s = '0' + '1' * x + '2' * y + '3' * z + '0'

            while '00' not in s:
                s = s.replace('01', '210', 1)
                s = s.replace('02', '320', 1)
                s = s.replace('03', '3012', 1)
            if s.count('1') == 26 and s.count('2') == 54 and s.count('3') == 48:
                print(x+y+z+2)
'''
# Ответ: 36


# № 4324 Пробный 06.2022 /dev/inf advanced (Уровень: Сложный)
# Исполнитель Редактор получает на вход строку цифр и преобразовывает её.
# Приведённую ниже программу применили к входной строке, состоящей из единицы, за которой следуют 105 нулей подряд.
# В результате работы Редактора получилось некоторое число, записанное в двоичной системе счисления.
# Определите сумму цифр в шестнадцатеричной записи получившегося числа.
#
# В ответе запишите сумму цифр шестнадцатеричной записи, записанную в десятичной системе счисления.
'''
s = '1' + '0' * 105
while '10' in s:
    if '100' in s:
        s = s.replace('100', '1011', 1)
    else:
        s = s.replace('10', '11', 1)

r = int(s, 2)
M = []
while r > 0:
    M.append(r % 16)
    r //= 16
M.reverse()

print(sum(M))
'''
# Ответ: 588


# На выполнение Редактору дана следующая программа:
#      ПОКА нашлось(111) или нашлось(222)
#            ЕСЛИ нашлось(111)
#            ТО заменить(111, 22)
#    ИНАЧЕ заменить(222, 11)
#    КОНЕЦ ЕСЛИ
#  КОНЕЦ ПОКА
#
# На вход программе подана строка из 203 единицы и 1 двойку. Найдите строку наибольшей длины, которая может получиться в результате работы алгоритма.

# import itertools
# maxi = -9999
# for s in itertools.product('12', repeat=204):
#     if s.count('2') == 1:
#         s = ''.join(s)
#
#         while '111' in s or '222' in s:
#             if '111' in s:
#                 s = s.replace('111', '22', 1)
#             else:
#                 s = s.replace('222', '11', 1)
#         if maxi < len(s):
#             maxi = len(s)
#             print(s, maxi)

# Ответ: 2212122

# print('23' * 80 + '22')
'''
s = '3' + '1' * 199 + '3'
print(s)
print(len(s))
while '12' in s or '13' in s:
    s = s.replace('12', '21', 1)
    s = s.replace('31', '23', 1)
    s = s.replace('13', '23', 1)
print(s, s.count('2'))
print(sum([int(i) for i in s]))
'''


# endregion Урок:  ******************************************************************************

# Слава
# todo: РЕШУ ЕГЭ = [1, 2, 5, 6, 8, 9, 12, 13, 14+, 15+, 16, 17, 18, 19, 20, 21, 23, 24+, 25.2]
# todo: КЕГЭ [1, 5, 8, 13] # рассмотреть: 6, 9, 22, 17 КЕГЭ
# на прошлом уроке: Прорешивали 12 номера сайте КЕГЭ, пришли к выводы, что itertools не решает всех задач.
# на следующем уроке:
