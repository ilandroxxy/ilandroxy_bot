
# region Домашка:

'''
# Задание 19.Тип 2 № 18483
# Логическая функция F задаётся выражением ((y → w) ≡ (x → ¬z)) ∧ (x ∨ w).
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((y <= w) == (x <= (not(z)))) and (x or w)
                if F == True: # и False
                    print(x, y, z, w, F)
#Ответ: yzwx
'''

'''
# Задание 21.Тип 6 № 47315

import turtle as t
t.speed(10)
t.left(90)
l = 30

t.color('black')
for _ in range(6):
    t.forward(7 * l)
    t.right(90)
    t.forward(7 * l)
    t.right(90)
t.pu()
for x in range(0, 8):
    for y in range(0, 8):
        t.goto(x * l, y * l)
        t.dot(3)
t.done()
# Ответ: 64
'''

'''
# Задание 11.Тип 6 № 47305

import turtle as t
t.speed(10)
t.left(90)
l = 30

t.color('black')
for _ in range(4):
    t.forward(9 * l)
    t.right(90)
    t.forward(7 * l)
    t.right(90)

t.pu()
for x in range(0, 8):
    for y in range(0, 10):
        t.goto(x * l, y * l)
        t.dot(3)
t.done()
# Ответ: 48
'''

'''
# Задание 15.Тип 6 № 47309

import turtle as t
t.speed(10)
t.left(90)
l = 30

t.color('red')
for _ in range(4):
    t.forward(8 * l)
    t.right(150)
    t.forward(8 * l)
    t.right(30)
t.pu()
for x in range(0, 5):
    for y in range(-9, 9):
        t.goto(x * l, y * l)
        t.dot(3)
t.done()
# Ответ: 24
'''

# Номера которые не получились:
'''
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# Черепахе был дан для исполнения следующий алгоритм:
#
# Повтори 10 [Направо 60 Вперёд 1 Направо 60 Вперёд 1 Направо 270]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать следует.

import turtle as t
t.left(90)
t.speed(10)
l = 60

for _ in range(12):
    t.right(60)
    t.forward(1 * l)
    t.right(60)
    t.forward(1 * l)
    t.right(270)

t.pu()
t.color('red')
for x in range(-6, 6):
    for y in range(2, -10, -1):
        t.goto(x * l, y * l)
        t.dot(3)

t.done()
'''

# Тип 6 № 47392
'''
# Повтори 6 [Вперёд 10 Направо 60]

import turtle as t
t.left(90)
t.speed(10)
l = 30

for _ in range(6):
    t.forward(10 * l)
    t.right(60)

t.pu()
t.color('red')
for x in range(0, 20):
    for y in range(-5, 18):
        t.goto(x * l, y * l)
        t.dot(3)

t.done()
'''


# Тип 5 № 16809 Добавить в вариант
# Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
#
# 1. Строится восьмибитная двоичная запись числа N.
# 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3. Полученное число переводится в десятичную запись.
# 4. Из нового числа вычитается исходное, полученная разность выводится на экран.
#
# Пример. Дано число N = 13. Алгоритм работает следующим образом.
#
# 1. Восьмибитная двоичная запись числа N: 00001101.
# 2. Все цифры заменяются на противоположные, новая запись 11110010.
# 3. Десятичное значение полученного числа 242.
# 4. На экран выводится число 242 − 13 = 229.
#
# Какое число нужно ввести в автомат, чтобы в результате получилось 133?

# Вариант 1
"""
for n in range(1, 255+1):
    temp = n

    M = []
    while temp > 0:
        M.append(temp % 2)
        temp //= 2
    while len(M) != 8:  # 1. Строится восьмибитная двоичная запись числа N.
        M.append(0)
    M.reverse()
    #print(M)

    for i in range(0, len(M)):  # 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
        if M[i] == 0:
            M[i] = 1
        else:
            M[i] = 0
    #print(M)

    r = 0
    M.reverse()
    for i in range(0, len(M)):  # 3. Полученное число переводится в десятичную запись.
        r += M[i] * 2 ** i
          
    r = r - n  # 4. Из нового числа вычитается исходное, полученная разность выводится на экран.
    
    if r == 133:
        print(n)
        break
"""


# Вариант 2
'''
for n in range(1, 255+1):
    s = bin(n)[2:]  # 1. Строится восьмибитная двоичная запись числа N.
    while len(s) != 8:
        s = '0' + s
    #print(s)

    s = s.replace('1', '*')
    s = s.replace('0', '1')   # 2. Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
    s = s.replace('*', '0')
    #print(s)

    r = int(s, 2)   # 3. Полученное число переводится в десятичную запись.

    r = r - n    # 4. Из нового числа вычитается исходное, полученная разность выводится на экран.

    if r == 133:
        print(n)
        break
'''
# Ответ: 61


# endregion Домашка:



# region Урок:

# Теория строк str (string)
'''
s1 = 'hello'
s = ' '
s2 = 'privet'
print(s1 + s + s2)  # конкатенации (склеивание строк)

print(s1 * 4)

print(s1 == s2)

x = 45  # int
print(s1 + str(x))

z = f'{x} есть число 45 типа str\n'  # строки поддерживают операции с f строками
print(z*3)

print(len(z))  # функция len() - возвращает длину строки
'''

# Работа с циклами над строками
'''
a = '12345678'
for x in a:
    print(x, end=' ')
print()

for i in range(0, len(a)):
    print(a[i], end=' ')
print()
'''

# срезы строк (списков)
'''
a = '98765432'
print(a[0], a[4])
print(a[0:5])  # срез позволяет получить подстроку из строки (права грань среза не попадает)
print(a[:5])  # все что слева от индекса 5

print(a[0:8:2])
print(a[::])
print(a[::-1])  # получили строку в обратном порядке

x = 8
s = bin(x)
print(s)
s = s[2:]
print(s)
'''

# Методы split() и join()
'''
ip = '123.42.54.245'
M = ip.split('.')  # метод split() - разделяет строку через выбранный символ на список элементов
print(M)

A = [int(i) for i in ip.split('.')]
print(A)


r = '.'.join(M)   # join - наоборот склеивает строчные элементы списка в строку через символ
print(r)
'''

# Методы строк
"""
s = 'отличный 1 сегодня 1  денек 1 '

print(s.upper())

s = s.replace('1', '2')  # меняет все "1" на "2"
print(s)

for i in range(0, s.count('2')):
    s = s.replace('2', '1', 1)  # меняет первую "2" на "1"
    print(s)

print(s.count('1'))  # возвращает кол-во элементов встречаемых в строке

print(s.index('1'), s.rindex('1'))  # возвращаем индекс первого найденного элемента слева и справа
"""

# Тип 12 № 27272
'''
# Дана программа для Редактора:
#
# НАЧАЛО
# ПОКА нашлось (111)
#   заменить (111, 2)
#   заменить (222, 11)
# КОНЕЦ ПОКА
# КОНЕЦ
#
# К исходной строке, содержащей более 60 единиц и не содержащей других символов, применили приведённую выше программу.
# В результате получилась строка 2211. Какое наименьшее количество единиц могло быть в исходной строке?

for x in range(61, 1000):
    s = '1' * x
    while '111' in s:
        s = s.replace('111', '2', 1)
        s = s.replace('222', '11', 1)

    if s == '2211':
        print(x)
        break
'''
# Ответ: 64


# endregion Урок:


# todo: Слава = [2, 5, 6, 14], на следующем уроке: Разбираем номера 8, 12 (12 начали на прошлом уроке - решили один номер)