"""
НАЧАЛО

    ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)

        заменить (01, 2302)

        заменить (02, 10)

        заменить (03, 201)

    КОНЕЦ ПОКА

КОНЕЦ

Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки.
После выполнения данной программы получилась строка, содержащая 40 единиц, 10 двоек и 8 троек.
Сколько единиц было в исходной строке?
"""
"""
for x in range(0, 40):
    for y in range(0, 40):
        for z in range(0, 40):
            s = '0' + '1' * x + '2'* y + '3' * z
            j = s
            while '01' in s or '02' in s or '03' in s:
                s = s.replace('01', '2302', 1)
                s = s.replace('02', '10', 1)
                s = s.replace('03', '201', 1)
            if s.count('1') == 40 and s.count('2') == 10 and s.count('3') == 8:
                print(j.count('1'))
"""
"""
Борис составляет 6-буквенные коды из букв Б, О, Р, И, С. Буквы Б и Р нужно обязательно использовать ровно по одному разу, букву 
С можно использовать один раз или не использовать совсем,
буквы О и И можно использовать произвольное количество раз или не использовать совсем. 
Сколько различных кодов может составить Борис?
"""
'''
s = 'БОРИС'
k = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        temp = a + b + c + d + e + f
                        if temp.count('Б') == 1 and temp.count('Р') == 1:
                            if temp.count('С') == 1 or temp.count('С') == 0:
                                #print(temp)
                                k += 1
print(k)
'''

def F(n):
    n += 2
    return n

x = F(4)
print(x)


# Тип 16 № 4849
# Алгоритм вычисления значения функции F(n). где n - натуральное число, задан следующими соотношениями:
#
# F(1)= 1;
# F(2)=1;
#
# F(n) = F(n-2) * n при n >2.
#
# Чему равно значение функции F(7)? В ответе запишите только натуральное число.


def F(n):
    if n > 2:
        return F(n-2) * n  # F(n) = F(n-2) * n при n >2.
    if n == 1:
        return 1  # F(1)= 1;
    if n == 2:
        return 1  # F(2)=1;

print(F(7))
