# region Домашка: ******************************************************************************

# Тип 25 № 27854
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [
# 110203; 110245], числа, имеющие ровно четыре различных чётных натуральных делителя (при этом количество нечётных
# делителей может быть любым). Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на
# экране с новой строки. Делители в строке должны следовать в порядке возрастания.
'''
def F(x):
    D = set()
    for j in range(1,int(x**0.5) + 1):
        if x % j == 0:
            if j % 2 == 0:
                D.add(j)
            if (x//j) % 2 == 0:
                D.add(x//j)
    return sorted(D)
for x in range(110203,110245 + 1):
    D = F(x)
    if len(D) == 4:
        print(*D)
'''
# Ответ:
# 2 4 55102 110204
# 2 14 15746 110222
# 2 6 36742 110226
# 2 22 10022 110242

# endregion Домашка: ******************************************************************************



# region Урок: ******************************************************************************

# Тип 25 № 29673
# Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Найдите все натуральные числа, принадлежащие отрезку [123456789; 223456789] и имеющие ровно три нетривиальных
# делителя. Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.
'''
def F(x):
    D = set()
    if round(x**0.5) == (x ** 0.5):  # если у числа есть квадратный корень (целый), то кол-во делителей для такого числа - нечетное
        for j in range(2, int(x**0.5) + 1):  # не равный единице и самому числу
            if x % j == 0:
                D.add(j)
                D.add(x//j)
    return sorted(D)

for x in range(123456789, 223456789 + 1):
    D = F(x)
    if len(D) == 3:
        print(x, max(D))
'''
# Ответ:
# 131079601 1225043
# 141158161 1295029
# 163047361 1442897



# Тип 25 № 36880 i
# Найдите все натуральные числа N, принадлежащие отрезку [400_000_000; 600_000_000], которые можно
# представить в виде N=2**m * 3**n, где m — чётное число, n — нечётное число. В ответе запишите все найденные числа
# в порядке возрастания.

# print(600_000_000)
# print(2**28)  # m = 28
# print(3 ** 17)  # n = 17
'''
R = []
for m in range(0, 28+1, 2):
    for n in range(1, 17+1, 2):
        N=2**m * 3**n
        if 400_000_000 <= N <= 600_000_000:
            R.append(N)

for x in sorted(R):
    print(x)
'''
# Ответ:
# 408146688
# 452984832
# 516560652
# 573308928


# Тип 25 № 47229 i
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10,
# найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.
'''
# print(10**10)
# print('1?2139***4')
R = []
for x in range(0, 10):  # [0, 10) - ?
    for y in range(0, 1000):  # [0, 1000) - *
        A = int(f'1{x}2139{y}4')
        if A % 2023 == 0:
            R.append([A, A // 2023])
for x in sorted(R):
    print(*x)
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048


# endregion Урок: ******************************************************************************


# todo: Булат = [2, 8, 10, 12, 14+, 15, 16, 25]
# на прошлом уроке: Первую половину урока повторяли 25 номер на простые делители, потом добивали задачи с аналитическим решением и маски.
# на следующем уроке:
