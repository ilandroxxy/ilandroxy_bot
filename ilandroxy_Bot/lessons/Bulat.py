# region Домашка:  ******************************************************************************


# endregion Домашка: ******************************************************************************


# region Урок:  ******************************************************************************

# № 8149 /dev/inf 05.23 (Уровень: Базовый)
# (А. Рогов) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр в двоичной записи числа делится на 3, то к этой записи дописываются две первые двоичные цифры;
# б) если сумма цифр в двоичной записи числа не делится на 3, то к этой записи слева дописывается двоичная запись
# утроенного остатка от деления суммы цифр в двоичной записи числа на 3.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Укажите максимальное число N, после обработки которого с помощью этого
# алгоритма получается число R, не большее 60.
'''
for n in range(1, 1000):
    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.
    # if s.count('1') % 3 == 0:
    if sum([int(i) for i in s if i.isdigit()]) % 3 == 0:  # а) если сумма цифр в двоичной записи числа делится на 3,
        s = s + s[:2]   #     то к этой записи дописываются две первые двоичные цифры;
    else:   # # б) если сумма цифр в двоичной записи числа не делится на 3,
        s = bin(3 * (s.count('1') % 3))[2:] + s  # то к этой записи слева дописывается двоичная запис утроенного остатка от деления суммы цифр в двоичной записи числа на 3.
    r = int(s, 2)  # 3. Результат переводится в десятичную систему и выводится на экран.
    if r <= 60:
        print(n)
'''
# Показать ответ: 14


#
# № 7470 (Уровень: Средний)
# (С. Якунин) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится семеричная запись числа N.
# 2. К этой записи дописывается разряд по следующему правилу:
# а) если семеричная запись оканчивается чётной цифрой, то к семеричной записи слева дописывается 6;
# б) если семеричная запись оканчивается нечётной цифрой, то к семеричной записи слева дописывается 5;
# Полученная таким образом запись является семеричной записью числа R.
#
# Для скольких N из промежутка [343; 2401] значение R больше 14500?
'''
count = 0
for n in range(342, 2401+1):

    M = []
    while n > 0:
        M.append(n % 7)    # 1. Строится семеричная запись числа N.
        n //= 7
    M.reverse()

    if M[-1] % 2 == 0:  # а) если семеричная запись оканчивается чётной цифрой,
        M = [6] + M  # то к семеричной записи слева дописывается 6
    else:
        M = [5] + M  # то к семеричной записи слева дописывается 5

    R = [str(i) for i in M]
    s = ''.join(R)  # Полученная таким образом запись является семеричной записью числа R.
    r = int(s, 7)   # перевод из семиричной

    if r > 14500:
        count += 1
print(count)
'''
# Показать ответ: 1177


# № 8469 (Уровень: Базовый)
# (В. Рыбальченко) При регистрации в компьютерной системе каждому пользователю выдаётся идентификатор,
# состоящий из 33 символов и содержащий только символы из 18-буквенного набора.
# В базе данных для хранения сведений о каждом пользователе отведено одинаковое целое число байт,
# при этом для хранения сведений о 768 пользователях используется 21 Кбайт.
# Для каждого пользователя хранятся идентификатор и дополнительные сведения.
# Каждый символ в идентификаторе кодируется одинаковым и минимально возможным количеством бит.
# На хранение идентификатора отведено минимальное возможное целое количество байт.
# Сколько байт отведено для хранения дополнительных сведений о пользователе?
'''
symbols = 33
alphabet = 18
i = 5
bit = symbols * i
# print(bit / 8)
byte = 21    #  идентификатор

I = (21 * 2**10) / 768  #  идентификатор + допы
# допы равны:
print(I - byte)
'''
# Показать ответ: 7



#
# № 6924 (Уровень: Базовый)
# (Д. Статный) При регистрации в компьютерной системе каждому объекту присваивается идентификатор,
# состоящий из некоторого количества символов и содержащий только десятичные цифры и символы
# из 4180-символьного специального алфавита (строчные и прописные). В базе данных для хранения
# каждого идентификатора отведено одинаковое и минимально возможное целое число байт.
# При этом используется посимвольное кодирование идентификаторов,
# все символы кодируются одинаковым и минимально возможным количеством бит.

# Для хранения сведений о 2048 пользователях потребовалось 604 Кбайта.
# Какова максимально допустимая длина идентификатора?
'''
alphabet = 4180 * 2
print(2**14, alphabet)
i = 14

# bit = i * symbols


byte = (604 * 2 ** 10) / 2048
bit = byte * 8
symbols = bit / i
print(symbols)
'''
# Показать ответ: 172


#
# № 7846 Danov2304 (Уровень: Базовый)
# (А.Богданов) На числовой прямой даны два отрезка: P = [13; 19] и Q = [17; 23].
# Укажите наибольшую возможную длину такого отрезка A, что формула
#
# ¬(¬(x ∈ P) → (x ∈ Q)) → ((x ∈ A) →(¬(x ∈ Q)→(x ∈ P)))
#
# тождественно истинна, то есть принимает значение 1 при любых x.
'''
def F(x, a1, a2):
    Q = 17 <= x <= 23
    P = 13 <= x <= 19
    A = a1 <= x <= a2
    return (not((not P) <= Q)) <= (A <= ((not Q) <= P))

M = [i/4 for i in range(10*4, 30*4)]
R = []
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2-a1)
print(max(R))
'''
# Показать ответ: 10


# НАЧАЛО
# ПОКА нашлось(12) ИЛИ нашлось(233) ИЛИ нашлось(3333)
#   ЕСЛИ нашлось(12)
#     ТО заменить(12, 332)
#   КОНЕЦ ЕСЛИ
#   ЕСЛИ нашлось(233)
#     ТО заменить(233, 23)
#   КОНЕЦ ЕСЛИ
#   ЕСЛИ нашлось(3333)
#     ТО заменить(3333, 32)
#   КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
# КОНЕЦ
# На вход приведённой выше программе поступает строка, начинающаяся с цифры «1», а затем содержащая n цифр «3» (n > 5).
#
# Определите наименьшее значение n, при котором сумма цифр в строке,
# получившейся в результате выполнения программы, будет кратна 6.
'''
for n in range(6, 100):
    s = '1' + '3' * n

    while '12' in s or '233' in s or '3333' in s:
        if '12' in s:
            s = s.replace('12', '332', 1)
        if '233' in s:
            s = s.replace('233', '23', 1)
        if '3333' in s:
            s = s.replace('3333', '32', 1)

    if sum([int(i) for i in s if i.isdigit()]) % 6 == 0:
        print(n)
        break
'''
# Показать ответ: 20


def F(x, A):
    return (x % A != 0) <= ((x % 21 != 0) and (x % 35 != 0))

for A in range(1, 1000):
    if all(F(x, A) for x in range(1, 1000)):
        print(A)





# endregion Урок:  *************************************************************************

import useful
print(useful.Who_Is_Name())

# todo: Булат = [2, 3, 8, 9, 10, 12, 14+, 15, 16, 17, 18, 19-21, 22, 24, 25]
# на прошлом уроке:
# на следующем уроке:
