# region Домашка: ******************************************************************************

# Все 5-буквенные слова, составленные из букв С, Л, О, Н записаны в алфавитном порядке и пронумерованы.
'''
#Вот начало списка:
#1.ЛЛЛЛЛ
#2.ЛЛЛЛН
#3.ЛЛЛЛО
#4.ЛЛЛЛС
#5.ЛЛЛНЛ

#Запишите слово, которое стоит под номером 1020.

a = {0: "Л", 1: "Н", 2: "О", 3: "С"}
k = 0
for i in range(0, len(a)):
    for j in range(0, len(a)):
        for g in range(0, len(a)):
            for m in range(0, len(a)):
                for n in range(0, len(a)):
                    k += 1
                    if k == 1020:
                        print(a[i], a[j], a[g], a[m], a[n], end=" ")



s = sorted(['С', "Л", "О", "Н"])
k = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    k += 1
                    if k == 1020:
                        print(a + b + c + d + e)
'''
# Ответ: СССОС


# Сколько слов длины 5, начинающихся с гласной буквы, можно составить из букв Е, Г, Э?
# Каждая буква может входить в слово несколько раз.
# Слова не обязательно должны быть осмысленными словами русского языка.


# 2*3*3*3*3 = 162
# Ответ:162


# Тип 8 № 10500
'''
# Шифр кодового замка представляет собой последовательность из пяти символов,
# каждый из которых является цифрой от 1 до 5. Сколько различных вариантов шифра можно задать,
# если известно, что цифра 1 встречается ровно три раза, а каждая из других допустимых цифр может встречаться в шифре любое количество
# раз или не встречаться совсем?

s = '12345'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if temp.count('1') == 3:
                        count += 1
print(count)
'''


# Тип 12 № 11243

'''
s = '1' + '9' * 98
while ('19' in s) or ('299' in s) or ('3999' in s):
    s = s.replace('19', '2', 1)
    s = s.replace('299', '3', 1)
    s = s.replace('3999', '1', 1)
print(s)
'''

# Тип 12 № 11270
'''
s = '1'+'9'*100
while ('19' in s) or ('299' in s) or ('3999' in s):
    s = s.replace('19', '2', 1)
    s = s.replace('299', '3', 1)
    s = s.replace('3999', '1', 1)
print(s)

'''
# Тип 23 № 6430
'''
def f(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    else:
        return f(x + 1, y) + f(x * 2, y)
print(f(1, 20))

'''

# Тип 23 № 13498
'''
def f(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    else:
        return f(x + 1, y) + f(x + 3, y)
print(f(1, 9) * f(9, 17))
'''
# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# 5154 КЕГЭ
# print((5*3+2)+(5*4+2)+(5*5+2)+(5*6+2))  # 98

# 5156 КЕГЭ
# print(10000**2 + 2*9999 + 2*9997)  # 100039992

# Михаилу был дан для исполнения следующий алгоритм:
#
# Повторить 20 раз
#  Круг (4)
#  Сместиться на (8, 0)
# Сместиться на (0, -12)
# Повторить 10 раз
#  Круг (8)
#  Сместиться на (-16, 0)
# Конец
# Сместиться на (0, -14)
# Повторить 15 раз
#  Круг (6)
#  Сместиться на (12, 0)
# Конец

'''
import turtle as t
t.left(90)
l = 30
t.speed(10)
x = 0
y = 0
for _ in range(20):
    t.circle(4*l)
    t.goto((x+8)*l, (y+0)*l)
t.goto((x+0)*l, (y-12)*l)
for _ in range(10):
    t.circle(8*l)
    t.goto((x-16)*l, (y+0)*l)
t.goto((x+0)*l, (y-14)*l)
for _ in range(15):
    t.circle(6*l)
    t.goto((x+12)*l, (y+0)*l)
t.done()
'''


# Чертёжнику был дан для исполнения следующий алгоритм:
#
# Повтори 8 раз
#  Сместиться на (30, 10)
#  Сместиться на (50, -30)
#  Сместиться на (-40, 50)
# конец
#
# Определите, на какое расстояние от начальной точки удалится Чертежник.



# № 5255, 100 задач от Джобса - базовый уровень
'''
import turtle as t
t.left(90)
t.speed(10)
x, y = 0, 0
for _ in range(8):
    x += 30
    y += 10

    t.goto(x, y)

    x += 50
    y -= 30
    t.goto(x, y)

    x -= 40
    y += 50
    t.goto(x, y)
# print(x, y)
print((x** 2 + y ** 2)**0.5)
t.done()
'''
# № 5261, 100 задач от Джобса - средний уровень
# Чертёжнику был дан для исполнения следующий алгоритм:
#
# Повтори 10 раз
#  Сместиться на (15, 8)
#  Сместиться на (0, -2)
#  Сместиться на (-5, -12)
#  Сместиться на (-2, 0)
#  Сместиться на (-8, 6)
# конец

'''
import turtle as t
t.left(90)
t.speed(10)
x, y = 0, 0
for _ in range(10):
    x += 15
    y += 8
    t.goto(x, y)

    x += 0
    y -= 2
    t.goto(x, y)

    x -= 5
    y -= 12
    t.goto(x, y)

    x -= 2
    y += 0
    t.goto(x, y)

    x -= 8
    y += 6
    t.goto(x, y)
# print(x, y)
print((x** 2 + y ** 2)**0.5)
t.done()
'''


# Тип 23 № 40998
'''
# Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Прибавить 2
# 3. Умножить на 3
#
# Сколько существует программ, которые преобразуют исходное число 1 в число 15, и при этом траектория вычислений содержит число 10?

def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*3, b)

print(F(1, 10) * F(10, 15))
'''
# Ответ: 672


# Тип 23 № 7315
'''
# У исполнителя три команды, которым присвоены номера:
#
# 1. прибавь 1
# 2. сделай чётное
# 3. сделай нечётное.
#
# Сколько существует программ, которые число 1 преобразуют в число 15?

def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(2*a, b) + F(2*a+1, b)

print(F(1, 15))
'''
# Ответ: 83


# Тип 23 № 36036
'''
# Исполнитель Минус преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
#
# 1. Вычесть 2
# 2. Вычесть 5

# Сколько существует программ, которые число 23 преобразуют в число 2?

def F(a, b):
    if a < b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a-2, b) + F(a-5, b)

print(F(23, 2))
'''
# Ответ: 29


# endregion Урок: ******************************************************************************


# todo: Иван = [2, 8, 10, 12, 13, 14, 15+, 16, 23], на следующем уроке:
