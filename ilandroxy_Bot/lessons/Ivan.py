# region Домашка: ******************************************************************************


# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************


# Тип 5 № 14767
'''
# Автомат получает на вход четырёхзначное число (число не может начинаться с нуля).
# По этому числу строится новое число по следующим правилам.
#
# 1. Складываются отдельно первая и вторая, вторая и третья, третья и четвёртая цифры заданного числа.
# 2. Наименьшая из полученных трёх сумм удаляется.
# 3. Оставшиеся две суммы записываются друг за другом в порядке неубывания без разделителей.
#
# Пример. Исходное число: 1984. Суммы: 1 + 9 = 10, 9 + 8 = 17, 8 + 4 = 12.
# Удаляется 10. Результат: 1217.
#
# Укажите наименьшее число, при обработке которого автомат выдаёт результат 613.

# Вариант 1
for n in range(1000, 10000):  # [1000, 9999]
    M = [int(i) for i in str(n)]

    a = M[0] + M[1]
    b = M[1] + M[2]
    c = M[2] + M[3]

    maxi = max(a, b, c)
    sred = (a + b + c) - (max(a, b, c) + min(a, b, c))

    r = str(sred) + str(maxi)

    if r == '613':
        print(n)
        break

# Вариант 2
S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for x1 in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
    for x2 in S:
        for x3 in S:
            for x4 in S:
                a = x1 + x2
                b = x2 + x3
                c = x3 + x4

                maxi = max(a, b, c)
                sred = (a + b + c) - (max(a, b, c) + min(a, b, c))

                r = str(sred) + str(maxi)

                if r == '613':
                    print(n)
                    exit()
'''
# Ответ: 1067


# (Е. Джобс) Исполнитель Чертёжник перемещается на координатной плоскости, оставляя след в виде линии.
# Чертёжник может выполнять команду Сместиться на (a,b) (где a, b — целые числа), перемещающую
# Чертёжника из точки с координатами (x, y) в точку с координатами (x+a, y+b).
# Если числа a, b положительные, то значение соответствующей координаты увеличивается, если отрицательные — уменьшается.

# Чертёжнику был дан для исполнения следующий алгоритм:
#
#
#
# Повтори 2 раз
#  Сместиться на (6, 2)
#  Сместиться на (0, -2)
# конец
#
# Повтори 3 раз
#  Сместиться на (2, -1)
#  Сместиться на (-2, -1)
# конец
#
# Повтори 6 раз
#  Сместиться на (-2, 1)
# конец


# t.pu()
# for x in range(0, 10):
#     for y in range(0, 10):
#         t.goto(x*l, y*l)
#         t.dot(3)
# t.done()

# x = 0
# y = 0
#
# for i in range(2):
#     t.goto(6*l, 2*l)
#     t.goto(0*l, -2*l)
#
# for i in range(3):
#     t.goto(2*l, -1*l)
#     t.goto(-2*l, -1*l)
#
# for i in range(6):
#     t.goto(-2*l, 1*l)
#
# t.done()


#todo: Чертежник с КЕГЭ


# Тип 6 № 47404
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# При опущенном хвосте Черепаха оставляет на поле след в виде линии.
#
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 10 Направо 90]
# Направо 30
# Повтори 5 [Вперёд 6 Направо 60 Вперёд 6 Направо 120]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом:
# Повтори 4 [Вперёд 10 Направо 90] и находиться вне области, ограниченной линией, заданной данным алгоритмом: Повтори 5 [Вперёд 6 Направо 60 Вперёд 6 Направо 120].
# Точки на линии учитывать не следует.

'''
import turtle as t
l = 30
t.left(90)

for i in range(4):
    t.forward(10 * l)
    t.right(90)

t.right(30)

t.color('red')
for i in range(5):
    t.forward(6*l)
    t.right(60)
    t.forward(6*l)
    t.right(120)

t.color('blue')
t.pu()
for x in range(0, 11):
    for y in range(0, 11):
        t.goto(x*l, y*l)
        t.dot(3)

t.done()
'''

# Вариант 2
'''
import turtle as t
l = 30
t.left(90)
t.color('red')

t.begin_fill()
for i in range(4):
    t.forward(10 * l)
    t.right(90)
t.end_fill()

t.right(30)

t.begin_fill()
t.color('red')
for i in range(2):
    t.forward(6*l)
    t.right(60)
    t.forward(6*l)
    t.right(120)
t.end_fill()

canvas = t.getcanvas()
count = 0
for x in range(-100*l, 100*l, l):
    for y in range(-100 * l, 100 * l, l):
        z = canvas.find_overlapping(x, y, x, y)
        if len(z) == 1 and z[0] == 5:
            count += 1
print(count)

t.done()
'''
# Ответ: 51


# (w ∨ ¬x) ∧ (w ≡ ¬y) ∧ (w → z).
'''
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (w or (not(x))) and (w == (not(y))) and (w <= z)
                if F == True:
                     print(x, y, z, w, F)


# ((y → w) ≡ (x → ¬z)) ∧ (x ∨ w).
print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = ((y <= w) == (x <= (not(z)))) and (x or w)
                print(x, y, z, w, F)
'''
# Ответ: 51





# endregion Урок: ******************************************************************************


# todo: Иван = [2, 5, 8, 12, 13, 14, 15, 16, 17, 23], на следующем уроке: 24 номер со строками - новые варианты решений  и на несколько строк
