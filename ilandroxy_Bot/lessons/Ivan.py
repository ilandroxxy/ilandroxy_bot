# region Домашка: ******************************************************************************


# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# № 265 Джобс 21.09.2020 (Уровень: Базовый)
# Все четырёхбуквенные слова, составленные из букв А, Л, Г, О, Р, И, Т, М записаны в алфавитном порядке
# и пронумерованы, начиная с 1. Начало списка выглядит так:
#
# 1. АААА
# 2. АААГ
# 3. АААИ
# 4. АААЛ
# 5. АААМ
# 6. АААО
# 7. АААР
# 8. АААТ
# 9. ААГА
#
# Под каким номером в списке идёт последнее слово, которое заканчивается на ИМ?

'''
s = sorted(['А','Л','Г','О','Р','И','Т','М'])
print(s)
k = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                k += 1
                temp = a+b+c+d
                if temp == 'ТТИМ':
                    print(k)
'''
# Вариант 2
'''
s = sorted(['А','Л','Г','О','Р','И','Т','М'])
print(s)
k = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                k += 1
                temp = a+b+c+d
                if c == 'И' and d == 'М':
                    print(k)
'''
# Показать ответ: 4053


# № 464 Джобс 12.10.2020 (Уровень: Сложный)
# Дана программа для Редактора:
#
# На вход приведённой ниже программе поступает строка, содержащая 20 цифр 0 или 1,
# расположенных в произвольном порядке, и идущем после них символе “<”.

# Определите максимальную сумму числовых значений цифр строки,
# которая может получиться в результате выполнения программы, если известно,
# что в первоначальной строке не может стоять подряд больше трех одинаковых символа.
'''
import itertools
maxi = 0
for s in itertools.product('01', repeat=20):
    s = ''.join(s) + '<'
    if '0000' not in s and '1111' not in s:  # что в первоначальной строке не может стоять подряд больше трех одинаковых символа
        while '0<' in s or '1<' in s:
            if '11<' in s or '10<' in s:
                if '11<' in s:
                    s = s.replace('11<', '<3', 1)
                else:
                    s = s.replace('10<', '<2', 1)
            else:
                if '00<' in s:
                    s = s.replace('00<', '<0', 1)
                if '01<' in s:
                    s = s.replace('01<', '<1', 1)
        # Вариант 1
        # if maxi < s.count('1') + s.count('2') * 2 + s.count('3') * 3:
        #     maxi = s.count('1') + s.count('2') * 2 + s.count('3') * 3
        #     print(maxi)

        # Вариант 2
        # if maxi < sum([int(i) for i in s[1:]]):
        #     maxi = sum([int(i) for i in s[1:]])
        #     print(maxi)

        maxi = max(maxi, sum([int(i) for i in s[1:]]))
print(maxi)
'''
# Показать ответ: 25


#
# № 560 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1) Строится двоичная запись числа N.
# 2) К этой записи дописывается (дублируется) последняя цифра.
# 3) Затем справа дописывается 0, если в двоичном коде числа N чётное число единиц, и 1, если нечётное.
#
# 4) К полученному результату дописывается ещё один бит чётности так,
# чтобы количество единиц в двоичной записи полученного числа стало чётным.
#
# Полученная таким образом запись (в ней на три разряда больше, чем в записи исходного числа N)
# является двоичной записью искомого числа R. Укажите минимальное число R, большее 105,
# которое могло получиться в результате работы автомата. В ответе это число запишите в десятичной системе.
'''
R = []
for n in range(1, 10000):
    s = bin(n)[2:]

    s = s + s[-1]

    for _ in range(2):
        if s.count('1') % 2 == 0:
            s = s + '0'
        else:
            s = s + '1'

    r = int(s, 2)  # переводит строку s из 2-ной системы счисления в 10-ную
    if r > 105:
        R.append(r)
print(min(R))
'''
# Показать ответ: 108



# № 4282 (Уровень: Средний)
# Для какого наибольшего целого неотрицательного числа А выражение
#
# (150 ≠  y + 2x + 2z) ∨ (A < x) ∨ (A < y) ∨ (A < z)
#
# истинно при любых целых положительных x, y, z?

# Вариант 1
'''
def F(x, y, z, A):
    return (150 != (y + 2*x + 2*z)) or (A < x) or (A < y) or (A < z)

for A in range(0, 1000):
    if all(F(x, y, z, A) for x in range(0, 100) for y in range(0, 100) for z in range(0, 100)):
        print(A)
'''

# Вариант 2
'''
def F(x, y, z, A):
    return (150 != (y + 2*x + 2*z)) or (A < x) or (A < y) or (A < z)

print(max([A for A in range(0, 1000) if all(F(x, y, z, A) for x in range(0, 100) for y in range(0, 100) for z in range(0, 100))]))
'''

# Вариант 3
'''
print(max([A for A in range(0, 1000) if all(((150 != (y + 2*x + 2*z)) or (A < x) or (A < y) or (A < z)) for x in range(0, 100) for y in range(0, 100) for z in range(0, 100))]))
'''
# Показать ответ: 29


# № 7596 Досрочная волна 2023 (Уровень: Базовый)
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых только одно число трехзначное,
# и сумма элементов пары кратна минимальному трехзначному значению последовательности, оканчивающемуся на 5.
# В ответе запишите два числа: сначала количество найденных пар, затем минимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
A = [i for i in M if len(str(i)) == 3 and str(i)[-1] == '5']
MINI = min(A)
count = 0
mini = 9999999
for i in range(0, len(M)-1):
    if (len(str(M[i])) == 3 and len(str(M[i+1])) != 3) or (len(str(M[i+1])) == 3 and len(str(M[i])) != 3):
        if (M[i] + M[i+1]) % MINI == 0:
            count += 1
            mini = min(mini, M[i] + M[i+1])
print(count, mini)
'''
# Показать ответ: 2 33120
# i  0  1  2  3  4
M = [1, 2, 3, 4, 5]
# 1. Назовём парой два идущих подряд элемента последовательности.
# 12 23 34 45
for i in range(len(M)-1):
    print(f'{M[i]}{M[i+1]}', end=' ')
print('\n')

# 2. Назовём тройкой три идущих подряд элемента последовательности.
# 123 234 345
for i in range(len(M)-2):
    print(f'{M[i]}{M[i+1]}{M[i+2]}', end=' ')
print('\n')

# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        print(f'{M[i]}{M[j]}', end=' ')
    print()


#
# № 5292 /dev/inf 12.2022 (Уровень: Базовый)
# (А. Рогов) В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых только для одного числа выполняется условие:
# остаток от деления числа на 2023 не меньше минимального элемента последовательности, кратного 123.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.

M = [int(i) for i in open('17.txt')]
A = [i for i in M if i % 123 == 0]
MINI = min(A)  # минимального элемента последовательности, кратного 12
count = 0
maxi = 0
for i in range(len(M)-1):
    print(M[i]% 2023, M[i+1]% 2023)
    if (M[i] % 2023 >= MINI and M[i+1] % 2023 < MINI) or (M[i] % 2023 < MINI and M[i+1] % 2023 >= MINI):
        count += 1
        maxi = max(maxi, M[i] + M[i+1])
print(count, maxi)
# 4372 176581



# endregion Урок: ******************************************************************************


# todo: Иван = [2, 3, 6, 8, 10, 12, 13, 14+, 15+, 16, 17, 19-21, 23]
# на прошлом уроке: Повторяли 17 номера
# на следующем уроке: