
# region Домашка

# Тип 5 № 10407
# Автомат получает на вход четырёхзначное число. По этому числу строится новое число по следующим правилам.

# 1.Складываются отдельно первая и вторая цифры, вторая и третья цифры, а также третья и четвёртая цифры.
# 2.Из полученных трёх чисел выбираются два наибольших и записываются друг за другом в порядке неубывания без разделителей.
#
# Пример. Исходное число: 9575. Суммы: 9+5 = 14; 5+7 = 12; 7+5=12. Наибольшие суммы: 14, 12. Результат: 1214.
#
# Укажите наибольшее число, при обработке которого автомат выдаёт результат 1515.
'''
for n in range(10000, 1000, -1):
    s = str(n)

    a = int(s[0])+ int(s[1])
    b = int(s[1]) + int(s[2])
    c = int (s[2]) + int(s[3])

    r = str(min(a, b, c)) + str(max(a, b, c))

    if r == '1515':
        print(n)
        break
'''
# Ответ: 9696

# Тип 5 № 13617
# Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам.
#
# 1.Перемножаются отдельно первая и вторая цифры, а также – вторая и третья цифры.
# 2.Полученные два числа записываются друг за другом в порядке невозрастания без разделителей.
#
# Пример. Исходное число: 179. Произведения: 1*7 = 7; 7*9 = 63. Результат: 637.
#
# Укажите наименьшее число, при обработке которого автомат выдаёт результат 123.
'''
for n in range(100, 1000):
    s = str(n)

    a = int(s[0]) * int(s[1])
    b = int(s[1]) * int(s[2])

    r = str(max(a,b)) + str(min(a, b))

    if r == '123':
        print(n)
        break
'''
# Ответ: 134

# Тип 5 № 18618
'''
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится двоичная запись числа N.
# 2. Запись «переворачивается», то есть читается справа налево. Если при этом появляются ведущие нули, они отбрасываются.
# 3. Полученное число переводится в десятичную запись и выводится на экран.

# Пример. Дано число N = 58. Алгоритм работает следующим образом.
# 1. Двоичная запись числа N: 111010.
# 2. Запись справа налево: 10111 (ведущий ноль отброшен).
# 3. На экран выводится десятичное значение полученного числа 23.
#
# Какое наибольшее число, не превышающее 100, после обработки автоматом даёт результат 11?

for n in range(100, 1, -1):
    temp = n

    N = []
    while temp > 0:
        N.append(temp % 2)
        temp //= 2

    r = 0
    N.reverse()
    for i in range(0, len(N)):
        r += N[i] * 2 ** i

    if r == 11:
        print(n)
        break
'''
# Ответ: 52



# Тип 5 № 15622
'''
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1.Строится двоичная запись числа N.
# 2.К этой записи дописываются справа ещё два разряда по следующему правилу: складываются все цифры двоичной записи, если
# а)сумма нечетная к числу дописывается 11,
# б)сумма четная, дописывается 00.
#
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R.
# Укажите такое наименьшее число R, которое превышает 114 и может являться результатом работы алгоритма. В ответе это число запишите в десятичной системе счисления.

for n in range(1, 1000):
    temp = n

    N = []
    while temp > 0:
        N.append(temp % 2)
        temp //= 2
    N.reverse()

    summ = sum(N)
    if summ % 2 != 0:
        N.append(1)
        N.append(1)
    else:
        N.append(0)
        N.append(0)

    r = 0
    N.reverse()
    for i in range(0, len(N)):
        r += N[i] * 2 ** i

    if r > 114:
        print(r)
'''
# Ответ: 115

# endregion Домашка


# region Урок

# Теория

# import turtle  # классическое подключение библиотеки к проекту
#
# turtle.forward(100)
# turtle.done()


# import turtle as t  # переименовали вызова к библиотеки для сокращения
#
# t.forward(100)
# t.done()


# from turtle import forward, done   # импортировал только две функции из библиотеки
#
# forward(100)
# done()



# from turtle import *  # импортировал все функции из библиотеки
#
# forward(100)
# done()



# Тип 6 № 47306
'''
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 8 Направо 90 Вперёд 8 Направо 90]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.


import turtle as t
t.left(90)
l = 60

for _ in range(4):
    t.forward(8 * l)
    t.right(90)
    t.forward(8 * l)
    t.right(90)

t.pu()
t.color('red')
for x in range(0, 9):
    for y in range(0, 9):
        t.goto(x * l, y * l)
        t.dot(3)

t.done()
'''
# Ответ: 49



# Тип 6 № 47407
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.

# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 8 Направо 90]
# Повтори 3 [Вперёд 12 Направо 120]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом:Повтори 4 [Вперёд 8 Направо 90]
# и находиться вне области, ограниченной линией, заданной данным алгоритмом: Повтори 3 [Вперёд 12 Направо 120].
# Точки на линии учитывать не следует.

# вариант 1
'''
import turtle as t
t.speed(100)
t.left(90)
l = 100

for _ in range(4):
    t.forward(8 * l)
    t.right(90)

t.color('blue')
for _ in range(3):
    t.forward(12 * l)
    t.right(120)

t.pu()
t.color('red')
for x in range(0, 9):
    for y in range(0, 9):
        t.goto(x * l, y * l)
        t.dot(6)

t.done()
'''


# вариант 2
'''
import turtle as t
# t.speed(100)
t.left(90)
l = 40

t.color('blue')

t.begin_fill()
for _ in range(4):
    t.forward(8 * l)
    t.right(90)
t.end_fill()

t.begin_fill()
for _ in range(3):
    t.forward(12 * l)
    t.right(120)
t.end_fill()


canvas = t.getcanvas()
count = 0
for x in range(-100 * l, 100 * l, l):
    for y in range(-100 * l, 100 * l, l):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item[0] == 5:
            count += 1
print(count)

t.done()
'''



# Тип 6 № 47311
'''
# В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен.
#
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [Вперёд 12 Направо 150 Вперёд 12 Направо 30]
#
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.

import turtle as t
# t.speed(100)
t.left(90)
l = 40

t.color('blue')

t.begin_fill()
for _ in range(2):
    t.forward(12 * l)
    t.right(150)
    t.forward(12 * l)
    t.right(30)
t.end_fill()


canvas = t.getcanvas()
count = 0
for x in range(-100 * l, 100 * l, l):
    for y in range(-100 * l, 100 * l, l):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item[0] == 5:
            count += 1
print(count)

t.done()
'''
# Ответ: 60

# endregion Урок


# todo: Стася = [2, 5, 6, 14], на следующем уроке: Разбираем теорию строк и номера 8, 12