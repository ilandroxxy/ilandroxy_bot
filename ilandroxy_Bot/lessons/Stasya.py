
# region Домашка: **********************************************************

# Тип 17 № 47221
# В файле содержится последовательность целых чисел. Элементы последовательности могут принимать целые значения от −10000 до 10000 включительно.
# Определите количество пар последовательности, в которых только одно число оканчивается на 3,
# а сумма квадратов элементов пары не меньше квадрата максимального элемента последовательности, оканчивающегося на 3.
# В ответе запишите два числа: сначала количество найденных пар, затем максимальную из сумм квадратов элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]

maxsumm = 0
count = 0
maxi = 0

for x in M:
    if abs(x) % 10 == 3:
        maxi = max(maxi, x)

for i in range(len(M)-1):
    if (abs(M[i]) % 10 == 3 and abs(M[i + 1]) % 10 != 3) or (abs(M[i]) % 10 != 3 and abs(M[i + 1]) % 10 == 3):
        if (M[i] ** 2 + M[i + 1] ** 2) >= (maxi ** 2):
            count += 1
            maxsumm = max(maxsumm, M[i]**2 + M[i+1]**2)
print(count, maxsumm)
'''
# Ответ:180 190360573


# Тип 17 № 47014
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых один из двух элементов делится на 5, а другой меньше среднего арифметического всех нечётных элементов последовательности.
# В ответе запишите два числа: сначала количество найденных пар, а затем — максимальную сумму элементов таких пар.
'''
M = [int(i) for i in open('17.txt')]

count = 0
summ = 0
for x in M:
    if x % 2 != 0:
        summ += x
        count += 1
sred = summ/count

kol = 0
maxi = 0
for i in range(0, len(M)- 1):
    if (M[i] % 5 == 0 and M[i+1] < sred) or (M[i] < sred and M[i+1] % 5 == 0):
        kol += 1
        maxi = max(maxi, M[i] + M[i+1])
print(kol, maxi)
Ответ: 1061 14847
'''

# endregion Домашка: **********************************************************


# region Урок: **********************************************************

#
# № 7625 Досрочная волна 2023 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 11??4*56, делящиеся на 211 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 211.

# print(10**8)       # 100000000
# print('11??4*56')  # 11??4*56
'''
import itertools
M = []
for l in range(0, 1+1):  # длина *
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in range(10):  # ?
    for y in range(10):  # ?
        for z in M:  # *
            A = int(f'11{x}{y}4{z}56')
            if A % 211 == 0:  # делящиеся на 211 без остатка
                R.append([A, A // 211])

for x in sorted(R):
    print(*x)
'''
# Показать ответ
# 1117456 5296
# 11034456 52296
# 11224356 53196
# 11414256 54096
# 11604156 54996
# 11794056 55896


# № 7026 Danov2303 (Уровень: Базовый)
# (А.Богданов) На вход алгоритма подается натуральное число N. Алгоритм строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа еще несколько разрядов по следующему правилу:
#
# а) если N четное, то к нему справа приписываются два нуля, а слева единица;
# б) если N нечетное, то к нему справа приписывается в двоичном виде сумма цифр его двоичной записи;
#
# Полученная таким образом запись (в ней как минимум на один разряд больше, чем в записи исходного числа N)
# является двоичной записью искомого числа R.

# Укажите такое число N большее 8, для которого число R является наименьшим среди чисел, превышающих 88.
# В ответе это число запишите в десятичной системе счисления.
'''
R = []
for n in range(9, 1000):
    s = bin(n)[2:]

    if n % 2 == 0:
        s = '1' + s + '00'
    else:
        summ = s.count('1')
        s = s + bin(summ)[2:]    # в двоичном виде сумма

    r = int(s, 2)
    if r > 88:
        R.append([r, n])
print(min(R))
'''
# Показать ответ: 25


# 6 номер
'''
import turtle as t
t.left(90)
t.speed(50)
l = 40

for _ in range(4):
    t.forward(9*l)
    t.left(270)
t.up()
for _ in range(3):
    t.forward(1*l)
    t.left(270)
    t.forward(1*l)
    t.left(90)
t.down()
for _ in range(2):
    t.forward(9*l)
    t.left(270)
    t.forward(11*l)
    t.left(270)


t.pu()
t.color('red')
for x in range(0, 15):
    for y in range(0, 15):
        t.goto(x*l, y*l)
        t.dot(2)
t.done()
'''


# № 7028 Danov2303 (Уровень: Базовый) (А.Богданов) Камера тепловизора формирует монохроматические изображения в
# видимом и инфракрасном спектре. Размер картинки изображения в видимом спектре 640х480, а в инфракрасном в 2 раза
# меньше (по ширине и высоте). Количество бит на один пиксель одинаково для изображений видимого и инфракрасного
# спектра. Сколько оттенков (цветов) может принимать пиксель каждого изображения, если оба снимка без сжатия
# умещаются в 330 КБайт?
'''
pixels1 = 640 * 480
pixels2 = 320 * 240

I = 330 * 2 ** 13

# I = (pixels1 + pixels2) * i
i = I / (pixels1 + pixels2)
print(i)
print(f'Кол-во доступных оттенков: {2**7}')
'''
# Ответ: 128


# № 7029 Danov2303 (Уровень: Базовый)
# (А.Богданов) Марина собирает восьмибуквенные слова из букв своего имени.
# Все буквы могут многократно повторяться.
# На каком месте окажется имя МАРИАННА в отсортированном по алфавиту списке сгенерированных слов?
# Нумерация начинается с 1.
'''
import itertools
M = set()
for s in itertools.product(sorted('МАРИНА'), repeat=8):
    slovo = ''.join(s)
    M.add(slovo)

M = sorted(M)
for x in M:
    if x == 'МАРИАННА':
        print(M.index(x)+1)
'''
# Показать ответ: 169466


# № 7030 Danov2303 (Уровень: Базовый)
# (А.Богданов) Откройте файл электронной таблицы, содержащей в каждой строке шесть натуральных чисел.
# Определите количество строк таблицы, для которых выполняются все условия:
#
# - в строке три числа повторяются ровно два раза;
# - эти три числа образуют стороны прямоугольного треугольника.
#
# В ответе запишите одно число.
'''
count = 0
for x in open('9.txt'):
    M = [int(i) for i in x.split()]
    # [68, 11, 39, 11, 39, 68] Tru;  [63, 63, 64, 10, 10, 63] False
    if len(set(M)) == 3 and all(M.count(x) == 2 for x in M):
        A = sorted(set(M))  # [11, 39, 68]
        if A[0]**2 + A[1]**2 == A[2]**2:
            count += 1
print(count)
'''
# Показать ответ: 148


# 15 № 7036 Danov2303 (Уровень: Базовый)
# (А.Богданов) Обозначим через ПОЗ(n,m) функцию, которая возвращает истину, если результат разности (n–m)
# положительное число или ложь в противном случае. Для какого наибольшего целого неотрицательного числа А формула
#
# ¬ПОЗ(x+y,73) ∨ ¬ПОЗ(37,x-y) ∨ ПОЗ(y,A)
#
# тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?

# def POZ(n, m):
#     if (n - m) > 0:
#         return True
#     else:
#         return False

# Вариант 1
'''
def POZ(n, m):
    return (n - m) > 0

def F(x, y, A):
    return (not POZ(x+y, 73)) or (not POZ(37, x-y)) or POZ(y, A)

for A in range(0, 10000):
    if all(F(x, y, A) for x in range(0, 100) for y in range(0, 100)):
        print(A)
 '''

# Вариант 2
'''
# ¬ПОЗ(x+y,73) ∨ ¬ПОЗ(37,x-y) ∨ ПОЗ(y,A)
def F(x, y, A):
    return (((x+y) - 73) <= 0) or ((37 - (x-y)) <= 0) or ((y-A) > 0)

for A in range(0, 10000):
    if all(F(x, y, A) for x in range(0, 100) for y in range(0, 100)):
        print(A)
'''
# Показать ответ: 18




# endregion Урок: **********************************************************


# todo: Стася = [1, 2, 3, 4, 5, 6, 7, 8, 9.2, 12, 14+, 15, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# на прошлом уроке: Прорешивали домашний вариант от Данова - очень сложная история, но интересная.
# на следующем уроке:

