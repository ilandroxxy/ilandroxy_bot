
# region Домашка: **********************************************************

# Тип 16 № 5554
# Алгоритм вычисления значения функции F(n), где n— натуральное число, задан следующими соотношениями:
#
# F(n) = n + 1 при n ≤ 2;
# F(n) = F(n− 1) + 3·F(n − 2) при n > 2.
#
# Чему равно значение функции F(4)?
'''
def F(n):
    if n <= 2:
        return n + 1
    if n > 2:
        return F(n - 1) + 3*F(n - 2)

print(F(4))
'''
# Ответ: 18

# Тип 16 № 36871
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n)=3?
'''
def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)
count = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        count += 1
print(count)
'''
# Ответ: 120

# Тип 16 № 4937
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(1) = 1; F(2) = 1;
# F(n) = F(n - 2) * (n - 1), при n > 2.
#
# Чему равно значение функции F(7)?
'''
def F(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    if n > 2:
        return F(n - 2) * (n - 1)

print(F(7))
'''
# Ответ: 48

# Тип 23 № 33195
# У исполнителя есть три команды, которым присвоены номера:
#
# 1.Прибавить 1
# 2.Прибавить 2
# 3.Умножить на 3
#
# Сколько существует программ, которые преобразуют исходное число 1 в число 27, и при этом траектория вычислений содержит число 8 и не содержит чисел 10 и 11?
'''
def F(a, b):
    if a > b or a  == 10  or a == 11:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 2, b) + F( a * 3, b)

print(F(1, 8) * F(8, 27))
'''
# Ответ: 124

# Тип 23 № 15638
# Исполнитель Калькулятор преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
#
# 1.Прибавить 1
# 2.Умножить на 2
#
#  Сколько существует программ, для которых при исходном числе 1 результатом является число 21, при этом траектория вычислений содержит число 10 и не содержит число 17?
'''
def F(a, b):
    if a > b or a == 17:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b)

print(F(1, 10) * F(10, 21))
'''
# Ответ: 14

# Тип 23 № 28697
# Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2.Умножить на 2
#
# Сколько существует программ, которые преобразуют исходное число 2 в число 50, и при этом траектория вычислений содержит числа 11 и 25?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b)

print(F(2, 11) * F(11, 25) * F(25, 50))
'''
# Ответ: 42

# endregion Домашка: **********************************************************


# region Урок: **********************************************************

# Тип 15 № 27017
'''
# Для какого наибольшего целого неотрицательного числа А выражение
#
# (x · y < 100) ∨ (y ≥ A) ∨ (x > A)
#
# тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?

for A in range(0, 10000):
    flag = True
    for x in range(0, 100):
        for y in range(0, 100):
            if (((x * y) < 100) or (y >= A) or (x > A)) == False:
                flag = False
                break
        if flag == False:
            break
    if flag == True:
        print(A)
'''
# Ответ: 10


# Тип 15 № 9322
'''
# Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m».
# Для какого наименьшего натурального числа А формула
#
# ДЕЛ(x, А) → (¬ДЕЛ(x, 21) + ДЕЛ(x, 35))
#
# тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной x)?

def F(x, A):
    return ((x % A == 0) <= ((x % 21 != 0) + (x % 35 == 0)))

for A in range(1, 1000):
    flag = True
    for x in range(1000):
        # if not(F(x, A)):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''
# Ответ: 5


# Тип 15 № 36870
# Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n.
# Так, например, 14 & 5 = 1110_2 & 0101_2 = 0100_2 = 4.
# Для какого наименьшего неотрицательного целого числа А формула
#
# x & 49 = 0 → (x & 28 ≠ 0 → x & А ≠ 0)

# Вариант 2
''' 
def MyConunction(m, n):
    ms2 = bin(m)[2:]
    ns2 = bin(n)[2:]

    while len(ms2) != len(ns2):
        if len(ms2) < len(ns2):
            ms2 = '0' + ms2
        else:
            ns2 = '0' + ns2

    r = ''
    for i in range(0, len(ns2)):
        if ns2[i] == '1' and ms2[i] == '1':
            r += '1'
        else:
            r += '0'

    return int(r, 2)

def F(x, A):
    return ((MyConunction(x, 49) == 0) <= ((MyConunction(x, 28) != 0) <= (MyConunction(x, A) != 0)))

for A in range(0, 10000):
    flag = True
    for x in range(0, 1000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''

# Вариант 1
'''
def F(x, A):
    return ((x & 49 == 0) <= ((x & 28 != 0) <= (x & A != 0)))

for A in range(0, 10000):
    flag = True
    for x in range(0, 1000):
        if F(x, A) == False:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''
# Ответ: 12



# Тип 15 № 13364
''' 
# На числовой прямой даны два отрезка: P = [130; 171] и Q = [150; 185].
# Укажите наименьшую возможную длину такого отрезка A, что формула
#
# (x ∈ P) → (((x ∈ Q) ∧ ¬(x ∈ A)) → ¬(x ∈ P))
#
# истинна при любом значении переменной х, т.е. принимает значение 1 при любом значении переменной х.

def F(a1, a2, x):
    return ((130 <= x <= 171) <= (((150 <= x <= 185) and (not(a1 <= x <= a2))) <= (not(130 <= x <= 171))))

mini = 99999
for a1 in range(1, 200):
    for a2 in range(a1+1, 200):
        flag = True
        for x in range(1, 1000):
            if F(a1, a2, x) == False:
                flag = False
                break
        if flag == True:
            # mini = min(mini, a2 - a1)
            if mini > a2 - a1:
                mini = a2 - a1
            print(mini)
'''
# Ответ: 21




# Тип 15 № 34545
'''
# На числовой прямой даны два отрезка: P = [12, 62] и Q = [32, 92].
#
# Какова наименьшая возможная длина интервала A, что формула
#
# (¬(x ∈ А) ∧ (x ∈ Q)) → (x ∈ P)
#
# тождественно истинна, т.е. принимает значение 1 при любом значении переменной х.

def F(a1, a2, x):
    return (((not(a1 <= x <= a2)) and (32 <= x <= 92)) <= (12 <= x <= 62))

mini = 99999
for a1 in range(1, 100):
    for a2 in range(a1+1, 100):
        flag = True
        for x in range(1, 1000):
            if F(a1, a2, x) == False:
                flag = False
                break
        if flag == True:
            mini = min(mini, a2 - a1)
            print(mini+1)
'''
# Ответ 30

# Тип 15 № 34543
'''
# На числовой прямой даны два отрезка: P = [3, 13] и Q = [12, 22]. Какова наибольшая возможная длина интервала A, что формула
#
# ((х ∈ A) → (х ∈ Р)) ∨ (х ∈ Q)
#
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.

def F(a1, a2, x):
    return (((a1 <= x <= a2) <= (3 <= x <= 13)) or (12 <= x <= 22))

maxi = 0
for a1 in range(1, 100):
    for a2 in range(a1+1, 100):
        flag = True
        for x in range(1, 1000):
            if F(a1, a2, x) == False:
                flag = False
                break
        if flag == True:
            maxi = max(maxi, a2 - a1)
            print(maxi)
'''
# Ответ: 19


# endregion Урок: **********************************************************


# todo: Стася = [2, 5, 6, 8, 12, 14+, 16, 23], на следующем уроке: Разобраться с проблемами интервлов в 15 номере, решаем 17 номер