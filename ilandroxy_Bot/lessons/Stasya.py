
# region Домашка: **********************************************************

# Тип 15 № 34542
# На числовой прямой даны два отрезка: P = [1, 39] и Q = [23, 58]. Какова наибольшая возможная длина интервала A, что логическое выражение
# ((x ∈ P) → ¬(x ∈ Q)) → ¬(x ∈ А)
# тождественно истинно, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x):
    P = 1 <= x <= 39
    Q = 23 <= x <= 58
    A = a1 <= x <= a2
    return (P <= (not Q)) <= (not A)
L = [i/4 for i in range(1*4, 70*4)]
M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)
print(max(M))
# Ответ: 16
'''

# Тип 15 № 34537
# На числовой прямой даны три отрезка: P = [10,15], Q = [10,20] и R=[5,15]. Какова наименьшая возможная длина интервала A, что формулы
#
# (x ∈ A) → (x ∈ P) и
#
# (x ∈ Q) → (x ∈ R)
#
# тождественно равны, то есть принимают равные значения при любом значении переменной х (за исключением, возможно, конечного числа точек).
'''
def F(x):
    P = 10 <= x <= 15
    Q = 10 <= x <= 20
    R =  5 <= x <= 15
    A = a1 <= x <= a2
    return (A <= P) == (Q <= R)
L = [i/4 for i in range(1*4, 70*4)]
M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)
print(min(M))
# Ответ: 5
'''

# Тип 15 № 9653
# На числовой прямой даны два отрезка: P = [10, 29] и Q = [13, 18].
#
# Укажите наибольшую возможную длину отрезка A, для которого выражение
# ((x ∈ A) → (x ∈ P)) ∨ (x ∈ Q)
# тождественно истинно, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x):
    P = 10 <= x <= 29
    Q = 13 <= x <= 18
    A = a1 <= x <= a2
    return (A <= P) or Q
L = [i/4 for i in range(1*4, 50*4)]
M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)
print(max(M))
# Ответ: 19
'''


# Тип 15 № 34540
# На числовой прямой даны два отрезка: Р = [12, 62] и Q = [52, 92]. Какова наименьшая возможная длина интервала A, что логическое выражение
#
# ¬(¬(х ∈ А) ∧ (х ∈ Р)) ∨ (х ∈ Q)
#
# тождественно истинно, то есть принимает значение 1 при любом значении переменной х.
'''
def F(x):
    P = 12 <= x <= 62
    Q = 52 <= x <= 92
    A = a1 <= x <= a2
    return (not((not A) and P)) or Q
L = [i/4 for i in range(1*4, 100*4)]
M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)
print(min(M))
# Ответ: 40
'''

# endregion Домашка: **********************************************************


# region Урок: **********************************************************

# Тип 25 № 27850
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [245_690; 245_756] простые числа.
# Выведите на экран все найденные простые числа в порядке возрастания, слева от каждого числа выведите его порядковый номер в последовательности.
# Каждая пара чисел должна быть выведена в отдельной строке.

def D(x):
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            return False
    return True

k = 1
for x in range(245_690, 245_756+1):
    if D(x) == True:
        print(k, x)
    k += 1
'''
# Ответ:
# 22 245711
# 30 245719
# 34 245723
# 52 245741
# 58 245747
# 64 245753


# Тип 25 № 27852
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [185_311; 185_330], числа,
# имеющие ровно четыре различных натуральных делителя. Для каждого найденного числа запишите эти четыре делителя в
# четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.


def D(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
            if len(dl) > 4:
                return dl
    return sorted(dl)

for x in range(185_311, 185_330+1):
    dl = D(x)
    if len(dl) == 4:
        print(*dl)
'''
# Ответ:
# 1 2 92657 185314
# 1 47 3943 185321
# 1 241 769 185329



# Тип 25 № 27854
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [110203; 110245], числа,
# имеющие ровно четыре различных чётных натуральных делителя (при этом количество нечётных делителей может быть любым).
# Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.

def D(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            if j % 2 == 0:
                dl.add(j)
            if (x // j) % 2 == 0:
                dl.add(x // j)
            if len(dl) > 4:
                return dl
    return sorted(dl)

for x in range(110203, 110245+1):
    dl = D(x)
    if len(dl) == 4:
        print(*dl)
'''
# Ответ:
# 2 4 55102 110204
# 2 14 15746 110222
# 2 6 36742 110226
# 2 22 10022 110242




# Тип 25 № 27857
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [84052; 84130],
# число, имеющее максимальное количество различных натуральных делителей, если таких чисел несколько — найдите минимальное из них.
# Выведите на экран количество делителей такого числа и само число.



def D(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
    return sorted(dl)

maxi = 0
for x in range(84052, 84130+1):
    dl = D(x)
    if maxi < len(dl):
        maxi = len(dl)
        print(maxi, x)
'''
# Ответ: 72 84084



# Тип 25 № 41000
'''
# Пусть M(N) — сумма двух наибольших различных натуральных делителей натурального числа N, не считая самого числа и единицы.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 11_000_000, для которых 0<M(N)<10000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
            if len(dl) > 4:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(11_000_000+1,  110_000_000+1):
    dl = D(x)
    if len(dl) >= 2:
        M = dl[-1] + dl[-2]
        if 0 < M < 10000:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 8672
# 8388
# 8532
# 7042
# 7364


# Тип 25 № 47022
'''
# Пусть M(N) — пятый по величине делитель натурального числа N без учёта самого числа и единицы.
#
# Если у числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M(N)=0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 300_000_000, для которых M(N)>0. В ответе запишите найденные
# значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x // j)
            if len(dl) > 10:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(300_000_000+1, 300_000_000_000+1):
    dl = D(x)
    if len(dl) >= 5:
        M = dl[-5]
        if M > 0:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 17
# 1119403
# 151
# 16666667
# 27272728



# Тип 25 № 37160
'''
# Найдите 5 чисел больших 500000, таких, что среди их делителей есть число, оканчивающееся на 8, при этом этот делитель не равен 8 и самому числу.
# В качестве ответа приведите 5 наименьших чисел, соответствующих условию.
#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число, затем минимальный делитель,
# оканчивающийся на 8, не равный 8 и самому числу.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            if j != 8 and j % 10 == 8:
                dl.add(j)
            if (x // j) % 10 == 8:
                dl.add(x // j)
    return sorted(dl)

k = 0
for x in range(500_000+1, 5000000+1):
    dl = D(x)
    if len(dl) >= 1:
        print(x, dl[0])
        k += 1
        if k == 5:
            break
'''
# Ответ:
# 500002 178
# 500004 18
# 500016 48
# 500018 58
# 500020 4348


# Тип 25 № 45259
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

for x in '0123456789':
    for y in '0123456789':
        A = int(f'12345{x}7{y}8')
        if A % 23 == 0:
            print(A, A // 23)
'''

# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816



# Тип 25 № 47229
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.

# print(10**10)
# print('1?2139***4')

M = [i for i in range(0, 1000)]
M.append('')

my_dict = {}
for x in '0123456789':
    for y in M:
        A = int(f' 1{x}2139{y}4')
        if A % 2023 == 0:
            my_dict[A] = A // 2023

for key in sorted(my_dict):
    print(key, my_dict[key])
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048



# endregion Урок: **********************************************************


# todo: Стася = [2, 5, 6, 8, 12, 14+, 15, 16, 23, 25.2]
# на прошлом уроке: Говорили про 25 номер, легкую часть
# на следующем уроке: Повторяем 25, разбираем 9, 17 номера

