
# region Домашка: **********************************************************



# endregion Домашка: **********************************************************


# region Урок: **********************************************************

#
# № 8496 Апробация 17.05 (Уровень: Базовый)
# Все шестибуквенные слова, составленные из букв А, В, О, Р, Т,
# записаны в алфавитном порядке и пронумерованы начиная с 1.
# Ниже приведено начало списка.
# 1. АААААА
# 2. АААААВ
# 3. АААААО
# 4. АААААР
# 5. АААААТ
# 6. ААААВА
# …
# Под каким номером стоит слово ВОРОТА?
'''
s = sorted('АВОРТ')
i = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        slovo = a + b + c + d + e + f
                        if slovo == 'ВОРОТА':
                            print(i, slovo)
                        i += 1

import itertools
i = 1
for s in itertools.product(sorted('АВОРТ'), repeat=6):
    slovo = ''.join(s)
    if slovo == 'ВОРОТА':
        print(i, slovo)
    i += 1
'''
# Показать ответ: 4821


#
# № 8417 (Уровень: Базовый)
# Ярослав составляет коды из букв, входящих в слово ЯРОСЛАВ.
# Код должен состоять из 5 букв, буквы в коде не должны повторяться,
# согласных в коде должно быть больше, чем гласных, две гласные буквы нельзя ставить рядом.
# Сколько кодов может составить Ярослав?
'''
s = 'ЯРОСЛАВ'  # ЯА АЯ АО ОА ЯО ОЯ
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    slovo = a + b + c + d + e
                    if len(set(slovo)) == 5:  # буквы в коде не должны повторяться
                        glas = [i for i in slovo if i in 'ЯОА']
                        sogl = [i for i in slovo if i in 'РСЛВ']
                        if len(sogl) > len(glas):  # согласных в коде должно быть больше, чем гласных
                            if all(x not in slovo for x in 'ЯА АЯ АО ОА ЯО ОЯ'.split()):  #  две гласные буквы нельзя ставить рядом
                                count += 1
print(count)


import itertools
count = 0
for s in itertools.permutations('ЯРОСЛАВ', 5):
    slovo = ''.join(s)
    glas = [i for i in slovo if i in 'ЯОА']
    sogl = [i for i in slovo if i in 'РСЛВ']
    if len(sogl) > len(glas):  # согласных в коде должно быть больше, чем гласных
        if all(x not in slovo for x in 'ЯА АЯ АО ОА ЯО ОЯ'.split()):  # две гласные буквы нельзя ставить рядом
            count += 1
print(count)
'''
# Показать ответ: 1224



# № 6782 (Уровень: Средний)
# (PRO100 ЕГЭ) Определите количество шестизначных чисел, записанных в восьмеричной системе счисления,
# в записи которых есть ровно две цифры 6, при этом никакая нечётная цифра не стоит рядом с цифрой 6.
#
# Пример шестизначного числа, записанного в восьмеричной системе счисления – 1234568.
'''
s = '01234567'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        temp = a + b + c + d + e + f
                        if a != '0' or temp[0] != '0':
                            if temp.count('6') == 2:  # в записи которых есть ровно две цифры 6
                                if all(x not in temp for x in '16 61 36 63 56 65 76 67'.split()):
                                    count += 1
print(count)
'''
# Показать ответ: 5229



#
# № 7811 (Уровень: Базовый)
# (М. Ишимов) Откройте файл электронной таблицы, содержащей в каждой строке пять натуральных чисел.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
#
# – в строке все числа различны;
# – сумма максимального и минимального чисел строки более чем в четыре раза меньше утроенной суммы трёх оставшихся.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if len(set(M)) == len(M):
        if 4 * (M[0] + M[4]) < (3 * (M[1] + M[2] + M[3])):
            count += 1
print(count)
'''
# Ответ: 11420


# № 7030 Danov2303 (Уровень: Сложный)
# (А.Богданов) Откройте файл электронной таблицы, содержащей в каждой строке шесть натуральных чисел.
# Определите количество строк таблицы, для которых выполняются все условия:
#
# - в строке три числа повторяются ровно два раза;
# - эти три числа образуют стороны прямоугольного треугольника.
#
# В ответе запишите одно число.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if len(set(M)) == 3 and all(M.count(x) == 2 for x in M):
        a, b, c = sorted(set(M))
        if c ** 2 == a ** 2 + b ** 2:
            count += 1
print(count)
'''
# Ответ: 148


#
# № 6999 (Уровень: Базовый)
# В файле электронной таблицы в каждой строке содержатся шесть неотрицательных целых чисел.
# Определите количество строк таблицы, для которых выполнены оба условия:
#
# – в строке ровно три числа кратных трем;
# – размах чисел строки не больше суммы чисел строки, кратных 3.
#
# Примечание. Размах — это разность между наибольшим и наименьшим значениями в наборе данных.
# Например, для набора 2 3 6 4 7 5, размах будет 7 – 2 = 5.
'''
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    A = [i for i in M if i % 3 == 0]
    if len(A) == 3:  # – в строке ровно три числа кратных трем;
        if max(M) - min(M) <= sum(A):
            count += 1
print(count)
'''
# Ответ: 1835


# № 6081 /dev/inf 02.2023 (Уровень: Сложный)
# (А. Рогов) Откройте файл электронной таблицы, содержащей в каждой строке шесть натуральных чисел.
# Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия:
#
# – в строке только одно число повторяется ровно два раза, остальные числа различны;
# – шесть чисел можно разбить на две тройки с равными суммами.
'''
import itertools
count = 0
for s in open('9.txt'):
    M = sorted([int(i) for i in s.split()])
    if len(set(M)) == len(M)-1:
        if any(A[0] + A[1] + A[2] == A[3] + A[4] + A[5] for A in itertools.permutations(M, 6)):
            count += 1
print(count)
'''
# Ответ: 127

# endregion Урок: **********************************************************


# todo: Стася = [1, 2, 3, 4, 5, 6, 7, 8, 9.2, 11, 12, 14+, 15, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# на прошлом уроке: Повторяли все 8 и 9 типы задач.
# на следующем уроке: Посмотреть 26 задачи.
