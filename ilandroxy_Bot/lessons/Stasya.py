
# region Домашка: **********************************************************

# Тип 5 № 47002
'''
# Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
#
# 1.Строится двоичная запись числа N.
# 2. Вычисляется количество единиц, стоящих на чётных местах в двоичной записи числа N без ведущих нулей, и количество нулей, стоящих на нечётных местах.
# Места отсчитываются слева направо (от старших разрядов к младшим, начиная с единицы).
# 3.Результатом работы алгоритма становится модуль разности полученных двух чисел.
#
# При каком наименьшем N в результате работы алгоритма получится R=4?

for n in range(2, 10000):
    temp = n

    N = []
    while temp > 0:
        N.append(temp % 2)
        temp //= 2
    N.reverse()

    sum1 = 0
    sum0 = 0
    for i in range(0, len(N)):
        if (i+1) % 2 == 0 and N[i] == 1:
            sum1 += 1
        elif (i+1) % 2 != 0 and N[i] == 0:
            sum0 += 1

    if abs(sum1 - sum0) == 4:
        print(n)
        break
'''

# Вариант 2
'''
for n in range(2, 10000):
    s = bin(n)[2:]
    sum1 = 0
    sum0 = 0
    for i in range(0, len(s)):
        if (i + 1) % 2 == 0 and s[i] == '1':
            sum1 += 1
        elif (i + 1) % 2 != 0 and s[i] == '0':
            sum0 += 1
    if abs(sum1 - sum0) == 4:
        print(n)
        break
'''
# Вариант 3
'''
for n in range(2, 10000):
    s = bin(n)[2:]

    sum1 = s[1::2].count('1')
    sum0 = s[0::2].count('0')
    if abs(sum1 - sum0) == 4:
        print(n)
        break
'''

# Вариант 4
'''
for n in range(2, 10000):
    if abs(bin(n)[2:][1::2].count('1') - bin(n)[2:][0::2].count('0')) == 4:
        print(n)
        break
'''
# Ответ: 255



# Тип 12 № 47216
'''  
# Дана программа для Редактора:
#
# НАЧАЛО
# ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>0)
# ЕСЛИ нашлось (>1)
# ТО заменить (>1, 22>)
# КОНЕЦ ЕСЛИ
# ЕСЛИ нашлось (>2)
# ТО заменить (>2, 2>)
# КОНЕЦ ЕСЛИ
# ЕСЛИ нашлось (>0)
# ТО заменить (>0, 1>)
# КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
# КОНЕЦ

# На вход приведённой выше программе поступает строка, начинающаяся с символа «>», а затем содержащая 39 цифр «0», n цифр «1» и 39 цифр «2», расположенных в произвольном порядке.
# Определите наименьшее значение n, при котором сумма числовых значений цифр строки, получившейся в результате выполнения программы, является простым числом.

def Simpler(x):
    for j in range(2, x):
        if x % j == 0:
            return False
    return True


for n in range(0, 1000):
    s = '>' + '0' * 39 + '1' * n + '2' * 39
    while '>1' in s or '>2' in s or '>0' in s:
        if '>1' in s:
            s = s.replace('>1', '22>', 1)
        if '>2' in s:
            s = s.replace('>2', '2>', 1)
        if '>0' in s:
            s = s.replace('>0', '1>', 1)

    summ = s.count('1') + s.count('2') * 2
    if Simpler(summ) == True:
        print(n)
        break
'''
# Ответ: 5


# Тип 14 № 48393
# Операнды арифметического выражения записаны в системах счисления с основаниями 8 и 11:
#
# y04x5_11 + 253xy_8
#
# Определите значения x и y, при которых значение данного арифметического выражения будет наименьшим и кратно 117.
# Для найденных значений x и y вычислите частное от деления значения арифметического выражения на 117 и укажите его в ответе в десятичной системе счисления.
'''
for x in '01234567':
    for y in '01234567':
        a = int(f'{y}04{x}5', 11)
        b = int(f'253{x}{y}', 8)

        if (a + b) % 117 == 0:
            print((a + b) // 117)
            break
Ответ: 224
'''

# Тип 17 № 37359
# В файле содержится последовательность из 10 000 положительных чисел.
# Первое число не превышает 10 000.
# Определите и запишите в ответ сначала количество элементов последовательности, у которого количество элементов кратно 117, обнаруживается из суммирования элементов таких пар.
# В данной задаче под парой ставится два различных элемента последовательности.
# Порядок элементов в паре не важен.
'''
f = open('17.txt')
M = [int(i) for i in f]

count = 0
maxi = 0
for i in range(len(M)-1):
    for j in range(i+1, len(M)):
        if (M[i] + M[j]) % 117 == 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
# Ответ: 427120 19890
'''


# Тип 17 № 37371
# В файле содержится последовательность из 10 000 положительных чисел.
# Первое число не превышает 10 000. Определите и запишите в ответ сначала количество пар элементов по следам, у которого разность элементов кратна 60, реализуется из разности таких элементов пар, затем максимальную из разностей элементов таких пар.
# В данной задаче под парой ставится два различных элемента последовательности. Порядок элементов в паре не важен.
'''
M = [int(i) for i in open('17.txt')]

count = 0
maxi = 0
for i in range(len(M)):
    for j in range(i+1, len(M)):
        if (M[i] - M[j]) % 60 == 0:
            count += 1
            maxi = max(maxi, M[i] - M[j])
print(count, maxi)
# Ответ: 832722 9960
'''

# Тип 17 № 47014
'''
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых один из двух элементов делится на 5, а другой меньше среднего арифметического всех нечётных элементов последовательности.
# В ответе запишите два числа: сначала количество найденных пар, а затем — максимальную сумму элементов таких пар.

M = [int(i) for i in open('17.txt')]

count = 0
summ = 0
for x in M:
    if x % 2 != 0:
        summ += x
        count += 1
sred = summ / count

kol = 0
maxi = 0
for i in range(0, len(M)-1):
    if (M[i] % 5 == 0 and M[i+1] < sred) or (M[i] < sred and M[i+1] % 5 == 0):
        kol += 1
        maxi = max(maxi, M[i] + M[i+1])
print(kol, maxi)

# Ответ: 1061 14847
'''

# Тип 17 № 37340
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, разность которых четна и хотя бы одно из чисел делится на 31, затем максимальную из сумм элементов таких пар.
'''
M = [int(i) for i in open('17.txt')]

count = 0
maxi = 0

for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if ((M[i] - M[j]) % 2 == 0) and (M[i] % 31 == 0 or M[j] % 31 == 0):
            count += 1
            maxi = max(maxi,M[i] + M[j])
print(count,maxi)

# Ответ: 1569269 19982
'''

# endregion Домашка: **********************************************************


# region Урок: **********************************************************

# Тип 15 № 14277
'''
# На числовой прямой даны два отрезка: P = [17, 40] и Q = [20, 57].
# Отрезок A таков, что приведённая ниже формула истинна при любом значении переменной х:
#
# ¬(x ∈ A) →(((x ∈ P) ⋀ (x ∈ Q)) → (x ∈ A))
#
# Какова наименьшая возможная длина отрезка A?

def F(x):
    P = 17 <= x <= 40
    Q = 20 <= x <= 57
    A = a1 <= x <= a2
    return (not A) <= ((P and Q) <= A)

L = [i/4 for i in range(1*4, 70*4)]

M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)

print(min(M))
'''
# Ответ: 20


# Тип 15 № 47012
'''
# На числовой прямой даны два отрезка: P=[69;91] и Q=[77;114].
# Укажите наименьшую возможную длину такого отрезка A, для которого формула
#
# (x∈P)→(¬((x∈P)≡(x∈Q))∨((x∈Q)→(x∈A)))
#
# тождественно истинна (т.е. принимает значение 1 при любом значении переменной х).

def F(x):
    P = 69 <= x <= 91
    Q = 77 <= x <= 114
    A = a1 <= x <= a2
    return P <= (not(P == Q) or (Q <= A))

L = [i/4 for i in range(60*4, 120*4)]

M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)

print(min(M))
'''
# Ответ: 14


# Тип 15 № 34541
'''
# На числовой прямой даны два отрезка: Р = [3, 38] и Q = [21, 57]. Какова наибольшая возможная длина интервала A, что логическое выражение
#
# ((х ∈ Q) → (х ∈ Р)) → ¬(х ∈ A)
#
# тождественно истинно, то есть принимает значение 1 при любом значении переменной х.


def F(x):
    P = 3 <= x <= 38
    Q = 21 <= x <= 57
    A = a1 <= x <= a2
    return (Q <= P) <= (not A)

L = [i/4 for i in range(1*4, 70*4)]

M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)

print(max(M))
'''
# Ответ: 19



# № 1072
'''
# Элементами множеств А, P и Q являются натуральные числа,
# причём P = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30} и Q = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31}. Известно, что выражение
#
# ((x ∈ A) → (x ∈ P)) ∧ ((x ∈ Q) → (x ∉ A))
#
# истинно (т. е. принимает значение 1) при любом значении переменной х. Определите наибольшее возможное количество элементов множества A.


a = set(range(1, 1000))  # заполнили множество числами 1 - 1000

def F(x):
    P = x in {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30}
    Q = x in {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31}
    A = x in a
    return (A <= P) and (Q <= (not A))

for x in range(1, 1000):
    if F(x) == False:
        a.remove(x)
print(a, len(a))
'''
# Ответ: 10


# № 750
'''
# Элементами множества А являются натуральные числа. Известно, что выражение
#
# ¬(x ∈ A) → (¬(x ∈ {1, 12}) ∧ ¬(x ∈ {12, 13, 14, 15, 16}))
#
# истинно (т. е. принимает значение 1) при любом значении переменной х. Определите наименьшее возможное количество элементов множества A.

a = set()  # заполнили множество числами 1 - 1000

def F(x):
    P = x in {1, 12}
    Q = x in {12, 13, 14, 15, 16}
    A = x in a
    return (not A) <= ((not P) and (not Q))

for x in range(1, 1000):
    if F(x) == False:
        a.add(x)
print(a, len(a))
'''
# Ответ: 6


# Тип 7 № 35896
'''
# В информационной системе хранятся изображения размером 1024×768 пикселей. Методы сжатия изображений не используются.
# Каждое изображение дополняется служебной информацией, которая занимает 640 Кбайт. Для хранения 2048 изображений потребовалось 2 Гбайт.
# Сколько цветов использовано в палитре каждого изображения?

# I бит информации = i бит на пиксель * (a * b) кол-во пикселей или плотность пикселей
# I = i * (a * b)
# N кол-во цветов = 2**i бит на пиксель

I = (2 * 2**33) / 2048  # кол-во бит на 1 изображение
I -= 640*2**13
print(I)

i = int(I / (1024*768))
print(i)
N = 2**i
print('Кол-во цветов: ', N)
'''
# Ответ: 16

# 1 байт = 2**3 бит
# 1 Кбайт = 2**10 байт
# 1 Мбайт = 2**10 Кбайт
# 1 Гбайт = 2**10 Мбайт



# Тип 11 № 36024
'''
# При регистрации в компьютерной системе каждому объекту присваивается идентификатор, состоящий из 32 символов
# и содержащий только десятичные цифры и символы из 240-символьного специального алфавита.
# В базе данных для хранения каждого идентификатора отведено одинаковое и минимально возможное целое число байт.
# При этом используют посимвольное кодирование идентификаторов, все символы кодируют одинаковым и минимально возможным количеством бит.
#
# Определите объём памяти (в Кбайт), необходимый для хранения 3200 идентификаторов. В ответе запишите только целое число— количество Кбайт.


symbols = 32
alphabet = 250
# alphabet = 2 ** i
i = 8  # чтобы помещалось 256 бит

I_bit = symbols * i
print(I_bit)
I_byte = I_bit / 8
print(I_byte)

print('Результат: ', (3200 * I_byte) / (2**10))
'''
# Ответ: 100


# endregion Урок: **********************************************************


# todo: Стася = [2, 5, 6, 8, 12, 14+, 15, 16, 23], на следующем уроке: задачи с отрезками и множествами 15+ номера


