# region Домашка: **********************************************************


# endregion Домашка: **********************************************************


# region Урок: **********************************************************

'''
s = sorted('ЦАПЛЯ')
count = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if temp.count('А') <= 1 and temp.count('Ц') == 2 and 'Л' not in temp:
                        print(count, temp)
                        exit()
                    count += 1
'''
# Ответ: 319 АППЦЦ


# № 7596 Досрочная волна 2023 (Уровень: Базовый)
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых только одно число трехзначное,
# и сумма элементов пары кратна минимальному трехзначному значению последовательности, оканчивающемуся на 5.
# В ответе запишите два числа: сначала количество найденных пар, затем минимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
A = [int(i) for i in M if len(str(i)) == 3 and abs(i) % 10 == 5]

count = 0
mini = 9999999

for i in range(0, len(M)-1):
    if (len(str(M[i])) == 3 and len(str(M[i + 1])) != 3) or (len(str(M[i + 1])) == 3 and len(str(M[i])) != 3):
        if (M[i] + M[i + 1]) % min(A) == 0:
            count += 1
            mini = min(mini, M[i]+M[i+1])
print(count, mini)
'''
# Ответ: 2 33120


# № 6015 ФИПИ 03.02.23 (Уровень: Базовый)
# Определите количество семизначных чисел, записанных в девятеричной системе счисления,
# в записи которых ровно одна цифра 8, при этом числа не начинаются с нечётных цифр и не оканчиваются чётными цифрами.
'''
import itertools
count = 0
for s in itertools.product('012345678', repeat=7):
    temp = ''.join(s)
    if temp.count('8') == 1:
        if temp[0] != '0':
            if temp[0] not in '1357':
                if temp[-1] not in '02468':
                    count += 1
print(count)
'''
# Ответ: 376832


# № 6012 ФИПИ 03.02.23 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр в двоичной записи числа чётная, то к этой записи справа дописывается 0,
# а затем два левых разряда заменяются на 1;
# б) если сумма цифр в двоичной записи числа нечётная, то к этой записи справа дописывается 1,
# а затем два левых разряда заменяются на 11.
#
# Полученная таким образом запись является двоичной записью искомого числа R.
#
# Например, для исходного числа 610 = 1102 результатом является число 1002 = 410,
# а для исходного числа 410 = 1002 результатом является число 11012 = 1310.
#
# Укажите число N, после обработки которого с помощью этого алгоритма получается наименьшее значение R, большее 49.
# В ответе запишите это число в десятичной системе счисления.
'''
R = []
for n in range(1, 1000):
    s = bin(n)[2:]
    if s.count('1') % 2 == 0:
        s = '1' + s[2:] + '0'
    else:
        s = '11' + s[2:] + '1'

    r = int(s, 2)
    if r > 49:
        R.append([r, n])

print(min(R))
'''
# Показать ответ: 57


# № 7345 (Уровень: Сложный)
# (Д. Статный) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#
# Найдите все числа, не превышающие 10**10, которые соответствуют маске 8*80*06 и при этом без остатка делятся на 4546.
# В ответе запишите каждое 60-е число, считая от 1-го (61-е, 121-е и т.д.)
# в порядке возрастания, справа от каждого запишите частное от его деления на 4546.
'''
from fnmatch import *
i = 1
for x in range(4546, 10**10, 4546):
    if fnmatch(str(x), '8*80*06'):
        if i % 60 == 1 and i != 1:
            print(x, x // 4546)
        i += 1
'''
# Показать ответ
# 8185804906 1800661
# 8446518006 1858011
# 8780876306 1931561
# 8894980906 1956661


# № 6903 (Уровень: Базовый)
'''
R = []
for n in range(1, 100):
    s = bin(n)[2:]
    for _ in range(2):
        summ = s.count('1')
        if summ % 2 == 0:
            s = '11' + s[2:] + '00'
        else:
            s = '10' + s[2:] + '11'
    r = int(s, 2)
    R.append(r)
print(max(R))
'''
# Ответ: 1584

'''
# s = '1' * 38 + '2' * 34 + '3' * 30
s = '32' * 30 + '1' * 38 + '2' * 4
while '33' in s or '11' in s or '22' in s:
    if '33' in s:
        s = s.replace('33', '12', 1)
    if '11' in s:
        s = s.replace('11', '32', 1)
    if '22' in s:
        s = s.replace('22', '31', 1)
print(sum([int(i) for i in s]))
'''
# Ответ: 253

'''
for x in range(0, 67):
    A = [3, x, 2, 1]
    a = 0
    A.reverse()
    for i in range(0, len(A)):
        a += A[i]*81**i
    B = [1, 7, x, 4]
    b = 0
    B.reverse()
    for i in range(0, len(B)):
        b += B[i]*67**i
        
    if (a+b) % 35 == 0:
        print((a+b)//35)
'''


# Ответ: 62244


# № 7347 (Уровень: Средний)
# (Д. Статный) Алгоритм вычисления значения функции
# F(n), где n – натуральное число, задан следующими соотношениями:
# F(n)=1 при n<4;
# F(n)=F(n−1)⋅(n−3), если n>3.
# Чему равно значение функции F(1401)/F(1397)?

'''
def F(n):
    if n < 4:
        return 1
    if n > 3:
        return F(n - 1) * (n - 3)


print((F(1401) / F(1397)))
'''

# F(1401) = F(1400) * (1401 - 3)
# F(1400) = F(1399) * (1400 - 3)
# F(1399) = F(1398) * (1399 - 3)
# F(1398) = F(1397) * (1398 - 3)   /    F(1397)
'''
print((1401 - 3) * (1400 - 3) * (1399 - 3) * (1398 - 3))
'''
# Показать ответ: 3803322944520


# № 7020 (Уровень: Базовый)
# (М.Шагитов) В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от -100000 до 100000 включительно.
# Определите количество четверок последовательности, в которых остаток от деления ни одного из модулей
# чисел четверки на 111 не равен минимальному положительному элементу последовательности.
# В ответе запишите количество найденных четверок, затем минимальную из сумм элементов таких четверок.
# В данной задаче под четверкой подразумевается четыре идущих подряд элемента последовательности.
'''
nums = [int(i) for i in open('17.txt')]
nums_min = min([i for i in nums if i > 0])
count = 0
mini = 99999999
for i in range(0, len(nums)-3):
    if all(abs(x) % 111 != nums_min for x in [nums[i], nums[i+1], nums[i+2], nums[i+3]]):
        count += 1
        mini = min(mini, nums[i] + nums[i+1] + nums[i+2] + nums[i+3])
print(count, mini)
'''
# Ответ: 6335 -367715


# № 7016 (Уровень: Базовый)
# (Д. Статный)  Текстовый файл состоит из букв латинского алфавита и десятичных цифр.
# Определите максимальную длину подстроки, которая ограничена с одной стороны буквой A,
# а с другой - D и не содержит других букв A и D внутри.
'''
ALPHABET = sorted('0123456789QWERTYUUIOPASDFGHJKLZXCVBNM')
s = open('24.txt').readline()
s = s.replace('A', '*').replace('D', '#')
for x in ALPHABET:
    s = s.replace(x, '.')
M = [len(i[:i.index('#')]) for i in s.split('*') if '#' in i]
print(max(M))
'''
# Ответ: 273



# № 6925 (Уровень: Сложный)
# (Д. Статный) Откройте файл электронной таблицы, содержащей в каждой строке шесть неотрицательных целых чисел.
# Определите количество строк таблицы, содержащих числа, для которых выполнено только одно из условий:
#
# – в строке только одно число повторяется дважды, а остальные не повторяются;
#
# – в строке среднее арифметическое чётных чисел отличается от среднего арифметического нечётных чисел более чем на 50.
# В ответе запишите только число.
# *Среднее арифметическое для 0 чисел принять равным нулю.
'''
count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    flag1, flag2 = False, False
    if len(set(M)) == len(M)-1:
        flag1 = True

    chet = [i for i in M if i % 2 == 0]
    nechet = [i for i in M if i % 2 != 0]

    if len(chet) == 0 or len(nechet) == 0:
        if (sum(M) / len(M)) > 50:
            flag2 = True
    else:
        sred_chet = sum(chet) / len(chet)
        sred_nechet = sum(nechet) / len(nechet)
        if abs(sred_chet - sred_nechet) > 50:
            flag2 = True

    if flag1 + flag2 == 1:
        count += 1
print(count)
'''
# 862

#
# № 6901 (Уровень: Средний)
# (Д. Статный) Все пятибуквенные слова, в составе которых могут быть только буквы слова БАРАШ,
# записаны в алфавитном порядке и пронумерованы начиная с 1.
#
# Ниже приведено начало списка.
# 1. ААААА
# 2. ААААБ
# 3. ААААР
# 4. ААААШ
# 5. АААБА
#
# Под каким последним номером идёт слово, в котором не более 3-х согласных
# и только одна буква повторяется дважды, а остальные не повторяются?
'''
s = sorted('БАРШ')
count = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if (len(temp) - temp.count('А')) <= 3:
                        if len(set(temp)) == 4:
                            print(count, temp)
                    count += 1
'''
# Показать ответ: 913


# № 7016 (Уровень: Базовый)
# (Д. Статный)  Текстовый файл состоит из букв латинского алфавита и десятичных цифр.
# Определите максимальную длину подстроки, которая ограничена с одной стороны буквой A,
# а с другой - D и не содержит других букв A и D внутри.


'''
s = open('24.txt').readline()
for x in '0123456789QWERTYUIOPSFGHJKLZXCVBNM':
    s = s.replace(x, '*')
s = s.replace('A', ' A')
M = [i for i in s.split() if 'D' in i]
maxi = 0
for x in M:
    maxi = max(maxi, x.index('D') - x.index('A'))
print(maxi+1)


s = open('24.txt').readline()
for x in '0123456789QWERTYUIOPSFGHJKLZXCVBNM':
    s = s.replace(x, '*')
s = s.replace('D', ' D')
M = [i for i in s.split() if 'A' in i and 'D' in i]
maxi = 0
for x in M:
    maxi = max(maxi, x.index('A') - x.index('D'))
print(maxi+1)
'''
'''
s = open('24.txt').readline()
for x in '0123456789QWERTYUIOPSFGHJKLZXCVBNM':
    s = s.replace(x, '*')
M = [i for i in s.split('A') if 'D' in i]
maxi = 0
for x in M:
    maxi = max(maxi, len(x) - x.index('D'))
    maxi = max(maxi, x.index('D'))
print(maxi+1)  # не забываем букву А
'''

'''
s = open('24.txt').readline()
for x in '0123456789QWERTYUIOPSFGHJKLZXCVBNM':
    s = s.replace(x, '*')
M = [max(len(i) - i.index('D'), i.index('D')) for i in s.split('A') if 'D' in i]
print(max(M) + 1)
'''
# Ответ: 273

# Текстовый файл состоит из символов E, D и F.
#
# Определите максимальную длину непрерывной последовательности символов,
# состоящей из чередующихся символов E и F в прилагаемом файле.
# Искомая последовательность может начинаться как с символа E, так и с символа F.
#
# Для выполнения этого задания следует написать программу.
'''
s = open('24.txt').readline()
s = s.replace('EF', '**').replace('FE', '++')
s = s.split('D')
for x in s:
    if x.count('*') > 9:
        print(x)
'''


'''
s = open('24.txt').readline()
s = s.replace('EF', '**').replace('FE', '++')

M = [i for i in s.split('D')]
maxi = 0
for x in M:
    if maxi <= len(x):
        maxi = len(x)
        print(x, x.count('*'))
'''

'''
with open('24.txt') as f:
    s = f.readline()
    count = maxi = 1

    for i in range(len(s)-1):
        if (s[i] == 'E' and s[i+1] == 'F') or (s[i] == 'F' and s[i+1] == 'E'):
            count += 1
            maxi = max(maxi, count)
        else:
            count = 1
print(maxi)
'''

# № 6024 ФИПИ 03.02.23 (Уровень: Базовый)
# В файле содержится последовательность натуральных чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых только один из элементов оканчивается на 12,
# а квадрат суммы элементов пары меньше квадрата максимального элемента последовательности, оканчивающегося на 12.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.

M = [int(i) for i in open('17.txt')]
A = [int(i) for i in M if i % 100 == 12]
count = 0
maxi = -999999

for i in range(0, len(M)-1):
    if (M[i] % 100 == 12 and M[i+1] % 100 != 12) or (M[i] % 100 != 12 and M[i+1] % 100 == 12):
        if (max(A)**2) > ((M[i] + M[i + 1])**2):
            count += 1
            maxi = max(maxi, M[i]+M[i+1])
print(count, maxi)

# Ответ: 114 89033

# endregion Урок: **********************************************************


# todo: Стася = [1, 2, 3, 4, 5, 6, 7, 8, 9.2, 11, 12, 14+, 15, 16, 17, 18, 19-21, 22, 23, 24, 25.2]
# на прошлом уроке: Повторяли все 8 и 9 типы задач.
# на следующем уроке: #todo: задача 7016 - добить
