
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# Тип 24 № 36037
'''
# Текстовый файл состоит не более чем из 1 200 000 символов X, Y, и Z.
# Определите максимальное количество идущих подряд символов, среди которых нет подстроки XZZY.
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

s = open('24.txt').readline()
# s = 'XZZYOOOOOOOOXZZY'
s = s.replace('XZZY', '*').split('*')
M = [len(i) for i in s]
print(3 + max(M) + 3)

# ***OOOOOOOO****
# XZZYOOOOOOOOXZZY
'''
# Ответ: 1713



# Тип 24 № 27421
'''
# Текстовый файл состоит не более чем из 10**6 символов X, Y и Z.
# Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.
#
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

s = open('24.txt').readline()

count = 1
maxi = 0
for i in range(0, len(s)-1):
    if s[i] != s[i+1]:  # два соседних различны.
        count += 1
        maxi = max(maxi, count)
    else:
        count = 1
print(maxi)
'''
# Ответ: 35



# Тип 24 № 35998
'''
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# В строках, содержащих менее 25 букв A, нужно определить и вывести максимальное расстояние между одинаковыми буквами в одной строке.

S = open('24.txt').readlines()
print(len(S))
M = []
for x in S:
    if x.count('A') < 25:
        M.append(x)
print(len(M))

alphabet = 'QWERTYUIOPASDFGHJKLZXCVBNM'
# A = [i for i in alphabet]
# alphabet = sorted(A)  # необязательно действие, разбили строку на список строк и отсортировали в алфавитном порядке

maxi = 0
for x in M:
    for a in alphabet:
        maxi = max(maxi, x.rindex(a) - x.index(a))
print(maxi)
'''
# Ответ: 1004


# Тип 24 № 47228
'''
# Текстовый файл состоит из символов A, C, D, F и O.
# Определите максимальное количество идущих подряд пар символов вида
#
# согласная + гласная.
#
# Для выполнения этого задания следует написать программу.

s = open('24.txt').readline()
sogl = 'CDF'
glas = 'AO'

count = 1
maxi = 0
example1 = ''
example2 = ''
for i in range(0, len(s)-1):
    if (s[i] in sogl and s[i+1] in glas) or (s[i] in glas and s[i+1] in sogl):
        count += 1
        example1 += s[i+1]
        if maxi < count:
            maxi = count
            example2 = example1
        # maxi = max(maxi, count)
    else:
        count = 1
        example1 = ''

print(maxi, example2)
print(len(example2)/2)
'''
# Ответ: 95


# Тип 24 № 35482
'''
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# Необходимо найти строку, содержащую наименьшее количество букв G
# (если таких строк несколько, надо взять ту, которая находится в файле раньше),
# и определить, какая буква встречается в этой строке чаще всего.
# Если таких букв несколько, надо взять ту, которая позже стоит в алфавите.

S = open('24.txt').readlines()

r = ''
mini = 99999
for x in S:
    if x.count('G') < mini:
        mini = x.count('G')
        r = x
        print(r, mini)

maxi = 0
alphabet = 'QWERTYUIOPASDFGHJKLZXCVBNM'
for a in alphabet:
    if maxi <= r.count(a):
        maxi = r.count(a)
        print(maxi, a)
'''
# Ответ: T


# Тип 24 № 33769
'''
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите символ, который чаще всего встречается в файле после двух одинаковых символов.

s = open('24.txt').readline()
print(len(s))

M = []
for i in range(0, len(s)-2):
    if s[i] == s[i+1]:
        M.append(s[i+2])  # после двух одинаковых символов

maxi = 0
alphabet = 'QWERTYUIOPASDFGHJKLZXCVBNM'
for a in alphabet:
    if maxi < M.count(a):
        maxi = M.count(a)
        print(maxi, a)
'''
# Ответ: 1547 K



# Тип 25 № 38959
'''
# Пусть M(N) — произведение 5 наименьших различных натуральных делителей натурального числа N, не считая единицы.
# Если у числа N меньше 5 таких делителей, то M(N) считается равным нулю.
#
# Найдите 5 наименьших натуральных чисел, превышающих 200_000_000, для которых 0<M(N)<N.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
            if len(dl) > 10:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(200_000_000+1, 400_000_000):
    dl = D(x)
    if len(dl) >= 5:
        M = dl[0] * dl[1] * dl[2] * dl[3] * dl[4]
        if 0 < M < x:
            print(x, M, dl)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 1728
# 21632
# 1260
# 1152
# 4127787



# Тип 25 № 41000
'''
# Пусть M(N)— сумма двух наибольших различных натуральных делителей натурального числа N, не считая самого числа и единицы.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 11_000_000, для которых 0<M(N)<10_000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
            if len(dl) > 4:
                return sorted(dl)
    return sorted(dl)

k = 0
for x in range(11_000_000+1, 400_000_000):
    dl = D(x)
    if len(dl) >= 2:
        M = dl[-1] + dl[-2]
        if 0 < M < 10000:
            print(x, M, dl)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 8672
# 8388
# 853
# 7042
# 7364



# Тип 23 № 16898
'''
# У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Прибавить 3
#
# Сколько существует программ, которые преобразуют исходное число 2 в число 14
# и при этом траектория вычислений не содержит чисел 5 и 10?

def F(a, b):
    if a > b or a == 5 or a == 10:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a+3, b)

print(F(2, 14))
'''
# Ответ: 26



# Тип 17 № 47221
'''
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от −10000 до 10000 включительно.
# Определите количество пар последовательности, в которых только одно число оканчивается на 3,
# а сумма квадратов элементов пары не меньше квадрата максимального элемента последовательности, оканчивающегося на 3.
# В ответе запишите два числа: сначала количество найденных пар, затем максимальную из сумм квадратов элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.

M = [int(i) for i in open('17.txt') if int(i) % 10 == 3]
MAXI = max(M) ** 2

A = [int(i) for i in open('17.txt')]

count = 0
maxi = 0
for i in range(0, len(A)-1):
    if (str(A[i])[-1] == '3' and str(A[i+1])[-1] != '3' and (A[i] ** 2 + A[i+1]**2 >= MAXI)) or \
            (str(A[i+1])[-1] == '3' and str(A[i])[-1] != '3' and (A[i] ** 2 + A[i+1]**2 >= MAXI)):
        count += 1
        maxi = max(maxi, A[i] ** 2 + A[i+1]**2)
print(count, maxi)


f = open('17.txt')
nums = [int(i) for i in f]
max_square_sum = count = 0
max_square = max(list(filter(lambda x: x % 10 == 3, nums))) ** 2
for i in range(len(nums) - 1):
    check_suf = str(nums[i])[-1] == '3' and str(nums[i + 1])[-1] != '3' or str(nums[i])[-1] != '3' and str(nums[i + 1])[-1] == '3'
    if check_suf and nums[i] ** 2 + nums[i + 1] ** 2 >= max_square:
        count += 1
        max_square_sum = max(max_square_sum, nums[i] ** 2 + nums[i + 1] ** 2)
print(count, max_square_sum)
'''
# 180 190360573


# endregion Урок: ******************************************************************




# todo: Валерия = [2, 5, 6, 8, 12, 14+, 15+, 16, 17, 23, 24, 25]
# на прошлом уроке: Добили 24 номер, повторили 25, 23, 17 номера
# на следующем уроке: Составить вариант для проверки пройденных номеров
