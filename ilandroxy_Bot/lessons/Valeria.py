
# region Домашка: ******************************************************************

# 19.12

# Тип 15 № 9653
'''
# На числовой прямой даны два отрезка: P = [10, 29] и Q = [13, 18].
# Укажите наибольшую возможную длину отрезка A, для которого выражение
# ((x ∈ A) → (x ∈ P)) ∨ (x ∈ Q)
# тождественно истинно, то есть принимает значение 1 при любом значении переменной х.

def F(x):
    P = 10 <= x <= 29
    Q = 13 <= x <= 18
    A = a1 <= x <= a2
    return A <= P or Q
L = [i / 4 for i in range(10 * 4, 30 * 4)]
M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L):
            M.append(a2-a1)
print(max(M))
'''
# Ответ: 19


# Тип 15 № 47012
''' 
# На числовой прямой даны два отрезка: P=[69;91] и Q=[77;114]. Укажите наименьшую возможную длину такого отрезка A,
# для которого формула
# P→(¬(P≡Q)∨(Q→A))
# P <= ((not(P == Q) or (Q <= A)))
def F(x):
    P = 69 <= x <= 91
    Q = 77 <= x <= 114
    A = a1 <= x <= a2
    return P <= ((not(P == Q) or (Q <= A)))

L = [i / 4 for i in range(60 * 4,  120* 4)]
M = []
for a1 in L:
    for a2 in L:
        if all(F(x) for x in L) == True:
            M.append(a2-a1)
print(min(M))
'''




# № 428
''' 
# Элементами множеств А, P, Q являются натуральные числа, причём P={1,3,4,9,11,13,15,17,19,21},
# Q={3,6,9,12,15,18,21,24,27,30}. Известно, что выражение
# ((x ∈ P) → (x ∈ A)) ∨ ((x ∉ A) → (x ∉ Q))
# истинно (т.е. принимает значение 1 при любом значении переменной х.
# Определите наименьшее возможное произведение элементов в множестве A.

a = set()

def F(x):
    P = x in {1,3,4,9,11,13,15,17,19,21}
    Q = x in {3,6,9,12,15,18,21,24,27,30}
    A = x in a
    return (P <= A) or ((not A) <= (not Q))

for x in range(1, 1000):
    if F(x) == False:
        a.add(x)
print(a)
print(9 * 3 * 21 * 15)
'''
# Ответ: 8505


# № 754
'''
# Элементами множеств А, P и Q являются натуральные числа, причём P = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
# и Q = { 5, 10, 15, 20, 25, 30, 35, 40, 45, 50}. Известно, что выражение
# ((x ∈ A) → (x ∈ P)) ∧ ((x ∈ Q) → ¬(x ∈ A))
# истинно (т. е. принимает значение 1) при любом значении переменной х.
# Определите наибольшее возможное количество элементов множества A.
a = set(range(1, 1000))

def F(x):
    P = x in {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
    Q = x in {5, 10, 15, 20, 25, 30, 35, 40, 45, 50}
    A = x in a
    # ((x ∈ A) → (x ∈ P)) ∧ ((x ∈ Q) → ¬(x ∈ A))
    return (A <= P) and (Q <= (not A))

for x in range(1, 1000):
    if F(x) == False:
        a.remove(x)
print(a, len(a))
'''
# Ответ: 8



# Тип 17 № 39764
'''
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём тройкой три идущих подряд элемента последовательности. Определите количество троек чисел таких,
# которые могут являться сторонами прямоугольного треугольника. В ответе запишите два числа: сначала количество
# найденных троек, а затем— максимальную сумму элементов таких троек. Если таких троек не найдётся—
# следует вывести 00.

f = open('17 (3).txt')
M = [int(i) for i in f]

count = 0
maxi = 0
for i in range(0, len(M)-2):
    A = sorted([M[i], M[i + 1], M[i + 2]])
    if A[0] ** 2 + A[1] ** 2 == A[2] ** 2:
        count += 1
        maxi = max(maxi, M[i] + M[i + 1] + M[i + 2])
print(count, maxi)
'''
# Ответ: 0 0


# Тип 17 № 37349
'''
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, для которых произведение
# элементов кратно 26, затем максимальную из сумм элементов таких пар. В данной задаче под парой подразумевается
# два различных элемента последовательности. Порядок элементов в паре не важен.

f = open('17 (4).txt')
M = [int(i) for i in f]

count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i + 1, len(M)):
        if (M[i] * M[j]) % 26 == 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
'''
# Ответ: 5678937 19984

# Тип 17 № 37357
'''
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, у которых сумма элементов кратна 8
# , затем максимальную из сумм элементов таких пар. В данной задаче под парой подразумевается два различных элемента
# последовательности. Порядок элементов в паре не важен.

f = open('17 (5).txt')
M = [int(i) for i in f]

count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i + 1, len(M)):
        if (M[i] + M[j]) % 8 == 0:
            count += 1
            maxi = max(maxi, M[i] + M[j])
print(count, maxi)
'''
# Ответ: 6243772 19992

# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# Тип 24 № 27692
# Текстовый файл состоит не более чем из 10**6 символов A, B и C. Определите максимальное количество идущих подряд символов B.
#
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

# f = open('24.txt')
# s = f.read()  # четко читает весь файл со всеми символами
# s = f.readline()
# s = f.readlines()

# s = 'ABCABCBBBACBACBBBBBBACBBBBBAA'  # 6

# Вариант 1
'''
f = open('24.txt')
s = f.readline()

count = 1
maxi = 0
for i in range(0, len(s)-1):
    if s[i] == 'B' and s[i+1] == 'B':
        count += 1
        maxi = max(maxi, count)
        # if maxi < count:
        #     maxi = count
    else:
        count = 1
print(maxi)
'''

# Вариант 2
'''
f = open('24.txt')
s = f.readline()
s = s.replace('A', ' ')
s = s.replace('C', ' ')
M = s.split()
M = [len(i) for i in M]
print(max(M))
'''

# Вариант 3
'''
print(max([len(i) for i in open('24.txt').readline().replace('A', ' ').replace('C', ' ').split()]))
'''
# Ответ: 11




# Тип 24 № 37131
'''
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите наибольшую длину цепочки символов, среди которых нет символов K и L, стоящих рядом.

s = open('24.txt').readline()
s = s.replace('LK', ' ')
s = s.replace('KL', ' ')
M = [len(i) for i in s.split()]
print(max(M)+2)
'''
# Ответ: 2796


# Тип 24 № 45258
'''
# Текстовый файл состоит из символов A, B и C.
#
# Определите максимальное количество идущих подряд пар символов AB или CB в прилагаемом файле.
#
# Искомая подпоследовательность должна состоять только из пар AB, или только из пар CB,
# или только из пар AB и CB в произвольном порядке следования этих пар.

s = open('24.txt').readline()
s = s.replace('AB', '*')
s = s.replace('CB', '*')
s = s.replace('A', ' ')
s = s.replace('B', ' ')
s = s.replace('C', ' ')
print(s)
M = [len(i) for i in s.split()]
print(max(M))
'''
# Ответ: 65

s = 'DFLKDLLDFDFDDRRDDLDDLL'

# Тип 24 № 27695
# Текстовый файл состоит не более чем из 106 символов L, D и R.
# Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.
#
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

# Вариант 1
'''
s = open('24.txt').readline()

s = s.replace('LL', ' ')
s = s.replace('DD', ' ')
s = s.replace('RR', ' ')
M = [len(i) for i in s.split()]
print(max(M)+2)
'''


'''
f = open('24.txt')
s = f.readline()

count = 1
maxi = 0
for i in range(0, len(s)-1):
    if s[i] != s[i+1]:
        count += 1
        maxi = max(maxi, count)
    else:
        count = 1
print(maxi)
'''


# Тип 24 № 36879
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# В строках, содержащих менее 25 букв G,
# нужно определить и вывести максимальное расстояние между одинаковыми буквами в одной строке.

# Вариант 1
'''
M = open('24.txt').readlines()
A = []
for x in M:
    if x.count('G') < 25:
        A.append(x)

# import string
# alphabet = string.ascii_uppercase

alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
maxi = 0
for x in A:
    for y in alphabet:
        maxi = max(maxi, x.rindex(y) - x.index(y))
print(maxi)
'''


# Вариант 2
'''
A = [x for x in open('24.txt').readlines() if x.count('G') < 25]

maxi = 0
for x in A:
    for y in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
        maxi = max(maxi, x.rindex(y) - x.index(y))
print(maxi)
'''
# Ответ: 1001




# Тип 24 № 33769
'''
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z). 
# Определите символ, который чаще всего встречается в файле после двух одинаковых символов.
s = open('24.txt').readline()

M = []
for i in range(0, len(s)-2):
    if s[i] == s[i+1]:
        M.append(s[i+2])

my_dict = {}
for x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
    my_dict[M.count(x)] = x
print(max(my_dict.items()))
'''
# Ответ: K




# Тип 24 № 47228
'''
# Текстовый файл состоит из символов A, C, D, F и O.
# 
# Определите максимальное количество идущих подряд пар символов вида
# 
# согласная + гласная.

s = open('24.txt').readline()
sogl = 'FCD'
glas = 'AO'

count = 0
maxi = 0
i = 0
while i < len(s)-1:
    if (s[i] in sogl and s[i+1] in glas):
        count += 1
        i += 2
        maxi = max(maxi, count)
    else:
        count = 0
        i += 1
print(maxi)
'''
# Ответ: 95


# endregion Урок: ******************************************************************




# todo: Валерия = [2, 5, 6, 8, 12, 14+, 15+, 16, 17, 23, 25]
# на прошлом уроке: Повторили 17 номер и разбирали 24 номер
# на следующем уроке: Добиваем 24 номер и думаем о самопроверки
