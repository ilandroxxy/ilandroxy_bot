
# region Домашка: ******************************************************************

# 28.11
# Тип 23 № 13418
'''
# Исполнитель НечетМ преобразует число на экране. У исполнителя НечетМ две команды, которым присвоены номера:
# 1. прибавь 1
# 2. сделай нечётное
# Сколько существует таких программ, которые число 1 преобразуют в число 27, причём траектория вычислений не содержит
# число 26?
def F(a, b):
    if a > b or a == 26:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a * 2 + 1, b)
print(F(1,27))
'''
# Ответ: 13

# Тип 23 № 7315
'''
# У исполнителя три команды, которым присвоены номера:
# 1.прибавь 1
# 2.сделай чётное
# 3.сделай нечётное.
# Сколько существует программ, которые число 1 преобразуют в число 15?
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a * 2, b) + F(a * 2 + 1, b)
print(F(1, 15))
'''
# Ответ: 83

# Тип 23 № 13552
'''
# Исполнитель Осень16 преобразует число на экране.
# У исполнителя есть три команды, которым присвоены номера:
# 1)Прибавить 1;
# 2)Прибавить 2;
# 3)Прибавить 4.
# Сколько существует программ, для которых при исходном числе 1 результатом является число 15
# и при этом траектория вычислений содержит число 8?
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 2, b) + F(a + 4, b)
print(F(1, 8) * F(8, 15))
'''
# Ответ: 961

# Тип 23 № 8670
'''
# Исполнитель Увеличитель345 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:
# 1. Прибавь 3
# 2. Прибавь 4
# 3. Прибавь 5
# Сколько есть программ, которые число 22 преобразуют в число 42?
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 3, b) + F(a + 4, b) + F(a + 5, b)
print(F(22, 42))
'''
# Ответ: 73

# Тип 16 № 5278
'''
# Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
# F(1)= 1;
# F(n) = 2*F(n-1) +1 при n >1.
# Чему равно значение функции F(5)?
def F(n):
    if n == 1:
        return 1
    elif n >= 1:
        return 2 * F(n - 1) + 1
print(F(5))
'''
# Ответ: 31

# Тип 16 № 4658
'''
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(1) = 1
# F(2) = 1
# F(n) = F(n–1) * n − 2 * F(n–2), при n >2
# Чему равно значение функции F(6)?

def F(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    if n >= 2:
        return F(n - 1) * n - 2 * F(n - 2)
print(F(6))
'''
# Ответ: 44

# Тип 16 № 5586
'''
# Алгоритм вычисления значения функции F(n), где n— натуральное число, задан следующими соотношениями:
# F(n) = 2 при n ≤ 2;
# F(n) = 2 * F(n - 1) + F(n - 2) при n > 2.
# Чему равно значение функции F(5)? В ответе запишите только натуральное число.
def F(n):
    if n <= 2:
        return 2
    if n > 2:
        return 2 * F(n - 1) + F(n - 2)
print(F(5))
'''
# Ответ: 34

# Тип 16 № 6423
'''
# Алгоритм вычисления значения функции F(n), где n— натуральное число, задан следующими соотношениями:
# F(n) = n − 1 при n ≤ 2;
# F(n) = 3 × F(n − 1) − F(n − 2) при n> 2.
# Чему равно значение функции F(6)? В ответе запишите только натуральное число.
def F(n):
    if n <= 2:
        return n - 1
    if n > 2:
        return 3 * F(n - 1) - F(n - 2)
print(F(6))
'''
# Ответ: 55

# Тип 15 № 27303
'''
# Для какого наименьшего целого неотрицательного числа А выражение
# (4x + 3y < A) ∨ (x ≥ y) ∨ (y ≥ 13)
# тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?

for A in range (0, 1000):
    flag = True
    for x in range(0, 100):
        for y in range(0, 100):
            if not (((4 * x + 3 * y) < A) or (x >= y) or (y >= 13)):
                flag = False
                break
        if flag == False:
                break
    if flag == True:
        print(A)
        break
'''
# Ответ: 81

# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# Тип 25 № 28123
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [125256;125330],
# числа, имеющие ровно шесть различных чётных натуральных делителей.
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.

# Вариант 1
def D(n):
     dl = set()
     for j in range(1, round(n ** 0.5) + 1):
         if n % j == 0:
             if j % 2 == 0:
                dl.add(j)  # аналог .append() для множества set()
             if (n // j) % 2 == 0:
                 dl.add(n // j)
         if len(dl) > 6:
             return sorted(dl)  # функция sorted() это аналог метода .sort(), но для множеств и словарей
     return sorted(dl)  # sorted() сортирует множество по возрастанию и возвращает результат в виде списка

# sorted(dl, reverse=True)  таким образом можно отсортировать список в обратном порядке

for n in range(125256, 125330+1):
    dl = D(n)
    if len(dl) == 6:
        print(dl)

# 16: 1 2 4 8 16
# 24: 1 2 3 4 6 8 12 24

# Вариант 2
for n in range(125256, 125330+1):
    D = []
    for j in range(1, n+1):
        if n % j == 0 and j % 2 == 0:
            D.append(j)
        if len(D) > 6:
            break
    if len(D) == 6:
        print(*D)
'''
# Ответ:
# 2 6 18 13918 41754 125262
# 2 4 8 31322 62644 125288
# 2 6 18 13922 41766 125298




# Тип 25 № 28121
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [2422000; 2422080], простые числа.
# Выведите все найденные простые числа в порядке возрастания, слева от каждого числа выведите его номер по порядку,
# считая, что первое найденное число имеет номер «1», второе — «2», и т.д.


# Вариант 1
def Simpler(n):
    for j in range(2, n):
        if n % j == 0:
            return False
    return True

k = 1
for n in range(2422000, 2422080+1):
    if Simpler(n) == True:
        print(k, n)
        k += 1

# Вариант 2
def D(n):
    dl = set()
    for j in range(2, round(n ** 0.5)+1):
        if n % j == 0:
            dl.add(j)
            return dl
    return dl


k = 1
for n in range(2422000, 2422080 + 1):
    dl = D(n)
    if len(dl) == 0:
        print(k, n)
        k += 1
'''
# Ответ:
# 1 2422027
# 2 2422033
# 3 2422037
# 4 2422073



# Тип 25 № 37160
'''
# Найдите 5 чисел больших 500000, таких, что среди их делителей есть число, оканчивающееся на 8,
# при этом этот делитель не равен 8 и самому числу.
# В качестве ответа приведите 5 наименьших чисел, соответствующих условию.
#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число,
# затем минимальный делитель, оканчивающийся на 8, не равный 8 и самому числу.


def D(n):
    dl = set()
    for j in range(2, round(n ** 0.5)):
        if n % j == 0:
            if j % 10 == 8 and j != 8:
                dl.add(j)
            if (n // j) % 10 == 8:
                dl.add(n // j)
    return sorted(dl)

k = 0
for n in range(500000+1, 100000000):
    dl = D(n)
    if len(dl) > 0:
        print(n, dl[0])
        k += 1
        if k == 5:
            break
'''
# Ответ:
# 500002 178
# 500004 18
# 500016 48
# 500018 58
# 500020 4348


# Тип 25 № 35999
'''
# Найдите все натуральные числа N, принадлежащие отрезку [200_000_000; 400_000_000],
# которые можно представить в виде N =2**m*3**n, где m — чётное число, n — нечётное число.
# В ответе запишите все найденные числа в порядке возрастания.

print(2**28)
print(3**17)
print('---------')
for m in range(2, 28+1, 2):
    for n in range(1, 17+1, 2):
        N = 2**m*3**n
        if 200_000_000 <= N <= 400_000_000:
            print(N)
'''
# Ответ:
# 229582512
# 322486272
# 254803968
# 201326592



# Тип 25 № 38603
'''
# Пусть M — сумма минимального и максимального натуральных делителей целого числа, не считая единицы и самого числа. Если таких делителей у числа нет, то значение M считается равным нулю.
#
# Напишите программу, которая перебирает целые числа, бо́льшие 700 000, в порядке возрастания и ищет среди них такие,
# для которых значение M оканчивается на 8. Выведите первые пять найденных чисел и соответствующие им значения M.
#
# Формат вывода: для каждого из пяти таких найденных чисел в отдельной строке сначала выводится само число, затем  — значение М.
# Строки выводятся в порядке возрастания найденных чисел.

# Количество строк в таблице для ответа избыточно.

def D(n):
    for j in range(2, round(n ** 0.5) + 1):
        if n % j == 0:
            M = j + (n // j)
            return M
    return 0

k = 0
for n in range(700000, 100000000):
    if D(n) % 10 == 8:
        print(n, D(n))
        k += 1
        if k == 5:
            break
'''
# Ответ:
# 700005 233338
# 700007 100008
# 700012 350008
# 700015 140008
# 700031 24168



# Тип 25 № 27857
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [84052;84130],
# число, имеющее максимальное количество различных натуральных делителей, если таких чисел несколько — найдите минимальное из них.
# Выведите на экран количество делителей такого числа и само число.

def D(n):
    dl = set()
    for j in range(1, round(n ** 0.5) + 1):
        if n % j == 0:
            dl.add(j)
            dl.add(n // j)
    return dl

maxi = 0
for n in range(568023, 569230+1):
    dl = D(n)
    if maxi < len(dl):
        maxi = len(dl)
        print(maxi, n)
'''
# Ответ для задачи 27857: 72 84084
# Ответ для задачи 28124: 144 568260




# endregion Урок: ******************************************************************




# todo: Валерия = [2, 5, 6, 8, 12, 14+, 15, 16, 23], на следующем уроке:  Еще один урок по 25 номерам
