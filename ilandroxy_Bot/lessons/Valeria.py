
# region Домашка: ******************************************************************

# 21.11

# Тип 2 № 18614

# Логическая функция F задаётся выражением ((w → ¬x) ≡ (z → y)) ∧ (y ∨ w).
# Дан частично заполненный фрагмент, содержащий неповторяющиеся строки таблицы истинности функции F.
# Определите, какому столбцу таблицы истинности соответствует каждая из переменных x, y, z, w.
'''
print('x y z w')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (((w <= (not(x))) == (z <= y)) and (y or w))
                # F = ((w <= (not(z))) == (z <= y)) and (y or w)
                print(x, y, z, w, F)
'''
# Ответ: xwyz


# Тип 6 № 47391
'''
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 14 [Направо 60 Вперёд 2 Направо 60 Вперёд 2 Направо 270]
# Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией,
# заданной данным алгоритмом. Точки на линии учитывать не следует.

import turtle as t

t.speed(100)
t.left(90)
l = 20
for _ in range(18):
    t.right(60)
    t.fd(2 * l)
    t.right(60)
    t.fd(2 * l)
    t.right(270)
t.right(60)
t.fd(2 * l)
t.right(120)

t.pu()
t.color('green')
for x in range(-8, 15):
    for y in range(-15, 2):
        t.goto(x * l, y * l)
        t.dot(2)

t.done()
'''
# Ответ: 149


# Тип 12 № 33482
'''
# Дана программа для редактора:
# НАЧАЛО
# ПОКА нашлось (111)
# заменить (111, 22)
# заменить (222, 11)
# КОНЕЦ ПОКА
# КОНЕЦ
# Известно, что исходная строка содержала более 100 единиц и не содержала других цифр.
# Укажите минимально возможную длину исходной строки, при которой в результате работы этой программы получится строка,
# содержащая максимально возможное количество единиц.

maxi = 0
for x in range(100 + 1, 1000):
    s = '1' * x
    temp = s
    while '111' in s:
        s = s.replace('111', '22', 1)
        s = s.replace('222', '11', 1)
    if maxi < s.count('1'):
        maxi = s.count('1')
        print(len(temp), s)
'''
# Ответ: 103


# Тип 12 № 45246
'''
# Какая строка получится в результате применения приведённой ниже программы к строке,
# состоящей из 84 идущих подряд цифр 8? В ответе запишите полученную строку.
# НАЧАЛО
# ПОКА нашлось (1111) ИЛИ нашлось (8888)
# EСЛИ нашлось (1111)
# ТО заменить (1111, 8)
# ИНАЧЕ заменить (8888, 11)
# КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
# КОНЕЦ


s = '8' * 84
temp = s
while '1111' in s or '8888' in s:
    if '1111' in s:
        s = s.replace('1111', '8', 1)
    else:
        s = s.replace('8888', '11', 1)
print(s)
'''
# Овет: 11888

# Тип 14 № 48339
'''
# Операнды арифметического выражения записаны в системе счисления с основанием 11:
# 982x8_11 + 194x7_11
# В записи чисел переменной x обозначена неизвестная цифра из алфавита одиннадцатиричной системы счисления.
# Определите наименьшее значение x, при котором значение данного арифметического выражения кратно 58.
# Для найденного значения x вычислите частное от деления значения арифметического выражения на 58 и укажите его
# в ответе в десятичной системе счисления. Основание системы счисления в ответе указывать не нужно.

# Вариант 1
for x in '0123456789a':
    a = int(f'982{x}8', 11)
    b = int(f'194{x}7', 11)

    if (a + b) % 58 == 0:
        print((a + b) // 58)
        
# Вариант 2
for x in '0123456789a':
    r = int(f'982{x}8', 11) + int(f'194{x}7', 11)
    if (r) % 58 == 0:
        print((r) // 58)
'''
# Ответ: 2931

# Тип 14 № 48386
'''
# Операнды арифметического выражения записаны в системах счисления с основаниями 15 и 16:
# 90x4y_15 + 91xy2_16
# В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры.
# Определите значения x и y, при которых значение данного арифметического выражения будет наименьшим и кратно 56.
# Для найденных значений x и y вычислите частное от деления значения арифметического выражения на 56 и укажите
# его в ответе в десятичной системе счисления. Основание системы счисления в ответе указывать не нужно.

for x in '123456789abcde':
    for y in '123456789abcde':
        a = int(f'90{x}4{y}', 15)
        b = int(f'91{x}{y}2', 16)
        if (a + b) % 56 == 0:
            print((a + b) // 56)
'''
# Ответ: 18754

# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# Функции встроенные в Python: len(), print(), max(), sum(), min(), range(), int(), str(), ...
# Методы в Python: функции направленные на объект (тип данных), для списков M.append(), для строк M.replace()
# Свои функции в Python


# Тип 12 № 47216
'''
# Дана программа для Редактора:
#
# ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>0)
#     ЕСЛИ нашлось (>1)
#         ТО заменить (>1, 22>)
#     КОНЕЦ ЕСЛИ
#     ЕСЛИ нашлось (>2)
#         ТО заменить (>2, 2>)
#     КОНЕЦ ЕСЛИ
#     ЕСЛИ нашлось (>0)
#         ТО заменить (>0, 1>)
#     КОНЕЦ ЕСЛИ
# КОНЕЦ ПОКА
#
# На вход приведённой выше программе поступает строка, начинающаяся с символа «>»,
# а затем содержащая 39 цифр «0», n цифр «1» и 39 цифр «2», расположенных в произвольном порядке.
#
# Определите наименьшее значение n, при котором сумма числовых значений цифр строки,
# получившейся в результате выполнения программы, является простым числом.

def MySimpler(x):
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

for n in range(1, 1000):
    s = '>' + '0' * 39 + '1' * n + '2' * 39

    while '>1' in s or '>2' in s or '>0' in s:
        if '>1' in s:
            s = s.replace('>1', '22>', 1)
        if '>2' in s:
            s = s.replace('>2', '2>', 1)
        if '>0' in s:
            s = s.replace('>0', '1>', 1)

    summ = sum([int(i) for i in s[:-1]])

    flag = True
    for j in range(2, summ):
        if summ % j == 0:
            flag = False
    if flag == True:
        print(n)
        break
'''

'''
def MySimpler(x):
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

for a in range(2, 1000):
    if MySimpler(a) == True:
        print(a, end=' ')
print()

def MyLen(A):
    count = 0
    for _ in A:
        count += 1
    return count

M = [1, 4, 5, 6, 7, 34, 334, 2, 3, 31, 3, 54, 5, 34]

print(len(M), MyLen(M))
'''

# Тип 23 № 45257
# Исполнитель преобразует число на экране.
#
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавь 2
# 2. Умножь на 2
#
# Сколько существует программ, для которых при исходном числе 1 результатом является число 52,
# и при этом траектория вычислений содержит число 18?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 2, b) + F(a * 2, b)

print(F(1, 18) * F(18, 52))
'''
# Ответ: 96


# Тип 23 № 35912
# Исполнитель преобразует число на экране.
# У исполнителя есть три команды, которым присвоены номера:
#
# 1. Прибавить 1
# 2. Умножить на 2
# 3. Умножить на 3
#  Сколько существует программ, которые преобразуют исходное число 2 в число 39,
#  и при этом траектория вычислений содержит число 13 и не содержит числа 30?
'''
def F(a, b):
    if a > b or a == 30:  # и не содержит числа 30
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b) + F(a*3, b)

print(F(2, 13) * F(13, 39))
'''
# Ответ: 75


# Тип 23 № 5977
# У исполнителя Прибавитель две команды, которым присвоены номера:
#
# 1. прибавь 1,
# 2. увеличь старшую цифру числа на 1.
#
# Сколько есть программ, которые число 10 преобразуют в число 33
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+10, b)

print(F(10, 33))
'''
# Ответ: 25


# Тип 16 № 6925
'''
# Алгоритм вычисления значений функций F(n), где n  — натуральное число, задан следующими соотношениями:
#
# F(1) = 1; F(2) = 2; F(3) = 3;
# F(n) = F(n − 3)*n при n >3.
#
# Чему равно значение функции F(11)? В ответе запишите только натуральное число.

def F(n):
    if n > 3:
        return F(n - 3)*n
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3

print(F(11))
'''
# Ответ: 880


# Тип 16 № 36871
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n) = 3?

def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0
for n in range(1, 1000+1):
    if F(n) == 3:
        count += 1
print(count)
'''
# Ответ: 120




# endregion Урок: ******************************************************************




# todo: Валерия = [2, 5, 6, 8, 12, 14+, 15, 16, 23], на следующем уроке: Добиваем 15, 16, 23 номера. Разбираем 25 с функциями