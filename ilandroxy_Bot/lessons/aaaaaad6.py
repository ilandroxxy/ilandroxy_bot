# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************


# № 16327 Открытый вариант 2024 (Уровень: Базовый)
'''
import sys
sys.setrecursionlimit(10000)
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n * F(n-1)

print((F(2024) - F(2023)) / F(2022))
'''
# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded

# Ответ: 4092529


# № 16263 Джобс 03.05.24 (Уровень: Базовый)
'''
import sys
sys.setrecursionlimit(10000)
def F(n):
    if n < 7:
        return 7
    if n >= 7 and n % 3 != 0:
        return 5 - F(n-1)
    if n >= 7 and n % 3 == 0:
        return 3 + F(n-1)

print(F(3015))
'''
# Ответ: 3016

'''
import sys
sys.setrecursionlimit(10000)

from functools import *
@lru_cache(None)
'''


# № 16332 Открытый вариант 2024 (Уровень: Базовый)
# A. Прибавить 1
# B. Прибавить 2
# C. Умножить на 2
# Сколько существует программ, которые преобразуют исходное число 4 в число 15,
# и при этом траектория вычислений программы содержит числа 11 и 13?
'''
def F(a, b):  # a - start, b - stop
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*2, b)


print(F(4, 11) * F(11, 13) * F(13, 15))


def F(a, b):  # a - start, b - stop
    if a >= b:
        return a == b
    return F(a+1, b) + F(a+2, b) + F(a*2, b)


print(F(4, 11) * F(11, 13) * F(13, 15))
'''

# № 16268 Джобс 03.05.24 (Уровень: Базовый)
#   A. Прибавить 2
#   B. Умножить на 3
#   C. Возвести в квадрат
#
# Сколько существует программ, для которых при исходном числе 3 результатом является число 49,
# при этом траектория вычислений не содержит числа 13?
'''
def F(a, b):
    if a > b or a == 13:
        return 0
    if a == b:
        return 1
    else:
        return F(a+2, b) + F(a*3, b) + F(a**2, b)

print(F(3, 49))
'''


# № 13300 Открытый курс "Слово пацана" (Уровень: Базовый)
# – вычесть 1
# – вычесть 2
# – разделить нацело на 4
#
# Определите количество программ исполнителя, которые преобразуют число 26 в 3,
# при условии, что траектория выполнения программы содержит число 20.
'''
def F(a, b):
    if a < b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a-1, b) + F(a-2, b) + F(a//4, b)

print(F(26, 20) * F(20, 3))
'''

# № 15329 Досрочная волна 2024 (Уровень: Базовый)
# # Для какого наибольшего натурального числа А логическое выражение
#
# ¬ДЕЛ(x, А) → (ДЕЛ(x, 28) → ¬ДЕЛ(x, 49))
#
# истинно (т.е. принимает значение 1) при любом натуральном значении переменной х?
'''
def F(x, A):
    return (x % A != 0) <= ((x % 28 == 0) <= (x % 49 != 0))

for A in range(1, 1000):
    if all(F(x, A) for x in range(1, 10000)):
        print(A)
'''
# Ответ: 196

'''
def F(x, y, A):
    return ((A < x) or ((x**2 - 7*x + 10) > 0)) and ((A >= y) or ((y**2 + 7*y + 12) > 0))

cnt = 0
for A in range(-1000, 1000):
    if all(F(x, y, A) for x in range(-100, 100) for y in range(-100, 100)):
        cnt += 1
print(cnt)
'''

'''
def F(x, A):
    return (x & A != 0) <= ((x & 168 == 0) <= (x & 69 != 0))

for A in range(1, 10000):
    if all(F(x, A) for x in range(10000)):
        print(A)
'''

def F(x, a1, a2):
    B = 34 <= x <= 72
    C = 32 <= x <= 61
    A = a1 <= x <= a2
    return (B <= A) and ((not C) or A)

R = []
M = [x / 4 for x in range(30 * 4, 80 * 4)]
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)
print(min(R))  # 40.0 -> 40


# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Лера = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19-21, 22, 23, 24, 25]
# КЕГЭ  = [15, 16, 23]
# на следующем уроке: повторять все номера кодом, 7, 11 и теорию игр
