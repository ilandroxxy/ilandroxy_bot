# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Типы данных коллекций (последовательности)
# list, tuple, set, dict

# Теория списков list()
# - Списки могут хранить неограниченное кол-во элементов разных типов данных
# - Все элементы списков имеют порядковый номер - индекс
# - Индексы могут считаться слева-направо начиная с 0 или справа-налево начиная с -1
# - В списке можно изменять его элементы через индексы

# Теория кортежей tuple()
# - Списки могут хранить неограниченное кол-во элементов разных типов данных
# - Все элементы списков имеют порядковый номер - индекс
# - Индексы могут считаться слева-направо начиная с 0 или справа-налево начиная с -1

'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

s = 'abcde'  # со строками индексы работают аналогично

print(f'Первый элемент списка: {M[0]} \n'
      f'Последний элемент списка: {M[-1]} \n'
      f'Последний элемент списка: {M[len(M) - 1]} \n')
'''

# Срезы списков:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

print(M[1:4])  # ['b', 'c', 'd']
print(M[:4])  # ['a', 'b', 'c', 'd'] - взять все, что слева от 4-ех (не включая)
print(M[2:])  # ['c', 'd', 'e'] - все, что справа от 2-х (включая)
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[::])  # ['a', 'b', 'c', 'd', 'e']
print(M[::2])  # ['a', 'c', 'e']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a']  - аналог метода .reverse()

M.reverse()  # Это метод только для списков, а срез M[::-1] работает со строками и кортежами
print(M)  # ['e', 'd', 'c', 'b', 'a']
'''

# Как можно изменять элементы списков
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

M[3] = 'D'
print(M)  # ['a', 'b', 'c', 'D', 'e']

for x in M:
    print(x, end=' ')  # a b c D e
print()

for i in range(len(M)):
    print(M[i], end=' ')  # a b c D e
print()

for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'DDD', 'eeee']
'''

# Функции списков
'''
M = [1, 2, 3, 1, 2]

print(len(M))  # 5 - функция len() возвращает длину списка (кол-во элементов)
print(sum(M))  # 9 - возвращает сумму чисел списка, но в списке не должно быть строк
print(max(M))  # 3
print(min(M))  # 1

print(set(M))  # {1, 2, 3} - множество не может содержать копий элемента
print(len(set(M)))  # 3 - "Сколько различных элементов было в списке?"

print(sorted(M))  # [1, 1, 2, 2, 3] - Сортирует по возрастанию
print(sorted(M, reverse=True))  # [3, 2, 2, 1, 1] - Сортирует по убыванию

print(sorted('54321'))  # ['1', '2', '3', '4', '5']
# Работает с set, tuple, dict, str, но результат возвращает в виде списка
'''

# Методы списков (Методы - это частный случай функций, то есть это функции направленные на какой-то один тип данных)
'''
M = [1, 2, 3, 1, 2]

print(M.count(2))  # 2 - Кол-во вхождений элемента в список
print(M.index(2))  # 1 - Возвращает индекс первого вхождения элемента в список

M.append(4)
M.append(5)  # Добавляет новый элемент в конец списка
print(M)  # [1, 2, 3, 1, 2, 4, 5]

M = M + [6, 7, 8]
print(M)  # [1, 2, 3, 1, 2, 4, 5, 6, 7, 8] - добавили несколько элементов справа

M = [-2, -1, 0] + M
print(M)  # [-2, -1, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 8] - добавили слева элементы

M.sort()
print(M)  # [-2, -1, 0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8]

M.reverse()  # разворачивает список в обратном порядке 
print(M)  # [8, 7, 6, 5, 4, 3, 2, 2, 1, 1, 0, -1, -2]
'''

# Генераторы списков
'''
M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x**2 for x in range(10)]
print(M)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]
'''

# Заполните список числами введенными с клавиатуры:
'''
n = int(input('n: '))
M = []
for i in range(n):
    x = int(input('x: '))
    M.append(x)
print(M)
'''
'''
M = [int(x) for x in input('ВВЕДИТЕ ЧИСЛА ЧЕРЕЗ ПРОБЕЛ: ').split() if x.isdigit()]
print(M)

# ВВЕДИТЕ ЧИСЛА ЧЕРЕЗ ПРОБЕЛ: 234  234 897 234
# [234, 234, 897, 234]

# ВВЕДИТЕ ЧИСЛА: 2134567kljhgf12346
# [2, 1, 3, 4, 5, 6, 7, 1, 2, 3, 4, 6]
'''

# Тип 17 №55634
# Файл содержит последовательность целых чисел, модуль которых находится в интервале от 100 до 10000.
# Назовём парой два идущих подряд элемента последовательности.

# Определите количество пар, для которых выполняются следующие условия:
#
# — последняя цифра записи одного из элементов пары совпадает с предпоследней цифрой записи другого элемента;
# — ровно один элемент из пары делится без остатка на 13;
# — сумма квадратов элементов пары не превышает квадрат наименьшего из элементов последовательности,
# две последние цифры в записи которого одинаковы.
#
# В ответе запишите два числа: сначала количество найденных пар, затем максимальную
# величину суммы квадратов элементов этих пар.
'''
M = [int(x) for x in open('17.txt')]
A = min([x for x in M if str(x)[-1] == str(x)[-2]]) ** 2
# квадрат наименьшего из элементов последовательности,
# две последние цифры в записи которого одинаковы.
count = 0
maxi = 0
for i in range(0, len(M)-1):
    x, y = M[i], M[i+1]
    if (str(x)[-1] == str(y)[-2]) or (str(x)[-2] == str(y)[-1]):
        if (x % 13 == 0 and y % 13 != 0) or (x % 13 != 0 and y % 13 == 0):
            if (x**2 + y**2) <= A:
                count += 1
                maxi = max(maxi, x**2 + y**2)
print(count, maxi)  # 115 96944186
'''

# В каждой строке электронной таблицы записаны пять натуральных чисел.
#
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
# — все числа в строке различны;
# — чётных чисел больше, чем нечётных;
# — сумма чётных чисел меньше суммы нечётных.
#
# В ответе запишите число — количество строк, для которых выполнены эти условия.
'''
count = 0
for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    if len(set(M)) == len(M):  # — все числа в строке различны;
        chet = [x for x in M if x % 2 == 0]
        nechet = [x for x in M if x % 2 != 0]
        if len(chet) > len(nechet):  # — чётных чисел больше, чем нечётных;
            if sum(chet) < sum(nechet):  # — сумма чётных чисел меньше суммы нечётных.
                count += 1
print(count)
'''
# Ответ: 241






# endregion Урок: ******************************************************************


# Лера = [2.1, 6.1]
# КЕГЭ  = []
# на следующем уроке:
