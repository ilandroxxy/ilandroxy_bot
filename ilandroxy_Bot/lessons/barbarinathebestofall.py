
# region Домашка: ******************************************************************


# Черепахе был дан для исполнения следующий алгоритм:
# Направо 315 Повтори 7 [Вперёд 12 Направо 45 Вперёд 6 Направо 135].
# Определите, сколько точек с целочисленными координатами будут находиться внутри области,
# ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.
'''
import turtle as t
t.tracer(0)
t.left(90)
l = 30

t.right(315)
for i in range(7):
    t.forward(12*l)
    t.right(45)
    t.forward(6*l)
    t.right(135)

t.up()
for x in range(-20, 20):
    for y in range(-20, 20):
        t.goto(x*l, y*l)
        t.dot(2, 'red')
t.done()
'''


# КЕГЭ № 6259 Danov2302 (Уровень: Базовый) (А.Богданов)
# Черепахе был дан для исполнения следующий алгоритм:
#
# Повтори 10 [Вперёд 10 Направо 45]
#
# Определите, сколько точек с целочисленными координатами будут
# находиться точно на границе фигуры нарисованной данным алгоритмом.
'''
import turtle as t

t.tracer(0)
l = 20
t.left(90)

for i in range(10):
    t.forward(10 * l)
    t.right(45)

t.up()
for x in range(-20, 40):
    for y in range(-20, 40):
        t.goto(x * l, y * l)
        t.dot(2, 'red')
t.done()
'''


# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 6 [Повтори 3 [Вперед 7 Направо 120] Направо 60]
#
# Сколько точек с целочисленными координатами находятся внутри получившейся фигуры?
# Точки на внешних и внутренних линиях учитывать не нужно.

'''
import turtle as t

t.tracer(0)
l = 40
t.left(90)

for _ in range(6):
    for _ in range(3):
        t.forward(7 * l)
        t.right(120)
    t.right(60)

t.up()
for x in range(-20, 20):
    for y in range(-20, 20):
        t.goto(x * l, y * l)
        t.dot(2, 'blue')
t.done()
'''

# endregion Домашка: ******************************************************************


# region Урок: ********************************************************************

# Теория строк
# - Каждый элемент имеент порядковый номер - индекс
# - Индексы считаются слева-направо начиная с нуля или справа-налево начиная с -1
'''
# i  01234
s = 'abcde'

print(f'Первый элемент списка: {s[0]} \n'
      f'Последний элемент списка: {s[-1]}')
'''

# Срезы строк:
'''
# i  01234
s = 'abcde'

print(s[:3])  # ['a', 'b', 'c']
print(s[3:])  # ['d', 'e']
print(s[:])  # ['a', 'b', 'c', 'd', 'e']
print(s[::-1])  # ['e', 'd', 'c', 'b', 'a']  # - это аналог метода .reverse() 
print(s[::2])  # ['a', 'c', 'e']
'''

# Изменения элементов строки
'''
s = 'abcde'

for x in s:
    print(x, end=' ')  # a b c d e
print()


for i in range(len(s)):
    # print(i, end=' ')  # 0 1 2 3 4
    print(s[i], end=' ')  # a b c d e
print()

# Что если мы захотим поменять букву "с" на "*"

s = s[:2] + '*' + s[3:]
print(s)  # ab*de
'''


# Функции строк
'''
s = '145674'

print(len(s))  # длина списка (кол-во элементов)
print(max(s))  # 7
print(min(s))  # 1

print(set(s))  # {'5', '4', '7', '1', '6'} множество не может иметь копий элементов (выводим значения списка без копий)
print(len(set(s)))  # "Сколько различных значений?"

print(sorted(s))  # ['1', '4', '4', '5', '6', '7']
print(sorted(s, reverse=True))  # ['7', '6', '5', '4', '4', '1']
'''


# Методы строк
'''
s = 'absdabsdbsadb'

print(s.count('b'))  # 4
print(s.index('b'))  # 1
print(s.rindex('b'))  # 12

s = s.replace('b', '*')
print(s)  # a*sda*sd*sad*

s = s.replace('d', '+', 2)
print(s)  # a*s+a*s+*sad*


s = s.upper()
print(s)  # A*S+A*S+*SAD*
s = s.lower()
print(s)  # a*s+a*s+*sad*


id = '192.32.56.9'
print(id.split('.'))  # ['192', '32', '56', '9']

ID = [int(x) for x in id.split('.')]
print(ID)  # [192, 32, 56, 9]

new_id = '*'.join(['192', '32', '56', '9'])
print(new_id)   # 192*32*56*9
'''


# Тип 12 №15826
# Какая строка получится в результате применения приведённой ниже
# программы к строке, состоящей из 99 единиц?
#     ПОКА нашлось (111)
#         заменить (11, 2)
#         заменить (22, 1)
'''
s = '1' * 99

while '111' in s:
    s = s.replace('11', '2', 1)
    s = s.replace('22', '1', 1)
print(s)
'''
# Ответ: 21


# Тип 12 №29199
# Дана программа для Редактора:
# ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
#     заменить (01, 20)
#     заменить (02, 120)
#     заменить (03, 302)
#
# Известно, что исходная строка начинается с цифры 0, а далее
# содержит 12 цифр 1, 15 цифр 2 и 17 цифр 3, расположенных в произвольном порядке.
# Сколько цифр 1 будет в строке, которая получится после выполнения данной программы?
'''
s = '0' + '3' * 17 + '1' * 12 + '2' * 15

while '01' in s or '02' in s or '03' in s:
    s = s.replace('01', '20', 1)
    s = s.replace('02', '120', 1)
    s = s.replace('03', '202', 1)

print(s.count('1'))
'''
# Ответ: 32


# Тип 12 №35901
# Дана программа для редактора:
#     ПОКА нашлось (01) ИЛИ нашлось (02) ИЛИ нашлось (03)
#         заменить (01, 2302)
#         заменить (02, 10)
#         заменить (03, 201)
#
# Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка, содержащая 50 единиц, 12 двоек и 7 троек.
# Сколько единиц было в исходной строке?
'''
for x in range(50):
    for y in range(50):
        for z in range(50):
            s = '0' + '1' * x + '2' * y + '3' * z

            while '01' in s or '02' in s or '03' in s:
                s = s.replace('01', '2302', 1)
                s = s.replace('02', '10', 1)
                s = s.replace('03', '201', 1)
            if s.count('1') == 50 and s.count('2') == 12 and s.count('3') == 7:
                print(x)
'''


# Тип 12 №26957
# Дана программа для Редактора:
# ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>3)
#     ЕСЛИ нашлось (>1)
#     ТО заменить (>1, 22>)
#     ЕСЛИ нашлось (>2)
#     ТО заменить (>2, 2>)
#     ЕСЛИ нашлось (>3)
#     ТО заменить (>3, 1>)
#
# На вход приведённой ниже программе поступает строка, начинающаяся с символа «>»,
# а затем содержащая 26 цифр 1, 10 цифр 2 и 14 цифр 3, расположенных в произвольном порядке.
# Определите сумму числовых значений цифр строки, получившейся в результате выполнения программы.
'''
s = '>' + '1' * 26 + '2' * 10 + '3' * 14
while '>1' in s or '>2' in s or '>3' in s:
    if '>1' in s:
        s = s.replace('>1', '22>', 1)
    if '>2' in s:
        s = s.replace('>2', '2>', 1)
    if '>3' in s:
        s = s.replace('>3', '1>', 1)

print(sum([int(x) for x in s if x.isdigit()]))
'''
# Ответ: 138

# Как получить сумму цифр строки
'''
# Вариант 1
summ = 0
for x in s[:-1]:
    summ += int(x)
print(summ)

# Вариант 2
print(sum([int(x) for x in s if x.isdigit()]))

# Вариант 3
print(s.count('1') + s.count('2') * 2)

# Вариант 4
def my_sum(s: str) -> int:
    """
    Функция принимет строку цифр и возвращает сумму цифр строки
    """
    summ = 0
    for x in set(s):
        if x.isdigit():
            summ += s.count(x) * int(x)
    return summ

print(my_sum(s))
'''


# endregion Урок: ******************************************************************


# Варя = [2.1, 6.1, 12.1]
# КЕГЭ  = []
# на следующем уроке:
