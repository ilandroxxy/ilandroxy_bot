# region Домашка: ******************************************************************

# КЕГЭ № 12459 PRO100 ЕГЭ 29.12.23 (Уровень: Базовый)
#
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится четверичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#  а) если количество значащих цифр в четверичной записи числа чётное, то к этой записи в середину дописывается 0;
#  б) если количество значащих цифр в четверичной записи числа нечётное, то запись не изменяется.
#
# Полученная таким образом запись является десятичной записью искомого числа R.
#
# Укажите максимальное число N, после обработки которого с помощью этого алгоритма, получается число R,
# не большее, чем 180. В ответе запишите это число в десятичной системе счисления.
'''
def f(number, system):
    s = ''
    while number > 0:
        s += str(number % system)
        number //= system
    s = s[::-1]
    return s


M = []
for n in range(1, 1000):
    s = f(n, 4)
    if len(s) % 2 == 0:
        s = s[:len(s) // 2] + '0' + s[:len(s) // 2]
    r = int(s, 4)
    if r <= 180:
        M.append(n)
print(max(M))
'''

# endregion Домашка: ******************************************************************


# region Урок: ********************************************************************

# № 12721 (Уровень: Базовый)
# (C. Горбачёв) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится восьмеричная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если количество чётных цифр в записи числа нечётно, то к трём последним
# разрядам восьмеричной записи справа дописывается 46;
# б) если количество чётных цифр в записи числа чётно, то остаток от деления
# числа на 8 умножается на 5, переводится в восьмеричную запись и дописывается слева.
# Полученная таким образом запись является восьмеричной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число R, которое может быть получено с помощью описанного
# алгоритма при N не меньшем 80. В ответ запишите это число в десятичной системе счисления.
'''
R = []
for n in range(81, 10000):
    s = oct(n)[2:]
    chet = [x for x in s if x in '02468']
    if len(chet) % 2 != 0:
        s = s[-3:] + '46'
    else:
        x = (n % 8) * 5
        s = oct(x)[2:] + s
    r = int(s, 8)
    R.append(r)
print(min(R))
'''
# Ответ: 38


# № 11224 (Уровень: Средний)
# (М. Ишимов) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр троичной записи числа N делится на 4, то слева дописывается «1»,
# а затем из полученной записи удаляются два правых разряда;
# б) если сумма цифр троичной записи числа N на 4 не делится, то остаток от деления
# этой суммы на 4 сначала умножается на 3, а затем переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число R, большее 353, которое может получиться с помощью описанного алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
def f(number, system):
    s = ''
    while number > 0:
        s += str(number % system)
        number //= system
    return s[::-1]


def summa(el: str):
    """
    Функция поиска суммы цифр строки
    """
    return sum([int(c) for c in el if c.isdigit()])

R = []
for n in range(1, 10000):
    s = f(n, 3)
    if summa(s) % 4 == 0:
        s = '1' + s[:-2]
    else:
        x = (summa(s) % 4) * 3
        s = s + f(x, 3)
    r = int(s, 3)
    if r > 353:
        R.append(r)
print(min(R))
'''
# Ответ: 354


# № 10658 (Уровень: Средний)
# (Н. Сафронов) На вход алгоритма подаётся натуральное число N > 10.
# Алгоритм строит по нему новое число R следующим образом:
# 1. Строится троичная запись числа N.
# 2. К этой записи дописываются разряды по следующему правилу.
# Если количество четных цифр в полученной записи больше чем нечетных, слева дописывается 22, иначе 11.
# 3. Полученная таким образом запись является троичной записью искомого числа R.
# Укажите минимальное значение R, больше чем 100, которое может получится в результате работы алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
def f(number, system):
    s = ''
    while number > 0:
        s += str(number % system)
        number //= system
    return s[::-1]


R = []
for n in range(11, 1000):
    s = f(n, 3)
    chet = [x for x in s if x in '02468']
    nechet = [x for x in s if x in '13579']
    if len(chet) > len(nechet):
        s = '22' + s
    else:
        s = '11' + s
    r = int(s, 3)
    if r > 100:
        R.append(r)
print(min(R))
'''
# Ответ: 120


# № 9152 Джобс 06.06.2023 (Уровень: Средний)
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются разряды по следующему правилу.
# Если число кратно 5, то слева дописывается 1, справа две последние цифры (младшие разряды).
# Иначе слева дописывается двоичное представления остатка от деления числа на 5.

# Укажите максимальное число R, не превышающее 223, которое может являться результатом работы данного алгоритма.
# В ответе это число запишите в десятичной системе счисления.
'''
V = []
for n in range(1,10000):
    s = bin(n)[2:]
    if n % 5 == 0:
        s = '1' + s + s[-2:]
    else:
        s = bin(n % 5)[2:] + s
    r = int(s, 2)
    if r <= 223:
        V.append(r)
print(max(V))
'''
# Ответ: 219


# № 8423 (Уровень: Средний)
# Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
# 1. Строится двоичная запись числа N.
# 2. Если число N делится на 5, в конец двоичной записи добавляется двоичный код числа 5,
# в противном случае в конец двоичной записи добавляется 1.
# 3. Если полученное на предыдущем шаге число делится на 7, в конец двоичной записи
# добавляется двоичный код числа 7, в противном случае в конец двоичной записи добавляется 1.
# 4. Результатом работы алгоритма становится десятичная запись полученного числа R.

# Определите наибольшее возможное значение N, для которого в результате работы алгоритма получается R < 1 855 663.
'''
M = []
for n in range(1,1000000):
    s = bin(n)[2:]
    if n % 5 == 0:
        s = s + bin(5)[2:]
    else:
        s = s + '1'
    x = int(s,2)
    if x % 7 == 0:
        s = s + bin(7)[2:]
    else:
        s = s + '1'
    r = int(s, 2)
    if r < 1855663:
        M.append(n)
print(max(M))
'''
# endregion Урок: ******************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Варя = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19-21, 22, 23, 24, 25]
# КЕГЭ  = [5, 14]
# на следующем уроке: На следующем уроке отработать 8 номера КЕГЭ

