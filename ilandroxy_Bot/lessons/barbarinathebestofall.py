
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************


# region Урок: ********************************************************************

# Комментирование в Пайтон
# - это однострочный комментарий (программа не видит строчку)
'''
многострочный комментарий
'''


X = 5  # переменная - это способ взаимодействия с данными

# Типы данных переменных
'''
a = 5   # int (integer) - целочисленные значения

b = 5.0  # float (число с плавающей точкой) - вещественные числа/дроби
print(7 / 2)  # 3.5

c = '5'  # str (string) - строчный тип данных, это буквы, символы, числа и тд
print(a * 4, c * 4)  # 20 5555
print('hello, ' + 'world') # hello, world - склеились

d1 = True  # bool (Boolean)
d2 = False
print(4 < 10)  # True
'''

# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# Неограниченное кол-во значений внутри списка
# Различные тпиы данных могут храниться внутри
# Каждый элемент имеет порядок - индекс, начинающийся с нуля
# Через индексы мы можем брать и менять элементы списка

B = (1, 2, 3)  # tuple (кортеж)
# Все тоже самое, что в списке, но нельзя менять элементы

C = {1, 2, 3}  # set (множество)
# В множестве нельзя хранить копии элементов, он их будет убирать

D = {1: "один", 2: 'два', 3: 'три'}  # dict (словарь)
# Доступ к значению элемента словаря, осуществляется через его ключ
print(D[1])
D[1] = 'ОДИН'
print(D)  # {1: 'ОДИН', 2: 'два', 3: 'три'}
print(D.keys())  # dict_keys([1, 2, 3])
print(D.values())  # dict_values(['ОДИН', 'два', 'три'])
'''

'''
M = [2, 2.0, '2', True, 2+2, 7/2, '2' * 3, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {1: "один", 2: 'два', 3: 'три'} ]
for x in M:
    print(x, type(x))
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3]
print(A, type(A))  # [1, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры
'''
a = input('Ввод данных с клавиатуры: ')  # функция input() принимает строку
print(a, type(a))  # <class 'str'>

n = int(input('Введите число: '))
print(n, type(n))
'''

# Работа с функцией print() через f-строку
'''
# "Сегодня облачно, а температура 24 градуса!"
weather = 'облачно'
temperature = int(input('Температура: '))
print("Сегодня ", weather, ", а температура ", temperature, " градуса!")
print("Сегодня " + weather + ", а температура " + str(temperature) + " градуса!")
print("Сегодня {}, а температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, а температура {temperature} градуса!")
# TypeError: can only concatenate str (not "int") to str
'''


# Базовая арифметика
'''
a = 7
b = 2

print(f'{a} + {b} = {a+b} \n'  # '\n' - переход на новую стоку вывода консоли
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # в пустом print() есть '\n'

print(f'{a} / {b} = {a/b} - обычное вещественное деление (дробь) \n' 
      f'{a} // {b} = {a//b} - взятие целой части от деления (без округления) \n'
      f'{a} % {b} = {a%b} - остаток от деления (в виде обыкновенной дроби)')

print()

import math
print(f'Взятие квадратного корня через библиотеку math: {math.sqrt(16)} \n'
      f'Возведите число {a} в степень{b}: {a} ** {b} = {a**b} \n'
      f'Взятие квадратного корня от числа 16: 16 ** (1/2) = {16 ** (1/2)} \n'
      f'Взятие кубического корня от числа 27: 27 ** (1/3) = {27 ** (1/3)}')

print()
print(f'Функция для математического округления: round() = {round(3.6)}')
'''

# endregion Урок: ******************************************************************


# todo: Варя = []
# todo: КЕГЭ  = []
# на прошлом уроке:
# на следующем уроке:
