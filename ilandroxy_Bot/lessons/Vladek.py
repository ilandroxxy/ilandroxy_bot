
# region Домашка: ******************************************************************



# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# Тип 2
'''
# (z ≡ ¬x) → ((w → ¬y) ∧ (y → x))

print('x y z w F')
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                F = (z == (not x)) <= ((w <= (not y)) and (y <= x))
                print(x, y, z, w, F)
'''


# Тип 5

'''
# Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
# 1. Строится двоичная запись числа N.
# 2. Если сумма цифр десятичной записи заданного числа нечётна, то в конец
# двоичной записи дописывается 1, если чётна – 0.
# 3–4. Пункт 2 повторяется для вновь полученных чисел ещё два раза.
# 5.  Результатом работы алгоритма становится десятичная запись полученного числа R.

# Определите наименьшее возможное значение R > 2054, которое может получиться в результате работы алгоритма.

M = []
for n in range(1, 1000):
    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.

    for _ in range(3):  # 3–4. Пункт 2 повторяется для вновь полученных чисел ещё два раза.
        if int(s, 2) % 2 != 0:  # 2. Если сумма цифр десятичной записи заданного числа нечётна, то в конец двоичной записи дописывается 1,
            s += '1'
        else:
            s += '0'  # если чётна – 0

    r = int(s, 2)  # 5.  Результатом работы алгоритма становится десятичная запись полученного числа R.
    if r > 2054:
        print(r)
        M.append(r)
        break
print(min(M))
'''
# Ответ: 2063


# Тип 6

# Черепаха выполнила следующую программу:
# Повтори 4 [Вперёд 6 Направо 90 Вперёд 6 Налево 90 Вперёд 6 Направо 90]
# Определите, сколько точек с целочисленными координатами будут находиться
# внутри области, ограниченной линией, полученной при выполнении данной программы.
# Точки, расположенные на линии, не учитывать.

# Вариант 1
'''
import turtle as t

t.left(90)
t.speed(10)
l = 20

for _ in range(4):
    t.forward(6*l)
    t.right(90)
    t.forward(6*l)
    t.left(90)
    t.forward(6*l)
    t.right(90)

t.pu()
for x in range(0, 20):
    for y in range(-6, 13):
        t.goto(x*l, y*l)
        t.dot(2, 'red')
t.done()
'''

# Вариант 2
'''
import turtle as t

t.left(90)
t.speed(10)
l = 20

t.begin_fill()
for _ in range(4):
    t.forward(6*l)
    t.right(90)
    t.forward(6*l)
    t.left(90)
    t.forward(6*l)
    t.right(90)
t.end_fill()

canvas = t.getcanvas()
count = 0
for x in range(-100*l, 100*l, l):
    for y in range(-100*l, 100*l, l):
        item = canvas.find_overlapping(x, y, x, y)
        if len(item) == 1 and item[0] == 5:
            count += 1
print(count)
t.done()
'''
# Ответ: 145


# Тип 8
'''
# Полина составляет коды из букв слова ПОЛИНА. Код должен состоять
# из 8 букв, любую букву можно использовать произвольное число раз или
# не использовать вовсе. Полина хочет, чтобы согласных в каждом коде было
# больше, чем гласных. Сколько кодов, удовлетворяющих этому условию, она
# сможет составить?

s = 'ПОЛИНА'
sogl = 'ПЛН'
glas = 'ОИА'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        for g in s:
                            for h in s:
                                temp = a + b + c + d + e + f + g + h
                                if [i for i in temp if i in sogl] > [i for i in temp if i in glas]:
                                    count += 1
print(count)
'''
# Ответ: 1302723


# Тип 9
'''
# В каждой строке электронной таблицы записаны пять натуральных чисел.
# Определите, сколько в таблице строк, для которых выполнены следующие условия:
# – все числа в строке различны;
# – чётных чисел больше, чем нечётных;
# – сумма чётных чисел меньше суммы нечётных.
# В ответе запишите число – количество строк, для которых выполнены эти условия

count = 0
for s in open('9.txt'):
    M = [int(i) for i in s.split()]
    if len(set(M)) == len(M):  # – все числа в строке различны;
        nechet = [i for i in M if i % 2 != 0]
        chet = [i for i in M if i % 2 == 0]
        if len(chet) > len(nechet):  # – чётных чисел больше, чем нечётных;
            if sum(chet) < sum(nechet):  # – сумма чётных чисел меньше суммы нечётных.
                count += 1
print(count)
'''
# Ответ: 241


# Тип 14
'''
# В выражении 317x_37 + 4x29_37 x обозначает некоторую цифру из алфавита
# системы счисления с основанием 37. Определите наименьшее значение x,
# при котором значение данного выражения кратно 36.  Для найденного x
# вычислите частное от деления данного выражения на 36 и запишите его
# в ответе в десятичной системе счисления.

# ValueError: int() base must be >= 2 and <= 36, or 0

for x in range(0, 37):
    A = [3, 1, 7, x]
    B = [4, x, 2, 9]

    a = 0
    A.reverse()
    for i in range(0, len(A)):
        a += A[i] * 37 ** i

    b = 0
    B.reverse()
    for i in range(0, len(B)):
        b += B[i] * 37 ** i

    if (a + b) % 36 == 0:
        print((a + b) // 36)
        break
 '''
# Ответ: 10087


# Тип 17
'''
# Файл содержит последовательность целых чисел, по модулю не превышающих 10 000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество таких пар, в которых запись меньшего элемента
# заканчивается цифрой 3, а сумма квадратов элементов пары меньше, чем квадрат
# наименьшего из элементов последовательности, запись которых заканчивается
# цифрой 3. В ответе запишите два числа: сначала количество найденных пар,
# затем максимальную сумму квадратов элементов этих пар

A = [int(i) for i in open('17.txt') if int(i) % 10 == 3]
mini = min(A)

M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(0, len(M)-1):
    if min(M[i], M[i+1]) % 10 == 3:  # в которых запись меньшего элемента заканчивается цифрой 3
        if M[i] ** 2 + M[i+1] ** 2 < mini ** 2:  #  а сумма квадратов элементов пары меньше, чем квадрат наименьшего из элементов последовательности, запись которых заканчивается цифрой 3.
            count += 1
            maxi = max(maxi, M[i] ** 2 + M[i+1] ** 2)
print(count, maxi)
'''
# Ответ: 332 96731834













# endregion Урок: ******************************************************************


# todo: Владек = [2, 5, 8, 12, 14+, 15, 16, 23, 25.2]
# на прошлом уроке: Прорешали 2 вариант статград от 15.12
# на следующем уроке: Прорешать ФИПИ ВАРИАНТ - проблемные задачи.