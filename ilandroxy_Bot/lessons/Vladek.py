
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************

# № 5723 (Уровень: Средний)
# На вход алгоритма подаётся натуральное число N меньшее 1000. Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр в двоичной записи числа чётная, то к этой записи слева дописывается 10, а иначе – 11;
# б) если сумма цифр числа, получившегося в пункте а),
# в двоичной записи числа нечётная, то к этой записи справа дописывается 11, а иначе – 00.
#
# Полученная таким образом запись является двоичной записью искомого числа R.

# Укажите количество чисел R, меньших 860, которые могут быть получены при обработке числа N.
'''
c = 0
for n in range(1, 1000):
  s = bin(n)[2:]
  if sum([int(i) for i in s]) % 2 == 0:
    s = "10" + s
  else:
    s = "11" + s
  if sum([int(i) for i in s]) % 2 != 0:
    s = s + "11"
  else:
    s = s + "00"
  r = int(s, 2)
  if r < 860:
    c += 1
print(c)
'''
# Показать ответ: 47


# Тип 17 № 37373
# В файле содержится последовательность из 10000 целых положительных чисел.
# Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности,
# у которых разность элементов кратна 36 и хотя бы один из элементов кратен 13,
# затем максимальную из разностей элементов таких пар. В данной задаче под парой
# подразумевается два различных элемента последовательности.
# Порядок элементов в паре не важен.
'''
M = [int(i) for i in open('17.txt')]
count = 0
maxi = 0
for i in range(len(M)):
    for j in range(i+1, len(M)):
        if (abs(M[i] - M[j])) % 36 == 0:
            if abs(M[i]) % 13 == 0 or abs(M[j]) % 13 == 0:
                count += 1
                maxi = max(maxi, abs(M[i] - M[j]))
print(count, maxi)
'''
#  212587 9972


# № 8481 (Уровень: Базовый)
# (В. Рыбальченко) Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# - символ «?» означает ровно одну произвольную цифру;
# - символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Найдите все натуральные числа меньшие 10**8, которые кратны 237,
# соответствуют маске «81?2*80», но не соответствуют маске «*9*».
# В ответ в первом столбике перечислите все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 237.
'''
from fnmatch import *
for x in range(237, 10**8, 237):  # все натуральные числа меньшие 10**8 and которые кратны 237
    if fnmatch(str(x), '81?2*80'):   # соответствуют маске «81?2*80»
        if not fnmatch(str(x), '*9*'):  # не соответствуют маске «*9*»
            print(x, x//237)
'''
# Показать ответ
# 815280 3440
# 8162280 34440
# 81324180 343140
# 81727080 344840
# 81821880 345240


# Текстовый файл 4.txt состоит не более чем из 10**6  заглавных латинских букв (A..Z).
# Файл разбит на строки различной длины. В строках, содержащих более 64 букв R,
# нужно определить и вывести максимальное расстояние между одинаковыми буквами в одной строке.

# Тип 24 № 35998
# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт.
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
#
# В строках, содержащих менее 25 букв A, нужно определить и вывести
# максимальное расстояние между одинаковыми буквами в одной строке.
'''
ALPHABET = sorted('QWERTYUIOPASDFGHJKLZXCVBNM')
s = open('24.txt').readlines()
maxi = 0
for x in s:
    if x.count('A') < 25:
        for a in ALPHABET:
            maxi = max(maxi, x.rindex(a) - x.index(a))
print(maxi)
'''

'''
ALPHABET = sorted('QWERTYUIOPASDFGHJKLZXCVBNM')
s = open('24.txt').readlines()
maxi = 0
for x in s:
    if x.count('R') > 64:
        for a in ALPHABET:
            maxi = max(maxi, x.rindex(a) - x.index(a))
print(maxi)
'''

'''
ALPHABET = sorted('QWERTYUIOPASDFGHJKLZXCVBNM')
s = open('24.txt').readline()
count = 0
for a in ALPHABET:
    M = [len(i) for i in s.split(a) if all(x not in i for x in 'AA AB BA AC CA BB BC CB CC'.split()) and len(i) >= 0]
    count += len(M)
print(count)
'''
# 634834
# 673979
# 715601
# 758873


# № 8425 (Уровень: Средний)
# В системе счисления с основанием p выполняется равенство 32⋅14 =xy2.
# Буквами x и y обозначены некоторые цифры из алфавита системы счисления с основанием p.
# Определите значение числа yx_p
# и запишите это значение в десятичной системе счисления.
'''
ALPHABET = sorted('0123456789AQWERTYUIOPSDFGHJKLZXCVBNM')
for p in range(5, 36):
    for x in ALPHABET[:p]:
        for y in ALPHABET[:p]:
            if int('32', p) * int('14', p) == int(f'{x}{y}2', p):
                print(int(f'{y}{x}', p))
'''
# Показать ответ: 23


# endregion Урок: ******************************************************************

import useful
print(useful.Who_Is_Name())


# todo:    Владек   = [2, 3, 5, 8, 9, 12, 14+, 15, 16, 17, 19-21, 22, 23, 24.1, 25.2]
# todo: Владек КЕГЭ = [16, 25]
# на прошлом уроке: Решали разной сложности задачи: 6, 14, 12 - все задачи среднего и сложного уровня
# на следующем уроке: