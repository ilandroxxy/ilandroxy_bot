
# region Домашка: ******************************************************************

# todo: разобрать задачу 4500 КеЕГЭ
'''
# + 1, + 2, * 2
# от 3 до 79, содержит 11 и не содержит 23
# не должна содержать двух команд прибавить +1

from functools import *
@lru_cache()
def F(a, b):
    if a > b or a == 23:
        return 0
    if a == b:
        return 1
    elif a < b:
        return G(a + 1, b) + F(a + 2, b) + F(a * 2, b)

def G(a, b):
    if a > b or a == 23:
        return 0
    if a == b:
        return 1
    elif a < b:
        return F(a + 2, b) + F(a * 2, b)


print(F(3, 11) * F(11, 79))
'''

# endregion Домашка: ******************************************************************

# Тип 25 № 41000
'''
# Пусть M(N) — сумма двух наибольших различных натуральных делителей натурального числа N, не считая самого числа и единицы.
# Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 11_000_000, для которых 0<M(N)<10000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.


def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
    return sorted(dl)

k = 0
for x in range(11_000_000+1, 110_000_000):
    dl = D(x)
    if len(dl) >= 2:
        M = dl[-1] + dl[-2]
        if 0 < M < 10000:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 8672
# 8388
# 8532
# 7042
# 7364


# Тип 25 № 36038
'''
# Пусть M — сумма минимального и максимального натуральных делителей целого числа, не считая единицы и самого числа.
# Если таких делителей у числа нет, то считаем значение M равным нулю.
#
# Напишите программу, которая перебирает целые числа, большие 452021, в порядке возрастания и ищет среди них такие,
# для которых значение M при делении на 7 даёт в остатке 3. Вывести первые 5 найденных чисел и соответствующие им значения M.
#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число, затем — значение М.
# Строки выводятся в порядке возрастания найденных чисел.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
            return sorted(dl)
    return sorted(dl)

k = 0
for x in range(452021+1, 110_000_000):
    dl = D(x)
    if len(dl) >= 2:
        M = dl[0] + dl[-1]
        if M % 7 == 3:
            print(x, M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 452025 150678
# 452029 23810
# 452034 226019
# 452048 226026
# 452062 226033




# Тип 25 № 46983
'''
# Пусть M(N) — пятый по величине делитель натурального числа N без учёта самого числа и единицы. Например, M(1000) = 100.
# Если у числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M(N) = 0.
# Найдите 5 наименьших натуральных чисел, превышающих 460_000_000, для которых M(N)>0.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.

def D(x):
    dl = set()
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            dl.add(j)
            dl.add(x//j)
    return sorted(dl)

k = 0
for x in range(460_000_000+1, 110_000_000_000):
    dl = D(x)
    if len(dl) >= 5:
        M = dl[-5]
        print(M)
        k += 1
        if k == 5:
            break
'''
# Ответ:
# 41818182
# 261959
# 5
# 271
# 57500001


# Тип 25 № 33495
'''
# Рассмотрим произвольное натуральное число, представим его всеми возможными способами в виде произведения
# двух натуральных чисел и найдём для каждого такого произведения разность сомножителей.
# Найдите все натуральные числа, принадлежащие отрезку [2000000;3000000], у которых составленное описанным способом множество разностей будет содержать не меньше трёх элементов, не превышающих 115.
# В ответе перечислите найденные числа в порядке возрастания.


def D(x):
    dl = set()
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            if (x // j) - j <= 115:
                dl.add((x//j) - j)
                if len(dl) > 2:
                    return sorted(dl)
    return sorted(dl)

for x in range(2000000, 3000000+1):
    dl = D(x)
    if len(dl) > 2:
        print(x)
'''
# Ответ:
# 2053440
# 2098080
# 2328480
# 2638944


# Тип 25 № 45259
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 109, найдите все числа, соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а во втором столбце — соответствующие им результаты деления этих чисел на 23.

my_dict = {}
for x in '0123456789':
    for y in '0123456789':
        A = int(f'12345{x}7{y}8')
        if A % 23 == 0:
            my_dict[A] = A // 23

for key in sorted(my_dict):
    print(key, my_dict[key])
'''
# Ответ:
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816



# Тип 25 № 47229
'''
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2139*4, делящиеся на 2023 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.

# print(10**10)
# print(f'1?2139****4')  # идем до 1000

M = [str(i) for i in range(0, 1000)]
M.append('')

my_dict = {}
for x in '0123456789':
    for y in M:
        A = int(f'1{x}2139{y}4')
        if A % 2023 == 0:
            my_dict[A] = A // 2023

for key in sorted(my_dict):
    print(key, my_dict[key])
'''
# Ответ:
# 162139404 80148
# 1321399324 653188
# 1421396214 702618
# 1521393104 752048



# region Урок: ******************************************************************



# endregion Урок: ******************************************************************


# todo: Владек = [2, 5, 8, 12, 14+, 15, 16, 23, 25.2], на следующем уроке: 16 с отрезками и множествами , 9 номер через Python, 17 номер