
# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************



# region Урок: ******************************************************************


'''
1 bit = минимальная единицы измерения
1 byte = 8 bit = 2**3 bit
1 Kbyte = 1024 byte = 2**10 byte = 2 ** 13 bit
1 Mbyte = 1024 Kbyte = 2**10 Kbyte = 2**20 byte = 2 ** 23 bit
'''

# 24 Мбайт = 24 * 2**20 byte

# Тип 7 № 14695
# Автоматическая фотокамера производит растровые изображения размером 800х 600 пикселей.
# При этом объём не может превышать 600 Кбайт, упаковка данных не производится.
# Какое максимальное количество цветов можно использовать в палитре?

# I (бит) = pixels * i (бит уходит на 1 пиксель картинки)
# Colors = 2 ** i
'''
pixels = 800 * 600
I = 600 * 2**13
print(I / pixels)
i = 10
Colors = 2 ** i
print(Colors)
'''
# 1024


# Тип 7 № 18621
# Автоматическая фотокамера делает фотографии высокого разрешения с палитрой, содержащей
# 2**16=65536 цветов. Средний размер фотографии составляет 12 Мбайт. Для хранения в базе данных фотографии
# преобразуют в чёрно-белый формат с палитрой, содержащей 256 цветов.
# Другие преобразования и дополнительные методы
# сжатия не используются. Сколько Мбайт составляет средний размер преобразованной фотографии?
'''
# I = pixels * i
i = 16
I = 12 * 2 ** 23
pixels = I / i

# Colors = 256 = 2 ** i
i2 = 8
# I2 - ?
I2 = pixels * i2
print(f'Ответ: {I2 / 2**23}')
'''
# Ответ: 6.0


# Тип 7 № 45241
# Для хранения сжатого произвольного растрового изображения размером 192на 960 пикселей отведено
# 90 Кбайт памяти без учёта размера заголовка файла. При сжатии объём файла уменьшается на 35%. Для кодирования цвета
# каждого пикселя используется одинаковое количество бит, коды пикселей записываются в файл один за другим без
# промежутков. Какое максимальное количество цветов можно использовать в изображении?
'''
pixels = 192 * 960
I = 90 * 2 ** 13  # сжатый    == 65% от изначального  (100 - 35)

I2 = (I / 65) * 100
print(I2 / pixels)
i = 6
print(f'Ответ: {2 ** 6}')
'''
# Ответ: 64

# Тип 7 № 55803
# Голосовое сообщение, записанное в стерео формате, передается со скоростью 64000 бит/с. Файл был
# записан с такими параметрами: глубина кодирования — 24 бит на отсчет, частота дискретизации — 16000 отсчетов в
# секунду, время записи — 90с. Сколько секунд будет передаваться голосовое сообщение?
'''
# I (бит) = a (каналов) * b(Гц) * c (бит) * t (сек)
a = 2
b = 16000
c = 24
t = 90
I = a * b * c * t
U = 64000
print(f'Ответ: {I / U}')
'''
# Ответ: 1080


# Тип 7 № 47211
# Музыкальный фрагмент был записан в формате моно, оцифрован и сохранён в виде файла без
# использования сжатия данных. Размер полученного файла — 28 Мбайт. Затем тот же музыкальный фрагмент был записан
# повторно в формате стерео (двухканальная запись) и оцифрован с разрешением в 3,5 раза выше и частотой дискретизации
# в 2 раза меньше, чем в первый раз. Сжатие данных не производилось. Укажите размер полученного при повторной записи
# файла в Мбайт. В ответе запишите только целое число, единицу измерения писать не нужно.

# Решение картинкой


# Тип 12 № 35986
# Дана программа для редактора:

#     ПОКА НЕ нашлось (00)
#         заменить (01, 210)
#         заменить (02, 320)
#         заменить (03, 3012)
#     КОНЕЦ ПОКА
#
# Известно, что исходная строка начиналась с нуля и заканчивалась нулём,
# а между ними содержала только единицы, двойки и тройки.
# После выполнения данной программы получилась строка, содержащая 23 единицы, 48 двоек и 41 тройку.
# Сколько цифр было в исходной строке?

for x in range(50):
    for y in range(50):
        for z in range(50):
            s = '0' + '1' * x + '2' * y + '3' * z + '0'

            while '00' not in s:
                s = s.replace('01', '210', 1)
                s = s.replace('02', '320', 1)
                s = s.replace('03', '3012', 1)

            if s.count('1') == 23 and s.count('2') == 48 and s.count('3') == 41:
                print(s)
                print(x + y + z + 2)

# Ответ: 34


# endregion Урок: ******************************************************************

import useful
print(useful.Who_Is_Name())


# todo:    Владек   = [2, 3, 5, 8, 9, 12, 14+, 15, 16, 17, 19-21, 22, 23, 24.1, 25.2]
# todo: Владек КЕГЭ = [16, 25]
# на прошлом уроке: Прорешивали 16 номера с превышением рекурсии (вручную) и решали задачку 25 с сложными масками
# на следующем уроке:  Позаниматься 25 номерами с масками
