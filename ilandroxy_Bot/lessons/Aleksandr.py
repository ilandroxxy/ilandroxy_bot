# region Домашка:  ******************************************************************************



# endregion Домашка:  ******************************************************************************



# region Урок:  ******************************************************************************

# На вход алгоритма подаётся натуральное число N большее 4. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#   а) если количество цифр в двоичной записи числа нечётное, то центральный бит двоичного представления инвертируется;
#   б) если количество цифр в двоичной записи числа чётное, то два центральных бита двоичного представления инвертируется;
# Например, для исходного числа 610 = 1102 результатом является число 1002 = 410, а для исходного числа 1110 = 10112
# результатом является число 11012 = 1310.
# Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число R, большее 100 и меньшее N.
# В ответе запишите это число в десятичной системе счисления.
'''
for n in range(5, 500):
    temp = n
    s = bin(n)[2:]
    s = [i for i in s]
    if len(s) % 2 != 0:
        if s[len(s) // 2] == '0':
            s[len(s) // 2] = '1'
        else:
            s[len(s) // 2] = '0'
    else:

        if s[len(s) // 2] == '0' and s[(len(s) // 2) - 1] == '0':
            s[len(s) // 2] = '1'
            s[(len(s) // 2) - 1] = '1'
        if s[len(s) // 2] == '1' and s[(len(s) // 2) - 1] == '0':
            s[len(s) // 2] = '0'
            s[(len(s) // 2) - 1] = '1'
        if s[len(s) // 2] == '0' and s[(len(s) // 2) - 1] == '1':
            s[len(s) // 2] = '1'
            s[(len(s) // 2) - 1] = '0'
        if s[len(s) // 2] == '1' and s[(len(s) // 2) - 1] == '1':
            s[len(s) // 2] = '0'
            s[(len(s) // 2) - 1] = '0'
    s = ''.join(s)
    r = int(s, 2)
    if (r > 100) and (r < temp):
        print(temp)
  '''

for n in range(5, 500):
    temp = n
    s = bin(n)[2:]
    sred = len(s) // 2

    if len(s) % 2 != 0:
        if s[sred] == '0':
            s = s[:sred] + '1' + s[sred+1:]
        else:
            s = s[:sred] + '0' + s[sred+1:]
    else:
        centre = s[sred - 1: sred + 1]
        centre = centre.replace('0', '*')
        centre = centre.replace('1', '0')
        centre = centre.replace('*', '1')
        s = s.replace(s[sred - 1: sred + 1], centre)

    r = int(s, 2)
    if (r > 100) and (r < temp):
        print(temp)
        break

# Ответ: 109

# По каналу связи передаются трехзначные числа. Для каждой пары таких чисел строится контрольная сумма,
# необходимая для обнаружения ошибок при передаче. Контрольная сумма строится следующим образом:
# 1. записывается сумма разрядов сотен исходных чисел
# 2. справа дописывается сумма разрядов десятков исходных чисел
# 3. слева дописывается сумма разрядов единиц исходных чисел
# 4. контрольная сумма — это три цифры полученного числа: число тысяч, сотен и десятков.
# Пример: передаются числа 473 и 934. Сумма разрядов сотен равна 13, сумма разрядов десятков равна 10,
# сумма разрядов единиц 7. Получаем число 71310, контрольная сумма 131.
# Определите, при каком наибольшем значении первого числа пары контрольная сумма будет равна 002?
for n in range(999, 99, -1):
    for m in range(999, 99, -1):
        N = [int(i) for i in str(n)]
        M = [int(i) for i in str(m)]
        a = N[0] + M[0]
        b = N[1] + M[1]
        c = N[2] + M[2]
        chi = str(c) + str(a) + str(b)

        r = chi[-4: -1]
        #if chi[-2] == 1 and chi[-3] == 0 and chi[-4] == 0:
        if int(r) == 2:

            print(n)
            exit()

# endregion Урок:  ******************************************************************************


# todo: Александр = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14+, 15, 16, 17, 18, 19-21, 22, 23, 24+, 25]
# на прошлом уроке: Прорешивали 8 и 5 номера с КЕГЭ, сложные задачи с ловушками
# на следующем уроке: