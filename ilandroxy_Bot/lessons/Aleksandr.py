# region Домашка:  ******************************************************************************



# endregion Домашка:  ******************************************************************************



# region Урок:  ******************************************************************************

'''
def F(A, x):
    return (x & 39 == 0) or ((x & 11 == 0) <= (not(x & A == 0)))

for A in range(1000):
    flag = True
    for x in range(1000):
        if F(A, x) == 0:
            flag = False
            break
    if flag == True:
        print(A)
        break
'''

'''
from string import *
s = (ascii_letters + digits + punctuation).replace('()', ' ')
'''


#
# № 7596 Досрочная волна 2023 (Уровень: Базовый)
# В файле содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар последовательности, в которых только одно число трехзначное,
# и сумма элементов пары кратна минимальному трехзначному значению последовательности, оканчивающемуся на 5.
# В ответе запишите два числа: сначала количество найденных пар, затем минимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
M = [int(i) for i in open('17.txt')]
MINI = min([i for i in M if len(str(i)) == 3 and str(i)[-1] == '5'])  # минимальному трехзначному значению последовательности, оканчивающемуся на 5
count = 0
mini = 99999
for i in range(0, len(M)-1):
    if (len(str(M[i])) == 3 and len(str(M[i+1])) != 3) or (len(str(M[i])) != 3 and len(str(M[i+1])) == 3):
        if (M[i] + M[i+1]) % MINI == 0:
            count += 1
            mini = min(mini, M[i] + M[i+1])
print(count, mini)
'''
# Ответ: 2 33120


#
# № 7600 Досрочная волна 2023 (Уровень: Базовый)
# Текстовый файл состоит не более, чем из 1 200 000 прописных символов латинского алфавита.
# Определите максимальное количество идущих подряд символов, среди которых любые два символа из набора Q, R, S
# в различных комбинациях (с учётом повторений) не стоят рядом.

# Вариант 1
'''
s = open('24.txt').readline()
M = 'QQ QR QS SQ RQ SS RS SR RR'.split()
for x in M:
    s = s.replace(x, ' ')
M = [len(i) for i in s.split()]
print(max(M) + 2)
'''

# Вариант 2
'''
import itertools
M = []
for s in itertools.product('QRS', repeat=2):
    s = ''.join(s)
    M.append(s)

s = open('24.txt').readline()
for x in M:
    s = s.replace(x, ' ')
M = [len(i) for i in s.split()]
print(max(M) + 2)
'''
# Ответ: 544


#
# № 7601 Досрочная волна 2023 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
# Среди натуральных чисел, не превышающих 10**8 , найдите все числа,
# соответствующие маске 12??36*1, делящиеся на 273 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 273.

# print(10**8)
# print('12??36*1')
'''
import itertools
M = []
for l in range(0, 1+1):
    for s in itertools.product('0123456789', repeat=l):
        s = ''.join(s)
        M.append(s)

R = []
for x in '0123456789':
    for y in '0123456789':
        for z in M:
            A = int(f'12{x}{y}36{z}1')
            if A % 273 == 0:
                R.append([A, A // 273])

for x in sorted(R):
    print(*x)
'''
# Ответ:
# 1271361 4657
# 12633621 46277
# 12663651 46387
# 12693681 46497

# endregion Урок:  ******************************************************************************


# todo: Александр = [2, 3, 5, 6, 8, 9, 12, 14+, 15, 16, 17, 18, 19-21, 22, 23, 24+, 25]
# на прошлом уроке: Прорешивали первый вариант нового Фипи, рассмотрели до 15 задачи.
# на следующем уроке: