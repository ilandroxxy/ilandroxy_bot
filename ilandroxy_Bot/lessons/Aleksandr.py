# region Домашка:  ******************************************************************************



# endregion Домашка:  ******************************************************************************



# region Урок:  ******************************************************************************


# Тип 15
'''
# На числовой прямой даны два отрезка: P = [43; 49] и Q = [44; 53]. Укажите наибольшую возможную длину такого отрезка A, что формула
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.

def F(x):
    P = 43 <= x <= 49
    Q = 44 <= x <= 53
    A = a1 <= x <= a2
    return (A <= P) or Q

M = [int(i)/4 for i in range(1*4, 70*4)]

A = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M) == True:
            A.append(a2-a1)
print(max(A))
'''
# Ответ: 10


# Тип 15 № 8666
'''
# На числовой прямой даны два отрезка: P = [25; 50] и Q = [32; 47]. Укажите наибольшую возможную длину промежутка A, для которого формула
#
# (¬ (x  принадлежит  A) → (x  принадлежит  P)) → ((x  принадлежит  A) → (x  принадлежит  Q))
#
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.
def F(x):
    P = 25 <= x <= 50
    Q = 32 <= x <= 47
    A = a1 <= x <= a2
    return ((not A) <= P) <= (A <= Q)

M = [int(i)/4 for i in range(1*4, 70*4)]

A = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M) == True:
            A.append(a2-a1)
print(max(A))
'''
# Ответ: 15


# Тип 15 № 13364
'''
# На числовой прямой даны два отрезка: P = [130; 171] и Q = [150; 185]. Укажите наименьшую возможную длину такого отрезка A, что формула
#
# (x ∈ P) → (((x ∈ Q) ∧ ¬(x ∈ A)) → ¬(x ∈ P))
#
# истинна при любом значении переменной х, т.е. принимает значение 1 при любом значении переменной х.


def F(x):
    P = 130 <= x <= 171
    Q = 150 <= x <= 185
    A = a1 <= x <= a2
    return P <= ((Q and (not A)) <= (not P))

M = [int(i)/4 for i in range(100*4, 200*4)]

A = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M) == True:
            A.append(a2-a1)
print(min(A))
'''
# Ответ: 21


# Тип 15 № 11119
'''
# На числовой прямой даны два отрезка: P = [20, 50] и Q = [30,65]. Отрезок A таков, что формул
#
# ¬(x ∈ A) → ((x ∈ P) → ¬(x ∈ Q))
#
# истинна при любом значении переменной x. Какова наименьшая возможная длина отрезка A?

def F(x):
    P = 20 <= x <= 50
    Q = 30 <= x <= 65
    A = a1 <= x <= a2
    return (not A) <= (P <= (not Q))

M = [int(i)/4 for i in range(1*4, 80*4)]

A = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M) == True:
            A.append(a2-a1)
print(min(A))
'''
# Ответ: 20


# Тип 15 № 34537
'''
# На числовой прямой даны три отрезка: P = [10,15], Q = [10,20] и R=[5,15].
# Какова наименьшая возможная длина интервала A, что формулы
#
# (x ∈ A) → (x ∈ P) и
# (x ∈ Q) → (x ∈ R)
#
# тождественно равны, то есть принимают равные значения при любом значении переменной х (за исключением, возможно, конечного числа точек).

def F(x):
    P = 10 <= x <= 15
    Q = 10 <= x <= 20
    R = 5 <= x <= 15
    A = a1 <= x <= a2
    return (A <= P) == (Q <= R)

M = [int(i)/4 for i in range(1*4, 40*4)]

A = []
for a1 in M:
    for a2 in M:
        if all(F(x) for x in M) == True:
            A.append(a2-a1)
print(min(A))
'''


# № 1409
'''
# Элементами множеств А, P, Q, R являются натуральные числа, причём P={2,4,6,8,10,12,14,16,18,20}, Q={3,6,9,12,15,18,21,24,27,30}, R={12,24,36,48,60}. Известно, что выражение
#
# (x ∉ A) → (((x ∈ P) ∧ (x ∈ Q)) → (x ∈ R))
#
# истинно (т.е. принимает значение 1 при любом значении переменной х. Определите наименьшее возможное произведение элементов в множестве A.

a = set()

def F(x):
    P = x in {2,4,6,8,10,12,14,16,18,20}
    Q = x in {3,6,9,12,15,18,21,24,27,30}
    R = x in {12,24,36,48,60}
    A = x in a
    return (not A) <= ((P and Q) <= R)

for x in range(1, 1000):
    if F(x) == False:
        a.add(x)

print(a)
print(18 * 6)
'''
# Ответ: 108


# № 1072
'''
# Элементами множеств А, P и Q являются натуральные числа, причём P = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30}
# и Q = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31}. Известно, что выражение
#
# ((x ∈ A) → (x ∈ P)) ∧ ((x ∈ Q) → (x ∉ A))
#
# истинно (т. е. принимает значение 1) при любом значении переменной х. Определите наибольшее возможное количество элементов множества A.

a = set(range(1, 1000))

def F(x):
    P = x in { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30}
    Q = x in {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31}
    A = x in a
    return (A <= P) and (Q <= (not A))

for x in range(1, 1000):
    if F(x) == False:
        a.remove(x)

print(a, len(a))
'''
# Ответ: 10


# Тип 7
'''
# палитрой, содержащей 2**24 = 16 777 216 цветов. Средний размер фотографии составляет 12 Мбайт.
# Для хранения в базе данных фотографии преобразуют в формат с палитрой, содержащей 2**16 = 65536 цветов.
# Другие преобразования и дополнительные методы сжатия не используются.
# Сколько Мбайт составляет средний размер преобразованной фотографии?

# N = 2**24 -> i = 24
i = 24
# I = i * a * b
I = 12 * 2**23
ab = I / i
print(ab)

I2 = (ab * 16) / (2 ** 23)
print(I2)
'''
# Ответ: 8 мбайт

# Тип 11
'''
# При регистрации в компьютерной системе каждому пользователю выдаётся пароль, состоящий из 21 символа и содержащий только символы A, D, F, H, X, Y, Z
# (таким образом, используется 7 различных символов). Каждый такой пароль в компьютерной системе записывается минимально возможным
# и одинаковым целым количеством байт (при этом используют посимвольное кодирование и все символы кодируются одинаковым
# и минимально возможным количеством бит). Укажите объём памяти в байтах, отводимый этой системой для записи 40 паролей.
# В ответе запишите только число, слово «байт» писать не нужно.

symbols = 21
alphabet = 7
i = 3
I_bit = symbols * i
print(I_bit)
I_byte = round(I_bit / 8)
print(I_byte)

print(40 * I_byte)
'''
# Ответ: 320 байт



# Тип 8
'''
# Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово.
# В качестве кодовых слов Игорь использует 4-буквенные слова, в которых есть только буквы A, B, C, D, X,
# причём буква X появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем.
# Сколько различных кодовых слов может использовать Игорь?

s = 'ABCDX'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                temp = a + b + c + d
                if temp.count('X') == 1:
                    count += 1
print(count)
'''
# Ответ: 256



# Тип 5
'''
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1) Строится двоичная запись числа N.
# 2) К этой записи дописывается (дублируется) последняя цифра.
# 3) Затем справа дописывается бит чётности: 0, если в двоичном коде полученного числа чётное число единиц, и 1, если нечётное.
# 4) К полученному результату дописывается ещё один бит чётности.
# Полученная таким образом запись (в ней на три разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R.
# Укажите минимальное число N, после обработки которого автомат получает число, большее 97. В ответе это число запишите в десятичной системе.


for n in range(1, 1000):
    s = bin(n)[2:]
    s += s[-1]

    for _ in range(2):
        if s.count('1') % 2 == 0:
            s += '0'
        else:
            s += '1'

    r = int(s, 2)

    if r > 97:
        print(n)
        break
'''
# Ответ: 13


# Тип 12
'''
# На выполнение Редактору дана следующая программа:
# ПОКА нашлось(111) или нашлось(333)
# ЕСЛИ нашлось(111)
# ТО заменить(111, 3) ИНАЧЕ заменить(333, 1)
# КОНЕЦ ПОКА
# На вход программе подана строка из подряд идущих символов 3.

# Найдите минимальную длину входной строки, больше 100, в результате обработки которой исполнитель выведет минимальное из возможных число.

# Вариант 2
M = []
for i in range(100+1, 200):
    s = '3' * i
    while '111' in s or '333' in s:
        if '111' in s:
           s = s.replace('111', '3', 1)
        else:
           s = s.replace('333', '1', 1)
    M.append([int(s), i])
print('Результат:', sorted(M)[0])


# Вариант 2
mini = 9999999
for i in range(100+1, 200):
    s = '3' * i
    while '111' in s or '333' in s:
        if '111' in s:
           s = s.replace('111', '3', 1)
        else:
           s = s.replace('333', '1', 1)
    if mini > int(s):
        mini = int(s)
        print('Результат:', i, s)


# Вариант 3
DICTIONARY = {}
mini = 9999999
for i in range(100+1, 200):
    s = '3' * i
    while '111' in s or '333' in s:
        if '111' in s:
           s = s.replace('111', '3', 1)
        else:
           s = s.replace('333', '1', 1)
    if int(s) not in DICTIONARY:
        DICTIONARY[int(s)] = i

print('Результат:', min(DICTIONARY.items()))
'''

# Тип 16
'''
# Алгоритмы вычисления функций F(n) и G(n) задан следующими соотношениями:
# F(n) = G(n) = n, при n ≤ 2
# F(n) = G(n) + F(n – 2), при n > 2
# G(n) = F(n – 1) – G(n – 2), при n > 2
# Здесь «//» обозначает деление нацело.
# Определите значение, полученное при вызове G(15).


def F(n):
    if n <= 2:
        return n
    if n > 2:
        return G(n) + F(n - 2)

def G(n):
    if n <= 2:
        return n
    if n > 2:
        return F(n - 1) - G(n - 2)

print(G(15))
'''
# Ответ: 41


# Тип 25
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [135790; 163228],
# числа, сумма натуральных делителей которых больше 460000.
# Для каждого найденного числа запишите количество делителей и их сумму.
# В качестве делителей не рассматривать числа 1 и исследуемое число.
# Так, например, для числа 8 учитываются только делители 2 и 4.

def D(n):
    dl = set()
    for j in range(2, int(n ** 0.5)+1):
        if n % j == 0:
            dl.add(j)
            dl.add(n // j)
    return len(dl), sum(dl)

for n in range(135790, 163228+1):
    l, summ = D(n)
    if summ > 460000:
        print(l, summ)
        # print(f'Число {n} имеет {l} делителей, а их сумма равна: {summ}')
'''
# Ответ:
# 142 473759
# 118 462767
# 126 464999
# 118 461969
# 118 477071

# endregion Урок:  ******************************************************************************


# todo: Александр = [2, 5, 6, 8, 9, 12, 14+, 15, 16, 17, 19, 20, 21, 23, 24+, 25], на следующем уроке: Разбираем следующий вариант со школы