# region Домашка:  ******************************************************************************



# endregion Домашка:  ******************************************************************************



# region Урок:  ******************************************************************************

# Тип 25 № 37130
'''
# Напишите программу, которая перебирает целые числа, большие 600000, в порядке возрастания и ищет среди них такие,
# среди делителей которых есть хотя бы одно число, оканчивающееся на 7, но не равное 7 и самому числу.
# Необходимо вывести первые 5 таких чисел, и наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу.
#
# Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число,
# затем — наименьший делитель, оканчивающийся на 7, не равный 7 и самому числу. Строки выводятся в порядке возрастания найденных чисел.

# 16: 1 2 4 8 16
# 25: 1 5 24
# 48: 1 2 4 6 8 12 24 48


def D(x):
    dl = set()
    for j in range(8, int(x ** 0.5) + 1):
        if x % j == 0:
            if j % 10 == 7:
                dl.add(j)
            if (x//j) % 10 == 7:
                dl.add(x//j)

    return sorted(dl)

count = 0
for x in range(600000+1, 1000000000):
    dl = D(x)
    if len(dl) != 0:
        print(x, dl[0])
        count += 1
        if count == 5:
            break
'''
# Ответ:
# 600001 437
# 600002 47
# 600003 1227
# 600005 217
# 600012 16667



# Тип 25 № 35999
'''
# Найдите все натуральные числа N, принадлежащие отрезку [200_000_000;400_000_000],
# которые можно представить в виде N=2**m·3**n, где m — чётное число, n — нечётное число.
# В ответе запишите все найденные числа в порядке возрастания.

# m = 29
# print(2 ** m)
#
# n = 18
# print(3 ** n)

for m in range(0, 29, 2):
    for n in range(1, 18, 2):
        N = (2 ** m) * (3 ** n)
        if (200_000_000 <= N <= 400_000_000):
            print(N)
'''
# 201326592
# 229582512
# 254803968
# 322486272


# Тип 25 № 33197
'''
# Рассмотрим произвольное натуральное число, представим его всеми возможными способами в виде произведения двух натуральных
# чисел и найдём для каждого такого произведения разность сомножителей.
# Например, для числа 16 получим: 16 = 16*1 = 8*2 = 4*4, множество разностей содержит числа 15, 6 и 0.
# Найдите все натуральные числа, принадлежащие отрезку [1_000_000;2_000_000],
# у которых составленное описанным способом множество разностей будет содержать не меньше трёх элементов, не превышающих 100.
# В ответе перечислите найденные числа в порядке возрастания.

def D(x):
    dl = set()
    for j in range(1, int(x ** 0.5) + 1):
        if x % j == 0:
            if (x//j - j) < 100:
                dl.add(x//j - j)
                if len(dl) == 3:
                    break
    return sorted(dl)

for x in range(1000000, 2000000+1):
    dl = D(x)
    if len(dl) >= 3:
        print(x, dl)
'''
# 1113840
# 1179360
# 1208844
# 1499400


# Тип 25 № 27856
'''
# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632; 95650], числа,
# имеющие ровно шесть различных нечётных натуральных делителей (при этом количество четных делителей может быть любым).
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.

def D(x):
    dl = set()
    for j in range(1, int(x ** 0.5) + 1):
        if x % j == 0:
            if j % 2 != 0:
                dl.add(j)
            if (x // j) % 2 != 0:
                dl.add(x//j)
    return sorted(dl)

for x in range(95631, 95650+1):
    dl = D(x)
    if len(dl) == 6:
        print(dl)
'''
# Ответ:
# 1 3 9 10627 31881 95643
# 1 7 49 61 427 2989
# 1 5 25 1913 9565 47825


# endregion Урок:  ******************************************************************************


# todo: Александр = [2, 5, 6, 8, 12, 14+, 15, 16, 17, 19, 20, 21, 23, 24, 25], на следующем уроке: Порешиваем 25 через новую технологию