# region Домашка: ************************************************************


# endregion Домашка: ************************************************************

# region Урок: ************************************************************


# КЕГЭ № 8158 /dev/inf 05.23 (Уровень: Базовый) (А. Рогов)
# Операнды арифметического выражения записаны в системе счисления с основанием 15.
#
# 1x51_15 − 3x2_15
#
# В записи чисел переменной x обозначена неизвестная цифра из алфавита 15-ричной системы счисления.
# Определите наибольшее значение x, при котором значение данного выражения кратно 4.
# Для найденного x вычислите частное от деления данного выражения на 4
# и запишите его в ответе в десятичной системе счисления.
# Основание системы счисления указывать не нужно.
'''
# ValueError: int() base must be >= 2 and <= 36, or 0
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
m = []
for x in alphabet[:15]:
    t = int(f'1{x}51', 15) - int(f'3{x}2', 15)
    if t % 4 == 0:
        m.append(t//4)
print(max(m))

# Вариант 2
m=[]
for x in '0123456789ABCDE':
    t = int('1' + x + '51',15) - int('3' + x + '2',15)
    if t%4 == 0:
        m.append(t//4)
print(max(m))
'''


# РешуЕГЭ Тип 14 № 48389
# Операнды арифметического выражения записаны в системах счисления с основаниями 7 и 9:
#
# В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры.
# Определите значения x и y, при которых значение данного арифметического выражения будет
# наименьшим и кратно 181. Для найденных значений x и y вычислите частное от деления
# значения арифметического выражения на 181 и укажите его в ответе в десятичной системе счисления.
# Основание системы счисления в ответе указывать не нужно.
'''
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
m = []
for x in alphabet[:7]:
    for y in alphabet[:7]:
        t = int(f'{y}{x}320', 7) + int(f'1{x}3{y}3', 9)
        if t % 181 == 0:
            m.append(t // 181)
print(min(m))
'''
'''
k = []
for n in range(1000, 10000):
    a = str(bin(n)[2:])
    a = a[::-1]
    r = int(a, 2)
    if r == 29:
        k.append(n)
print(min(k))

print(min([n for n in range(1000, 1500) if int(bin(n)[2:][::-1], 2) == 29]))
'''


# todo Тип 5 №63021
# Алгоритм получает на вход натуральное число N
# и строит по нему новое число R следующим образом.
#
# 1. Строится двоичная запись числа N.
# 2. В конец двоичной записи добавляется двоичный код остатка от деления числа N на 4.
# 3. Результатом работы алгоритма становится десятичная запись полученного числа R.

# Какое наибольшее количество доступных чисел может быть на отрезке,
# содержащем 49 натуральных чисел?
'''
for n in range(1, 1000):
    s = bin()
'''

# Тип 23 №9314
# 1. Прибавь 1
# 2. Прибавь 2
# 3. Прибавь предыдущее
#
# Сколько существует программ, которые число 3 преобразуют в число 10?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a+(a-1), b)

print(F(3, 10))

# Вариант 2
def F(a, b):
    if a >= b:
        return a == b
    return F(a+1, b) + F(a+2, b) + F(a+(a-1), b)
print(F(3, 10))
'''
# Ответ: 35


# № 11267 (Уровень: Базовый)
# A. Найти целую часть от деления на 3
# B. Вычесть 2
# C. Вычесть 5
# Сколько существует программ, для которых при исходном числе 41 результатом является число 8,
# и при этом траектория вычислений содержит число 37, но не содержит число 35?
'''
def F(a, b):
    if a <= b or a == 35:
        return a == b
    return F(a // 3, b) + F(a - 2, b) + F(a - 5, b)


print(F(41, 37) * F(37, 8))
'''
# Ответ: 59

# № 11240 (Уровень: Средний)
# (М. Ишимов) Исполнитель преобразует число на экране.
# A. Прибавить 2
# B. Возвести в квадрат
# C. Умножить на 3
#
# Сколько существует программ, для которых при исходном числе 2 результатом является число 64,
# если после выполнения команды B можно выполнить только команду A или C?
'''
def F(a, b, flag):
    if a >= b:
        return a == b
    if flag == 'B':
        return F(a + 2, b, 'A') + F(a * 3, b, 'C')
    return F(a+2, b, 'A') + F(a**2, b, 'B') + F(a*3, b, 'C')

print(F(2, 64, 0))


def F(a, b, flag):
    if a >= b:
        return a == b
    if flag == 1:
        return F(a + 2, b, 0) + F(a * 3, b, 0)
    return F(a+2, b, 0) + F(a**2, b, 1) + F(a*3, b, 0)

print(F(2, 64, 0))
'''
# Ответ: 55


# № 10027 (Уровень: Базовый)
# A. Прибавить 2
# B. Прибавить 3
# C. Умножить на 2
# Сколько существует программ, для которых при исходном числе 5 результатом является число 30,
# а первая в них команда - A или B?

'''
def F(a, b, s):
    if a >= b:
        return a == b
    if s == 'A' or s == 'B' or s == 'C':
        return F(a + 2, b, 'A') + F(a + 3, b, 'B') + F(a * 2, b, 'C')
    return F(a+2, b, 'A') + F(a+3, b, 'B')


print(F(5, 30, 0))

def F(a, b):
    if a >= b:
        return a == b
    return F(a + 2, b) + F(a + 3, b) + F(a * 2, b)


print(F(7, 30) + F(8, 30))
'''
# 580


# № 933 Джобс 08.02.2021 (Уровень: Сложный)
# 1. Прибавить 3
# 2. Умножить на 3
#
# Сколько положительных четных чисел, меньших 100, может получить исполнитель из числа 3?
'''
r = []

def F(a, b):
    if a >= b:
        return a == b
    if a % 2 == 0:
        r.append(a)
    return F(a + 3, b) + F(a * 3, b)

print(F(3, 99))
print(set(r))
print(len(set(r)))
'''
# Ответ: 16



# Тип 9 №58476
# В каждой строке электронной таблицы записаны шесть натуральных чисел.
# Определите количество строк таблицы,
# содержащих числа, для которых одновременно выполнены все следующие условия:
# — максимальное число встречается в строке ровно один раз;
# — хотя бы одно число в строке повторяется более одного раза;
# — максимальное число в строке превышает среднее арифметическое всех
# остальных чисел этой строки более чем в три раза.
#
# В ответе запишите число — количество строк, для которых выполнены эти условия
c = 0
for s in open('9.txt'):
    M = sorted([int(x) for x in s.split()])
    # if M[-1] != M[-2]:
    if M.count(max(M)) == 1:
        if len(M) != len(set(M)):
            if M[-1] > ((sum(M[:-1])) / 5) * 3:
                c += 1
print(c)

# endregion Урок: ************************************************************


# Олеся = [1.1, 2.1, 4.1, 5.1, 6.1, 7.1, 10.1, 11.1, 12.1, 14.1, 16.1, 17.1, 18.1, 19-21 (кодом)]
# КЕГЭ = []
# на следующем уроке: # 23 № 4500 на след. уроке
