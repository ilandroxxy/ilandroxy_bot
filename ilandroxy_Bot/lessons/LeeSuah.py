# region Домашка: ************************************************************


# endregion Домашка: ************************************************************

# region Урок: ************************************************************
'''
from itertools import product, permutations

for v in permutations('ABC'):
    s = ''.join(v)
    print(v, s)
    # ('A', 'B', 'C') ABC
    # ('A', 'C', 'B') ACB
    # ('B', 'A', 'C') BAC
    # ('B', 'C', 'A') BCA
    # ('C', 'A', 'B') CAB
    # ('C', 'B', 'A') CBA


for v in permutations('ABC', 2):
    s = ''.join(v)
    print(v, s)
    # ('A', 'B') AB
    # ('A', 'C') AC
    # ('B', 'A') BA
    # ('B', 'C') BC
    # ('C', 'A') CA
    # ('C', 'B') CB

for v in permutations('ABC', 10):
    print(v)
    # Так нельзя

for v in product('ABC', repeat=2):
    s = ''.join(v)
    print(v, s)
    # ('A', 'B') AB
    # ('A', 'C') AC
    # ('B', 'A') BA
    # ('B', 'C') BC
    # ('C', 'A') CA
    # ('C', 'B') CB
    # ('A', 'A') AA
    # ('A', 'B') AB
    # ('A', 'C') AC
    # ('B', 'A') BA
    # ('B', 'B') BB
    # ('B', 'C') BC
    # ('C', 'A') CA
    # ('C', 'B') CB
    # ('C', 'C') CC
'''
# Тип 25 №45259
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**9, найдите все числа,
# соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

# Вариант 1
'''
for x in range(10):
    for y in range(10):
        s = f'12345{x}7{y}8'
        if int(s) % 23 == 0:
            print(s, int(s) // 23)
'''

# Вариант 2
'''
from fnmatch import *
for num in range(23, 10**9, 23):
    if fnmatch(str(num), '12345?7?8'):
        print(num, num // 23)
'''
# 123450798 5367426
# 123451718 5367466
# 123453788 5367556
# 123454708 5367596
# 123456778 5367686
# 123459768 5367816


# Тип 25 №59730
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# 1) символ «?» означает ровно одну произвольную цифру;
# 2) символ «*» означает любую последовательность — цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 3?1*57, делящиеся на 2023 без остатка.
#
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 2023.
'''
print('3?1***57')  # 0, 1, 2, 3
print(10**8)

'''
'''
# Вариант 1
from itertools import product
for l in range(0, 3+1):
    for v in product('0123456789', repeat=l):  # *
        x = ''.join(v)
        for y in '0123456789':  # ?
            num = int(f'3{y}1{x}57')
            if num % 2023 == 0:
                print(num, num // 2023)

# Вариант 2
from fnmatch import *
for num in range(2023, 10**8, 2023):
    if fnmatch(str(num), '3?1*57'):
        print(num, num // 2023)
'''

# Ответ:
# 321657 159
# 34105757 16859
# 35117257 17359
# 36128757 17859
# 37140257 18359
# 38151757 18859
# 39163257 19359


#
# № 12932 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#     – символ «?» означает ровно одну произвольную цифру;
#     – символ «*» означает любую последовательность цифр произвольной длины;
#     в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске 1?2*4,
# делящиеся на 2024 без остатка и являющиеся полными квадратами.

# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 2024.
'''
from fnmatch import *
for num in range(2024, 10**10, 2024):
    if fnmatch(str(num), '1?2*4'):
        if num ** 0.5 == int(num ** 0.5):
            print(num, num // 2024)
'''
# Ответ:
# 1024144 506
# 1327290624 655776
# 1721586064 850586


# Функция поиска делителей числа
"""
import time
start = time.time()
'''
def divisors(x):
    div = []
    for j in range(1, x+1):
        if x % j == 0:
            div.append(j)
    return div
'''


# 16: {1, 2, 4, 8, 16} - если у числа есть целый квадратный корень, то кол-во делителей нечетное
# 16: {1, 2, (16**0.5), 8, 16} 
# 24: {1, 2, 3, 4, 6, 8, 12, 24} - иначе кол-во делителей четное
# 24: {1, 2, 3, 4, (24 ** 0.5), 6, 8, 12, 24} 
# Таким образом образуются сомножители: 
# 24 // 4 == 6, 24 // 6 == 4

def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x//j]
    return sorted(set(div))


print(divisors(100_000_000))
print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(16))  # [1, 2, 4, 8, 16]

# Новая функция: 0.0003
# Старая функция: 2.90416

print(time.time() - start)
"""


# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
#
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.
#
# Среди натуральных чисел, не превышающих 10**7, найдите все простые числа, соответствующие маске 3?1111*.
# В ответе запишите все найденные числа в порядке возрастания.
'''
def divisors(x):
    div = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            div += [j, x//j]
    return sorted(set(div))


from fnmatch import *
for num in range(10**7):
    if fnmatch(str(num), '3?1111*'):
        if len(divisors(num)) == 2:
            print(num)
'''
# Ответ:
# 311111
# 361111
# 3011117
# 3011119
# 3311117
# 3611119
# 3811117
# 3911111


# Тип 25 №40741
# Пусть M(N) — сумма двух наибольших различных натуральных делителей натурального числа N,
# не считая самого числа. Если у числа N меньше двух таких делителей, то M(N) считается равным 0.
#
# Найдите 5 наименьших натуральных чисел, превышающих 10000000, для которых 0<M(N)<10000.
# В ответе запишите найденные значения M(N) в порядке возрастания соответствующих им чисел N.
'''
def divisors(x):
    div = []
    for j in range(2, int(x**0.5)+1):  # не считая самого числа
        if x % j == 0:
            div += [j, x//j]
    return sorted(set(div))


k = 0
for num in range(10000000+1, 100000000000):
    div = divisors(num)
    if len(div) >= 2:
        M = div[-1] + div[-2]
        if 0 < M < 10000:
            print(M)
            k += 1
            if k == 5:
                break
'''
# Ответ:
# 6876
# 6374
# 6924
# 8024
# 8358


# Тип 25 №33104
# Назовём нетривиальным делителем натурального числа его делитель, не равный единице и самому числу.
# Найдите все натуральные числа, принадлежащие отрезку [289123456; 389123456]
# и имеющие ровно три нетривиальных делителя.
# Для каждого найденного числа запишите в ответе его наибольший нетривиальный делитель.
# Ответы расположите в порядке возрастания.
'''
def divisors(x):
    div = []
    if x ** 0.5 == int(x ** 0.5):
        for j in range(2, int(x**0.5)+1):
            if x % j == 0:
                div += [j, x//j]
    return sorted(set(div))


for num in range(289123456, 389123456+1):
    div = divisors(num)
    if len(div) == 3:
        print(num, max(div))
'''
# Ответ:
# 294499921 2248091
# 352275361 2571353
# 373301041 2685619


# endregion Урок: ************************************************************


# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************


# Олеся = [1.1, 2.1, 4.1, 5.1, 6.1, 7.1, 10.1, 11.1, 12.1, 14.1, 16.1, 17.1, 18.1, 19-21 (кодом)]
# КЕГЭ = []
# на следующем уроке: # порешать 8 номер через itertools
