# region Домашка: ******************************************************************
'''
R = []
alphabet = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
for x in alphabet[:15]:
    A = int(f'1{x}51', 15)
    B = int(f'3{x}2', 15)
    if (A - B) % 4 == 0:
        R.append((A - B) // 4)
print(max(R))
'''


# endregion Домашка: ******************************************************************


# region Урок: ******************************************************************

# Тип 5 №18487
# Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1. Строится двоичная запись числа N.
# 2. Запись «переворачивается», то есть читается справа налево.
# Если при этом появляются ведущие нули, они отбрасываются.
# 3. Полученное число переводится в десятичную запись и выводится на экран.

# Какое наибольшее число, не превышающее 100, после обработки автоматом даёт результат 13?
'''
R = []
for n in range(1, 100):
    # s = bin(n)[2:]  # bin() - двочиная, oct() - восмеричная, hex() - itcnyflwtnthbxyfz
    s = f'{n:b}'
    s = s[::-1]  # 2. Запись «переворачивается», то есть читается справа налево.
    r = int(s, 2)  # Перевод из двоичной в 10-ную
    # ValueError: int() base must be >= 2 and <= 36, or 0
    if r == 13:
        R.append(n)

print(max(R))
'''
# Ответ: 88


# Тип 5 №18708
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу:
# а) складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа (справа).
# б) над этой записью производятся те же действия — справа дописывается остаток от деления суммы цифр на 2.
#
# Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число, большее, чем 85.
# В ответе запишите это число в десятичной системе счисления.
'''
for n in range(1, 1000):
    s = bin(n)[2:]
    for _ in range(2):
        s = s + str(s.count('1') % 2)
    r = int(s, 2)
    if r > 85:
        print(n)
        break
'''
# Ответ: 21


# Тип 5 №33475
# Алгоритм получает на вход натуральное число N > 1 и строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. В конец записи (справа) дописывается вторая справа цифра двоичной записи.
# 3. В конец записи (справа) дописывается вторая слева цифра двоичной записи.
# 4. Результат переводится в десятичную систему.

# При каком наименьшем числе N в результате работы алгоритма получится R>180?
# В ответе запишите это число в десятичной системе счисления.
'''
for n in range(2, 1000):
    s = bin(n)[2:]
    s = s + s[-2]  # s += s[-2]
    s = s + s[1]
    r = int(s, 2)
    if r > 180:
        print(n)
        break
'''
# Ответ: 46


#
# № 12721 (Уровень: Базовый)
# (C. Горбачёв) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится восьмеричная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если количество чётных цифр в записи числа нечётно, то к трём последним разрядам
# восьмеричной записи справа дописывается 46;
# б) если количество чётных цифр в записи числа чётно, то остаток от деления числа на 8 умножается на 5,
# переводится в восьмеричную запись и дописывается слева.
# Полученная таким образом запись является восьмеричной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число R, которое может быть получено с помощью описанного алгоритма при N не меньшем 80.
# В ответ запишите это число в десятичной системе счисления.
'''
R = []
for n in range(81, 10000):
    s = oct(n)[2:]
    chet = [x for x in s if x in '0246']
    if len(chet) % 2 != 0:
        s = s[-3:] + '46'  # то к трём последним разрядам восьмеричной записи справа дописывается 46;
    else:
        x = (n % 8) * 5
        s = oct(x)[2:] + s
    r = int(s, 8)
    R.append(r)
print(min(R))
'''
# Ответ: 38


# № 9828 Основная волна 27.06.23 (Уровень: Средний)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# 6) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран

# Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 199.

# def convert(num, system):
#     res = ''
#     while num > 0:
#         res += str(num % system)
#         num //= system
#     return res[::-1]
'''
def convert(num, system):
    res = ''
    while num > 0:
        res = str(num % system) + res
        num //= system
    return res


for n in range(1, 1000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 199:
        print(n)
'''


'''
from string import *
alphabet = digits + ascii_uppercase
print(alphabet)  # 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ


def convert(num, system):
    res = ''
    while num > 0:
        res = alphabet[num % system] + res
        num //= system
    return res


for n in range(1, 1000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 199:
        print(n)
'''
# Ответ: 20


# endregion Урок: **********************************************************


# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************


# Михаил = [2, 5, 6, 14]
# КЕГЭ  = []
# на следующем уроке:
