# region Домашка: ******************************************************************************



# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

'''
x = int(input())
summ = 0
for i in range(x):
    num = int(input())
    if num != 10000000000:
        summ = summ + num
print(summ)
'''


# Тип 12 № 27240
# Дана программа для Редактора:
#
# ПОКА нашлось (11)
#     ЕСЛИ нашлось (112)
#         ТО заменить (112, 6)
#         ИНАЧЕ заменить (11, 3)
# КОНЕЦ ПОКА
#
# Исходная строка содержит десять единиц и три двойки, других цифр нет, точный порядок расположения единиц и двоек
# неизвестен. Какую наибольшую сумму цифр может иметь строка, которая получится после выполнения программы?
'''
import itertools
R = []
for s in itertools.product('12', repeat=13):
    s = ''.join(s)  # join() - метод строк позволяющий из списка (кортежа) строк получить одну строку
    if s.count('2') == 3:

        while '11' in s:
            if '112' in s:
                s = s.replace('112', '6', 1)
            else:
                s = s.replace('11', '3', 1)

        # Вариант 1
        #print(s, sum([int(i) for i in s]))

        # Вариант 2
        #print(s, s.count('1') + s.count('2') * 2 + s.count('3') * 3 + s.count('6') * 6)

        R.append(sum([int(i) for i in s]))
print(max(R))
'''
# Ответ: 24



# Тип 12 № 27383
# Дана программа для Редактора:
#
# ПОКА нашлось (12)
#   заменить (12, 4)
# КОНЕЦ ПОКА
#
# Исходная строка содержит десять единиц и некоторое количество двоек, других цифр нет, точный порядок расположения
# единиц и двоек неизвестен. После выполнения программы получилась строка с суммой цифр 25. Какое наименьшее
# количество двоек могло быть в исходной строке?
'''
import itertools as it
for x in range(1, 10):
    for s in it.product('12', repeat=10+x):
        if s.count('1') == 10:
            s = ''.join(s)

            while '12' in s:
                s = s.replace('12', '4', 1)

            if sum([int(i) for i in s]) == 25:
                print(x)
                exit()
'''
# Ответ: 5


# Встроенные функции в python
'''
print()
len()
max()
sum()
int()
str()
exit()
float()
list()
'''

# Методы - функция прописанная для определенного объекта (типа данных)
'''
.replace() - для строк
.append() - для списоков 
.add() - для множеств
.reverse() - для списокв
'''

# Мы можем писать свои функции
'''
def my_NOD(x, y):
    dl = 0
    for j in range(1, min(x, y)+1):
        if x % j == 0 and y % j == 0:
            dl = j
    return dl
'''


# Тип 16 № 7270 i
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = F(n–1) * (n + 2), при n > 1
#
# Чему равно значение функции F(5)? В ответе запишите только натуральное число.
'''
def F(n):
    if n > 1:
        return F(n-1) * (n + 2)
    if n == 1:
        return 1

print(F(5))
'''
# Ответ: 840


# Тип 16 № 4657 i
# Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями:
#
# F(1) = 1
# F(n) = 2 * G(n–1) + 5 * n, при n >1
#
# G(1) = 1
# G(n) = F(n–1) + 2 * n, при n >1
#
# Чему равно значение функции F(4) + G(4)?
# В ответе запишите только натуральное число.
'''
def F(n):
    if n > 1:
        return 2 * G(n-1) + 5 * n
    if n == 1:
        return 1

def G(n):
    if n > 1:
        return F(n-1) + 2 * n
    if n == 1:
        return 1

print(F(4) + G(4))
'''
# Ответ: 89


# Тип 16 № 47220 i
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n)=1 при n=1;
# F(n)=n·F(n−1), если n>1.
#
# Чему равно значение выражения F(2023) / F(2020)?
'''
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n*F(n-1)

# print(F(2023) / F(2020))  # RecursionError: maximum recursion depth exceeded
print(2023 * 2022 * 2021)
'''
# Ответ: 8266912626


# Todo: Дорешать
# Тип 16 № 47013
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:

# F(0) = 0;
# F(n) = F(n − 1) + 1, если n нечётно;
# F(n) = F(n / 2), если n > 0 и при этом n чётно.

# Укажите количество таких значений n < 1_000_000_000, для которых F(n)=3.


def F(n):
    if n == 0:
        return 0
    if n % 2 != 0:
        return F(n - 1) + 1
    if n > 0 and n % 2 == 0:
        return F(n / 2)

count = 0
for n in range(1, 1_000_000_000):
    if F(n) == 3:
        count += 1
print(count)





# endregion Урок: ******************************************************************************


# todo: Артем = [2, 5, 8, 12, 14, 16]
# на прошлом уроке: Говорили про функции в Python и пробовали решать 16 номера.
# на следующем уроке:
