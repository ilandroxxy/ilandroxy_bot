# region Домашка: ******************************************************************************



# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Ход коня
# Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли конь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
# Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую или «NO» в противном случае.
'''
x1 = int(input('x1: '))
y1 = int(input('y1: '))
x2 = int(input('x2: '))
y2 = int(input('y2: '))

if x2 - x1 == 1 and (y2 - y1 == 2 or y2 - y1 == -2):
    print('YES')
elif x2 - x1 == -1 and (y2 - y1 == 2 or y2 - y1 == -2):
    print('YES')
elif y2 - y1 == 1 and (x2 - x1 == 2 or x2 - x1 == -2):
    print('YES')
elif y2 - y1 == -1 and (x2 - x1 == 2 or x2 - x1 == -2):
    print('YES')
else:
    print("NO")
'''

'''
z = int(input())
x = int(input())
c = int(input())
v = int(input())
b = int(input())
print("Наименьшее число =", min(z, x, c, v, b))
print(f"Наибольшее число = {max(z, x, c, v, b)}")
'''


# Тип 5 № 7982 i
# Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам.

# 1. Складываются первая и вторая, а также вторая и третья цифры исходного числа.
# 2. Полученные два числа записываются друг за другом в порядке убывания (без разделителей).

# Пример. Исходное число: 348. Суммы: 3+4 = 7; 4+8 = 12. Результат: 127.
# Укажите наименьшее число, в результате обработки которого автомат выдаст число 159.
'''
for n in range(100, 1000):  # [100, 1000)
    L = [int(i) for i in str(n)]
    a = L[0] + L[1]
    b = L[1] + L[2]  # 1. Складываются первая и вторая, а также вторая и третья цифры исходного числа.

    r = f'{max(a, b)}{min(a, b)}'

    if r == '159':
        print(n)
        break
'''
# Ответ: 187



# Тип 5 № 14767 i
# Автомат получает на вход четырёхзначное число (число не может начинаться с нуля).
# По этому числу строится новое число по следующим правилам.
#
# 1. Складываются отдельно первая и вторая, вторая и третья, третья и четвёртая цифры заданного числа.
# 2. Наименьшая из полученных трёх сумм удаляется.
# 3. Оставшиеся две суммы записываются друг за другом в порядке неубывания без разделителей.
#
# Пример. Исходное число: 1984. Суммы: 1 + 9 = 10, 9 + 8 = 17, 8 + 4 = 12.
# Удаляется 10. Результат: 1217.
# Укажите наименьшее число, при обработке которого автомат выдаёт результат 613.
'''
# Вариант 1
for n in range(1000, 10000):
    L = [int(i) for i in str(n)]

    a = L[0] + L[1]
    b = L[1] + L[2]
    c = L[2] + L[3]

    maxi = max(a, b, c)
    mini = min(a, b, c)
    sred = (a+b+c) - maxi - mini

    r = f'{sred}{maxi}'
    if r == '613':
        print(n)
        break
        
# Вариант 2
for n in range(1000, 10000):
    L = [int(i) for i in str(n)]
    M = sorted([L[0] + L[1], L[1] + L[2], L[2] + L[3]])

    r = f'{M[1]}{M[2]}'  # M[0] - наименьшее число
    
    if r == '613':
        print(n)
        break
        '''
# Ответ: 1067


# Тип 5 № 47002
# Алгоритм получает на вход натуральное число N > 1 и строит по нему новое число R следующим образом:
#
# 1. Строится двоичная запись числа N.
# 2. Вычисляется количество единиц, стоящих на чётных местах в двоичной записи числа N
# без ведущих нулей, и количество нулей, стоящих на нечётных местах.
# Места отсчитываются слева направо (от старших разрядов к младшим, начиная с единицы).
# 3. Результатом работы алгоритма становится модуль разности полученных двух чисел.
#
# Пример. Дано число N = 39. Алгоритм работает следующим образом:
# 1. Строится двоичная запись: 39_10 = 100111_2.
# 2. Выделяем единицы на чётных и нули на нечётных местах: 100111.
# На чётных местах стоят две единицы, на нечётных — один ноль.
# 3. Модуль разности равен 1.
#
# Результат работы алгоритма R = 1.
#
# При каком наименьшем N в результате работы алгоритма получится R = 4?
'''
# Вариант 1
for n in range(2, 10000):
    temp = n

    L = []
    while n > 0:
        L.append(n % 2)  # 1. Строится двоичная запись числа N.
        n //= 2
    L.reverse()

    count1 = 0
    count0 = 0
    for i in range(0, len(L)):
        if (i+1) % 2 == 0 and L[i] == 1: # 2. Выделяем единицы на чётных и нули на нечётных местах: 100111.
            count1 += 1  # На чётных местах стоят две единицы, на нечётных — один ноль.
        if (i+1) % 2 != 0 and L[i] == 0:
            count0 += 1

    r = abs(count1 - count0)  # 3. Модуль разности равен 1.

    if r == 4:
        print(temp)
        break

#  Вариант 2
for n in range(2, 10000):
    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.

    count1 = 0
    count0 = 0
    for i in range(0, len(s)):
        if (i + 1) % 2 == 0 and s[i] == '1':  # 2. Выделяем единицы на чётных и нули на нечётных местах: 100111.
            count1 += 1  # На чётных местах стоят две единицы, на нечётных — один ноль.
        if (i + 1) % 2 != 0 and s[i] == '0':
            count0 += 1

    r = abs(count1 - count0)  # 3. Модуль разности равен 1.

    if r == 4:
        print(n)
        break
'''
# Ответ: 255



# Тип 5 № 17324 i
# Автомат обрабатывает натуральное число N по следующему алгоритму:
#
# 1. Строится двоичная запись числа N.
# 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.
# Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.
# 3. Полученное число переводится в десятичную запись.
# 4. Новое число вычитается из исходного, полученная разность выводится на экран.
#
# Пример. Дано число N = 11. Алгоритм работает следующим образом.
# 1. Двоичная запись числа N: 1011.
# 2. Удаляется первая единица и следующий за ней ноль: 11.
# 3. Десятичное значение полученного числа 3.
# 4. На экран выводится число 11 – 3 = 8.
#
# Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 10 до 1000?
'''
# Вариант 1
S = set()  # пустое множество set()
for n in range(10, 1000+1):
    temp = n

    L = []
    while n > 0:
        L.append(n % 2)  # 1. Строится двоичная запись числа N.
        n //= 2
    L.reverse()

    del L[0]  # 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.

    r = 0
    L.reverse()
    for i in range(0, len(L)):   # 3. Полученное число переводится в десятичную запись.
        r += L[i] * 2 ** i

    S.add(temp - r)

print(len(S))

# Вариант 2
S = set()  # пустое множество set()
for n in range(10, 1000+1):
    s = bin(n)[2:]  # 1. Строится двоичная запись числа N.

    s = s[1:]  # 2. Удаляется первая слева единица и все следующие непосредственно за ней нули.

    r = int(s, 2)  # 3. Полученное число переводится в десятичную запись.

    S.add(n - r)

print(len(S))
'''
# Ответ: 7


# Тип 8 № 3235 i
# Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке.
# Вот начало списка:
# 1. ААААА
# 2. ААААО
# 3. ААААУ
# 4. АААОА
#
# Укажите номер слова ОАОАО.
'''
s = 'АОУ'
count = 1
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    temp = a + b + c + d + e
                    if temp == 'ОАОАО':
                        print(count, temp)
                    count += 1
'''
# Ответ: 92



# endregion Урок: ******************************************************************************


# todo: Артем = [2, 5, 8.1, 14]
# на прошлом уроке: Разобрали 5 задачи всех типов, затронули 8.1
# на следующем уроке: Разбираем 8.2, 12 номера
