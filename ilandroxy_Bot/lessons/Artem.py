# region Домашка: ******************************************************************************



# endregion Домашка: ******************************************************************************


# region Урок: ******************************************************************************

# Максимальная цифра равна 7
# Минимальная цифра равна 0

# 12345
# 1234

# Вариант 1
'''
n = int(input('n: '))
maxi = -9999
mini = 9999
while n > 0:
    x = n % 10
    if maxi < x:
        maxi = x
    if mini > x:
        mini = x
    n //= 10
print(f'Максимальная цифра равна {maxi}')
print(f'Минимальная цифра равна {mini}')
'''

# Вариант 2
'''
n = int(input('n: '))
maxi = -9999
mini = 9999
while n > 0:
    x = n % 10
    maxi = max(maxi, x)
    mini = min(mini, x)
    n //= 10
print(f'Максимальная цифра равна {maxi}')
print(f'Минимальная цифра равна {mini}')
'''
'''
# Вариант 3
n = int(input('n: '))
N = []
while n > 0:
    x = n % 10
    N.append(x)
    n //= 10
print(f'Максимальная цифра равна {max(N)}')
print(f'Минимальная цифра равна {min(N)}')

# Вариант 4
n = int(input('n: '))
N = [int(i) for i in str(n)]
print(f'Максимальная цифра равна {max(N)}')
print(f'Минимальная цифра равна {min(N)}')


# Вариант 5
N = [int(i) for i in str(int(input('n: ')))]
print(f'Максимальная цифра равна {max(N)}')
print(f'Минимальная цифра равна {min(N)}')

# Вариант 6
n = int(input('n: '))
print(f'Максимальная цифра равна {max([int(i) for i in str(n)])}\n'
      f'Минимальная цифра равна {min([int(i) for i in str(n)])}')
'''

# Тип 23 № 27307
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
#
# Сколько существует программ, которые преобразуют исходное число 3 в число 62,
# и при этом траектория вычислений содержит число 14 и не содержит числа 59?
'''
def F(a, b):
    if a > b or a == 59:  # не содержит числа 59
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2, b)

print(F(3, 14) * F(14, 62))  # содержит число 14
'''
# Ответ: 48


# Тип 23 № 13418
# У исполнителя Нечет М две команды, которым присвоены номера:
# 1. прибавь 1
# 2. сделай нечётное

# Сколько существует таких программ, которые число 1 преобразуют в число 27,
# причём траектория вычислений не содержит число 26?
'''
def F(a, b):
    if a > b or a == 26:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*2+1, b)

print(F(1, 27))
'''

# Вариант 2
'''
def F(a, b):
    if a >= b or a == 26:
        return int(a == b)
    else:
        return F(a+1, b) + F(a*2+1, b)

print(F(1, 27))
'''
# Ответ: 13


# Тип 23 № 18724
# У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 3
# 3. Прибавить 2

# Сколько существует программ, которые преобразуют исходное число 1 в число 15
# и при этом траектория вычислений содержит числа 10 и 12?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+1, b) + F(a*3, b) + F(a+2, b)

print(F(1, 10) * F(10, 12) * F(12, 15))

def F(a, b):
    if a >= b:
        return int(a == b)
    else:
        return F(a+1, b) + F(a*3, b) + F(a+2, b)

print(F(1, 10) * F(10, 12) * F(12, 15))
'''
# Ответ: 504


# Тип 16 № 35905
# Обозначим через mod(a, b) остаток от деления натурального числа a на натуральное число b.
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 3), если n > 0 и при этом mod(n, 3)=0;
# F(n) = mod(n, 3) + F(n − mod(n, 3)), если mod(n, 3) > 0.
#
# Назовите минимальное значение n, для которого F(n) = 9.

# Вариант 1
'''
def F(n):
    if n == 0:
        return 0  # F(0) = 0;
    if n > 0 and n % 3 == 0:
        return F(n / 3)
    if n % 3 > 0:
        return (n % 3) + F(n - (n % 3))

for n in range(1, 1000):
    if F(n) == 9:
        print(n)
        break
'''

'''
def mod(a, b):
    return a % b
def F(n):
    if n == 0:
        return 0  # F(0) = 0;
    if n > 0 and mod(n, 3) == 0:
        return F(n / 3)
    if mod(n, 3) > 0:
        return mod(n, 3) + F(n - mod(n, 3))

for n in range(1, 1000):
    if F(n) == 9:
        print(n)
        break
'''
# Ответ: 161


#
# № 5954 (Уровень: Базовый)
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = 1 при n = 1;
# F(n) = n × F(n − 1), если n > 1.
#
#  Чему равно значение выражения (F(2023) - F(2022)) / F(2020)?

# (F(2023)/ F(2020)) - (F(2022) / F(2020))

# F(2023) = 2023 * F(2022)
# F(2022) = 2022 * F(2021)
# F(2021) = 2021 * F(2020)  / F(2020)


# F(2022) = 2022 * F(2021)
# F(2021) = 2021 * F(2020)  / F(2020)

print(2023 * 2022 * 2021 - 2022 * 2021)
# Ответ: 8262826164



# № 5291 /dev/inf 12.2022 (Уровень: Базовый)
# (А. Рогов) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#
# F(n) = 1 при n < 3;
# F(n) = F(n − 1) + n, если n > 2 и при этом n нечётно;
# F(n) = F(n − 3) + 2 × n, если n > 2 и при этом n чётно.
#
# Чему равно значение выражения F(2048) - F(2041)?

# F(2048) = F(2045) + 2 × 2048
# F(2045) = F(2044) + 2045
# F(2044) = F(2041) + 2 × 2044   / F(2041)

print(2 * 2048 + 2045 + 2 * 2044)
# Ответ: 10229


# endregion Урок: ******************************************************************************


# todo: Артем = [2, 5, 8, 12, 14, 16, 23]
# на прошлом уроке: Разобрали 23 номера полностью. Повторили 16 номер и разобрали аналитические задачи 16 номера с КЕГЭ.
# на следующем уроке:
